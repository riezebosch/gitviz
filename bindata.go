// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\xc1\xaa\xcf\x53\xc9\x80\x22\xb9\x7d\x10\xa0\x70\xec\x3c\xc3\xda\x75\x2b\xd0\xad\xc3\x5a\x6c\x2f\x82\x00\xa5\xc4\x93\xcd\x44\x22\x05\xf2\xfc\x2f\xa9\xbf\xfb\x70\xa4\x64\x4b\xb2\x13\x04\x9b\x5e\xd8\xe2\xef\x77\x77\xbc\x3b\x1e\x8f\xd4\xf4\x85\xd0\x39\x6e\x6b\x60\x0b\xac\xca\xab\xb3\x69\xfb\x07\x5c\x5c\x9d\x31\x36\x45\x89\x25\x5c\xcd\x25\xae\xe4\xfd\x34\xf5\x23\xc2\x6d\x6e\x64\x8d\x8c\x54\x67\x01\xc2\x06\xd3\x5b\xbe\xe2\x1e\x0d\x98\x35\xf9\x2c\x58\x20\xd6\x76\x92\xa6\x4b\x55\xdf\xcd\x93\x5c\x57\xe9\x4a\xda\x73\x05\xb8\xd6\xe6\xee\x87\x92\x23\x58\x4c\x85\xb4\xd8\xc5\x93\x4a\xaa\xe4\xd6\x06\x57\xd3\xd4\x1b\x73\xb3\x95\x52\xdd\xb1\x85\x81\xe2\xdf\x58\xcd\xad\x0d\x98\x81\x72\x16\x58\xdc\x96\x60\x17\x00\x18\x74\x23\x70\x02\xa9\x0f\x8f\x24\x86\x1c\x31\xcc\x25\x2a\xce\xb4\xd8\xb2\x07\x37\x76\x18\xc8\xf9\x02\x27\xec\xf5\x78\xfc\xdf\xcb\x3d\xba\x96\x02\x17\x5d\x70\x77\xe6\xfe\x5e\x56\xdb\xc6\xaf\xe7\x9a\x78\x3b\xb4\x20\x38\xf2\x8e\x72\xad\xad\x44\xa9\xd5\x84\x15\x72\x03\xe2\xa0\x6f\xbc\xd1\xf1\x01\x41\x5d\xf7\xc6\x15\x37\x73\xa9\x7a\x50\xcd\x85\x90\x6a\x3e\x61\xe3\xe4\x02\xaa\x03\x9e\xe9\xcd\xb9\x95\xf7\x8e\xca\xb4\x11\x60\xce\x33\xbd\xb9\x7c\x5e\x08\x6f\xba\x58\xc6\xf3\xbb\xb9\xd1\x4b\x25\xce\x73\x5d\x6a\x33\x61\x73\x03\xdb\x03\xaf\x57\x60\x8a\x52\xaf\x27\xcc\xe6\x46\x97\xe5\x81\x69\xc4\xd7\x0b\x89\xd0\x4f\x49\xb6\x44\xd4\xca\x3e\x27\x2b\x25\x14\x38\x61\x6f\xba\xb1\xb9\xb4\xec\x91\x1d\xd5\x40\xea\x8a\xe0\xea\x6c\x9a\xfa\xdd\x30\xa5\x45\xf7\x35\x30\x15\x72\xc5\xa4\x98\x05\xfb\x95\xa4\x82\x15\x72\xd5\xd0\xb5\x01\x47\xd3\x32\x11\x53\x1b\x18\x28\x36\xde\x36\x35\xe5\x28\x0f\x39\xb6\x5e\x6c\xad\xcc\x6d\xc0\xb4\xca\x4b\x99\xdf\x51\xc9\xea\x3a\x1a\x05\x57\x5f\xbe\x7e\xfe\x7d\x9a\x7a\xd1\xd3\xba\x45\xb1\x16\x1d\x45\x1a\x92\xe2\x87\x0f\x7f\xbd\xef\x2b\x36\x0e\xfb\xf7\x27\xf7\xb3\x97\xcf\xb5\xb2\xc8\x74\x76\x0b\x39\x5a\x36\x63\xd7\x41\x56\xea\x2c\x88\x59\x80\x06\x80\xfe\x73\x5d\x55\x12\x83\x9b\x4b\x6f\x14\xf5\x3b\x5a\x2d\x36\x63\x11\xd9\x1d\xb1\xd9\x55\x67\x75\xbc\xb9\x8a\xd7\xb5\x54\x73\x36\x63\x0a\xd6\xec\x57\x5e\x47\xd7\x7b\x09\x7a\xae\x43\x9a\x24\x8c\x59\x98\x95\x4b\x08\x6f\xe2\x01\x4b\x53\x13\x3b\x37\x00\xea\x98\xf6\x1e\x91\x80\x01\x71\x4c\x67\x86\xab\x7c\xd1\xe8\x6f\xc3\x9b\x3d\x7d\x33\xba\xec\x88\x1e\xb6\x13\xe0\xd2\xa8\xd6\xe9\x64\x0e\xd8\x44\xf6\xfd\x3b\x0b\x6b\xa9\xee\xc2\x6e\x49\xa2\xfe\xc4\x33\x28\x29\xfe\x8d\x0b\xbe\xc9\x5d\x22\x55\x5e\x2e\x05\xd8\x68\x93\x78\xf5\xff\xb3\x4d\x22\x45\x62\x97\x99\x45\x13\x8d\x63\xf6\x76\xc4\x26\x0e\xf3\x6e\xb8\x9f\x15\x37\x4c\x69\x01\xb6\x49\xd6\x4a\xda\xe4\x3d\x47\xfe\x05\x30\xba\x6e\x1d\x26\x21\x10\xf3\xc7\x85\xba\x4b\x59\xd3\xee\x20\xc9\x87\xe1\x6e\x0d\x68\x0f\x07\xf1\xd1\xd6\x1e\xe2\x7c\x89\xfa\x0f\xb0\xf2\x1e\x26\x0c\xcd\x12\x0e\x4c\x53\xc2\x93\x8e\x6d\x7a\x40\xf1\xac\x04\x31\x94\x66\xae\x29\x18\x05\xf6\x97\x25\x0e\x75\xe8\x99\x1b\xbe\x92\xc8\xc9\x61\x5e\xbe\x23\xf7\xb9\xc2\x09\x3b\x7f\x3d\x1e\x8f\xc7\xf1\x91\x78\x0e\x0a\x0d\x2f\x7f\x76\x5a\xdb\x09\x3b\x21\x22\x78\x55\xbb\x56\xf6\xfa\x98\xe3\x2b\x2d\xc5\xe7\x15\x98\x92\xd7\x27\x05\x6c\x6d\xa4\x9a\x7f\x02\x35\x77\x1d\xfe\x62\x60\x7f\xd7\x1f\x56\x7c\xf3\x27\x94\x3a\xf7\xae\x24\x17\x03\x56\xaa\x0e\xdb\xe7\x50\x56\x60\x11\xc8\x89\xb3\x13\xc6\xdd\x4a\x0f\xd3\x65\x2b\xad\xc9\xab\xe3\x24\xee\x93\x5f\xf0\xd2\xc2\x71\x54\x54\x8c\x13\x16\xe6\x5a\xa1\x54\x4b\xbd\xb4\xe1\x53\x51\x35\xad\x38\x78\x39\x76\x4f\xd0\x67\x9b\x42\x3a\x8a\x96\x1b\xa3\xd7\x47\x3e\xbb\xd9\xf5\x29\x94\x3d\x5d\x34\xfb\xa0\x73\x5e\xc2\x07\x9e\x23\xb9\x34\x4e\x2e\x8e\x84\x76\x67\xa7\x47\x9d\xa0\xdc\xe6\x1a\xfa\x50\x68\x75\xb2\x20\xdb\xe8\xdd\x49\x14\x3c\x66\xdc\xb7\x83\xde\xae\xa3\xec\x72\xa9\x80\xfa\xa2\xd0\xf9\xb2\x02\x85\xd4\x49\x7e\x2a\x81\x5e\x7f\xdc\x7e\x14\x51\xb8\x3f\x57\xc2\x51\x47\xd5\x9d\xfa\x4f\x68\x11\x1f\x36\x8d\xc0\x6b\xb4\xf7\x8c\x43\x33\xf8\xcd\x23\xd1\xde\x8d\x98\x3d\xf8\xc8\xe3\xa6\x71\xec\xe2\xb6\x33\x34\xa6\xda\x4b\x94\x56\x51\xe8\x4e\x95\x30\x66\x51\xcd\x0d\xaf\xec\xa0\xa7\xcb\xa2\x25\x12\x67\xf2\x7a\x7c\x33\xea\xa7\x8e\x60\xf2\x86\x58\xd7\x3f\x87\xe2\x97\x3d\x71\x32\x78\xd4\x35\x49\xd6\x37\xce\xd1\x89\x85\x29\x00\xf3\x45\xf4\x2d\xe5\xb5\x4c\x1b\xd5\xf4\x3f\x0f\x7b\x9d\x5d\x3b\x90\x62\xf7\x6d\x94\xe0\x02\x54\x64\xc0\xd6\x5a\x59\xa0\x60\xda\xf7\x84\x0e\xc1\x68\xd4\x48\x50\xb6\x40\x21\x09\x50\x92\x13\xa9\x14\x98\xaf\xb0\x41\x36\x63\x0d\x37\xf0\xbc\x53\x04\xc3\xf3\xa3\xb9\x63\xb4\xcd\x58\xc8\xa2\x00\x03\x2a\xa7\xc4\x44\x85\x34\x16\x63\xc6\x95\xc6\x05\x2d\x4e\xae\xab\x9a\x1b\x7f\x78\x3a\x2e\x29\x64\x89\x60\x22\x4e\xc8\x8b\x46\x2e\xb1\xba\x82\x28\x23\xa8\x51\x88\x78\xcc\xb2\xd1\xa8\x9d\xa4\x58\xaa\x9c\xd6\x94\x95\x9a\x8b\xa8\x9b\x37\x9f\xaf\xd0\xe5\x6b\x6e\x78\xbd\x08\x9f\xca\xca\xad\xd5\x6a\x9f\x15\x1a\xf4\x0b\x60\xbf\x8d\x12\x03\x95\x5e\x41\x74\x08\x2e\x3a\xac\xf9\x28\x66\xa4\x9a\x34\x65\xe7\x5d\x25\x43\x3c\x91\x82\xcd\x66\x33\x96\x25\x52\x8c\x06\x19\xf5\xfa\x5c\x88\xae\xd1\xae\x9d\xde\x04\x8f\x19\x4d\x2a\x5e\x47\x1b\xc2\xa3\x07\x26\x85\x3f\x65\x63\x56\xd2\x49\x3d\x61\xb8\x90\x36\x69\xce\xed\x68\x33\x8a\xdb\x6d\xde\xe0\xee\x3e\xd3\x9e\xda\x71\xd3\x2f\xfd\x30\x66\xee\xe3\xc8\xdb\x63\xbb\x43\xe6\xdb\xc7\x6d\xae\x13\x69\xf1\x78\x37\x2d\x0e\xe9\x47\x50\x18\x5d\x35\x31\xb8\xd7\x57\xaf\x18\x4f\x50\x37\x10\xea\x61\xae\xbc\xd1\x53\xb9\x6a\x8c\xf7\x66\xfd\xa7\x33\xed\x46\xbd\x2b\xf8\xbe\xc6\xfc\x65\xb5\x53\x16\x6d\x07\x69\x2e\x05\x09\x09\x7c\x91\xd5\xb2\x74\x07\x7a\x34\x30\x53\xac\x05\xed\x84\x41\x6f\x79\x9e\x8d\xd3\x92\x3c\x93\xa5\xbc\x87\xe8\x62\x3c\x7e\x5a\xce\xe0\xa3\x6e\xf9\x8d\xe3\x21\x0b\xf8\x51\x21\x98\x15\x2f\x23\xc2\x63\xf6\xbf\xf1\xde\xf4\xe1\xcb\x75\x9a\xfa\x4f\x86\x69\xea\x3e\xab\xff\x0e\x00\x00\xff\xff\xea\x8e\x97\xd7\x6d\x0f\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 3949, mode: os.FileMode(420), modTime: time.Unix(1568455693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
