// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\xc1\xaa\x77\x95\x0c\x28\x92\xd2\x43\x80\xc2\xb1\x7d\x87\xeb\xbd\x6c\x81\xee\x76\xb1\x2d\xf6\x4b\x10\xa0\x94\x38\x96\x99\x50\xa4\x40\x8e\x1c\xbb\xa9\xff\xfb\x82\x2f\xb2\x65\xd9\x09\x8a\x5d\x7d\xb1\x39\xcf\xcc\x70\xe6\xe1\x70\x46\x9a\xbd\x62\xaa\xc2\x6d\x0b\x64\x85\x8d\x58\x5c\xcc\xfa\x1f\xa0\x6c\x71\x41\xc8\x0c\x39\x0a\x58\xd4\x1c\xd7\xfc\xdb\x2c\xf7\x2b\x2b\x37\x95\xe6\x2d\x12\x6b\x3a\x8f\x10\x36\x98\xdf\xd3\x35\xf5\xd2\x88\x18\x5d\xcd\xa3\x15\x62\x6b\xa6\x79\xde\xc9\xf6\xa1\xce\x2a\xd5\xe4\x6b\x6e\x2e\x25\xe0\xa3\xd2\x0f\xff\x12\x14\xc1\x60\xce\xb8\xc1\xa1\x3c\x6b\xb8\xcc\xee\x4d\xb4\x98\xe5\xde\x99\xdb\x4d\x70\xf9\x40\x56\x1a\x96\x7f\xc5\x6b\x65\x4c\x44\x34\x88\x79\x64\x70\x2b\xc0\xac\x00\x30\x1a\x66\xe0\x14\x72\x9f\x9e\xd5\x18\x63\x16\x21\x8e\xa8\xb4\x54\x6c\x4b\x9e\xdc\xda\xc9\x80\xd7\x2b\x9c\x92\xab\xa2\xf8\xfb\xcd\x5e\xfa\xc8\x19\xae\x86\xc2\xdd\x85\xfb\x79\xdd\x6c\x43\x5c\x3f\xea\xe2\xdd\xd8\x03\xa3\x48\x07\xc6\xad\x32\x1c\xb9\x92\x53\xb2\xe4\x1b\x60\x07\x7b\xed\x9d\x16\x07\x09\xaa\xf6\x68\xdd\x50\x5d\x73\x79\x24\x6a\x29\x63\x5c\xd6\x53\x52\x64\xd7\xd0\x1c\xe4\xa5\xda\x5c\x1a\xfe\xcd\x41\xa5\xd2\x0c\xf4\x65\xa9\x36\x37\x3f\x96\xc2\xdb\xa1\xac\xa4\xd5\x43\xad\x55\x27\xd9\x65\xa5\x84\xd2\x53\x52\x6b\xd8\x1e\x70\xb5\x06\xbd\x14\xea\x71\x4a\x4c\xa5\x95\x10\x07\x24\xa8\x3f\xae\x38\xc2\x31\x25\xed\x6a\x6b\x78\x65\x7e\x84\x15\x01\x4b\x9c\x92\xb7\xc3\xdc\x1c\x2d\x7b\xc9\xce\xd6\x40\xee\x8a\x60\x71\x31\xcb\xfd\x6d\x98\xd9\x43\xf7\x35\x30\x63\x7c\x4d\x38\x9b\x47\xfb\x93\xb4\x05\xcb\xf8\x3a\xc0\xad\x06\x07\xdb\x63\xb2\x48\xab\x21\x20\x65\x87\xa8\xa4\x03\x43\xc0\x11\x51\xb2\x12\xbc\x7a\x98\x47\xa8\xea\x5a\x40\x32\x89\x16\x9f\xbf\x7c\xfa\x75\x96\x7b\xe5\x85\x4f\xf0\xe5\x2b\xe7\xdd\x2f\x3b\x59\xd9\x8c\x09\xaa\xf7\x96\xa8\xc4\x2a\x4f\x06\x94\x54\x4a\x1a\x24\x0d\x6d\x5b\x2e\x6b\x32\x27\x12\x1e\xc9\xcf\xb4\x4d\x6e\xf7\x1a\xf6\xb9\x8d\x4b\xa1\xca\x38\x25\x71\x29\x3a\x88\xef\xd2\x11\x8a\x1a\xc0\xa2\xb5\x06\x90\xa7\x70\xa5\x9a\x86\xa3\x55\xd0\xc0\x4e\xe1\x52\x53\x59\xad\x82\xfd\x36\xbe\xdb\xc3\x77\x93\x9b\x81\xea\xa1\x86\x01\x3b\x2d\xfb\xa0\xb3\x1a\x30\xa4\xf5\xfd\x3b\x89\x5b\x2e\x1f\xe2\x61\x1d\x0c\x28\xf8\x48\x4b\x10\xc9\xe6\x34\x7f\x55\xde\x43\x85\x86\xcc\xc9\x6d\x64\x33\x8d\x52\x12\xd9\x9c\xec\xaf\x0f\x3e\xba\xbb\x19\xef\x1f\x8c\x32\x2e\x2b\xd1\x31\x30\xc9\x26\xf3\x61\xfc\x93\x6c\x32\xce\x32\xd3\x95\x06\x75\x52\xa4\xe4\xdd\x84\x4c\x9d\xec\x50\x4c\x21\x9d\x35\xd5\x44\x2a\x06\x26\x50\xbf\xe6\x26\xfb\x0f\x45\xfa\x19\x30\xb9\xed\xd3\xb7\x4a\xc0\xea\xe7\x95\x2e\x06\x99\xb4\x36\x57\xab\xf9\x34\xbe\x70\x91\xbd\x86\x51\x7a\x72\x3b\xc7\x72\xda\xa1\xfa\x0d\x0c\xff\x06\x53\x82\xba\x83\x03\x12\x0a\x74\x3a\xf0\x6d\x1f\x90\xb4\x14\xc0\xc6\xda\xc4\xdd\x6b\x2d\xc1\xfc\xd4\xe1\xd8\xc6\x3e\xb5\xa6\x6b\x8e\xd4\x06\x4c\xc5\x7b\x1b\x3e\x95\x38\x25\x97\x57\x45\x51\x14\xe9\x89\x7a\x05\x12\x35\x15\xff\x77\x56\xdb\x29\x39\xa3\xc2\x68\xd3\xba\x6e\x74\x75\x8a\xd1\xb5\xe2\xec\xd3\x1a\xb4\xa0\xed\x59\x05\xd3\x6a\x2e\xeb\x8f\x20\x6b\xd7\xa4\xaf\x47\xfe\x77\xc7\xcb\x86\x6e\x7e\x07\xa1\x2a\x1f\x4a\x76\x3d\x42\xb9\x1c\xa0\xc7\x18\xf2\x06\x0c\x82\x0d\xe2\xe2\x8c\x73\x77\xd2\x63\xba\x4c\xa3\x94\x8d\xea\x94\xc4\x3d\xf9\x4b\x2a\x0c\x9c\x66\x65\x4b\x72\x4a\xe2\x4a\x49\xe4\xb2\x53\x9d\x89\x5f\xca\x2a\x74\xd3\xe8\x75\xe1\x9e\xe8\x18\x0d\x85\x74\x92\x2d\xd5\x5a\x3d\x9e\xc4\xec\x76\x57\xe7\xa4\xe4\xe5\xa2\xd9\x27\x5d\x51\x01\xff\xa3\x15\xda\x90\x8a\xec\xfa\x44\x69\x77\x71\x7e\x35\x48\xca\x5d\xae\x71\x0c\x4b\x25\xcf\x16\x64\x9f\xbd\x1b\x26\xd1\x73\xce\xfd\x1d\x3e\xba\x75\x96\x5d\xca\x25\x68\x32\x27\x4c\x55\x5d\x03\x12\x6d\x5f\xfa\xaf\x00\xfb\xf7\xdf\xdb\x0f\x2c\x89\xf7\xa3\x21\x9e\x0c\x4c\xdd\xe0\x7e\xc1\xca\xe2\x71\x68\x04\xde\xa2\x7f\x55\x38\x34\x83\x5f\xbc\x24\xd9\x87\x91\x92\x27\x9f\x79\x1a\x1a\xc7\x2e\xed\x3b\x43\x70\xd5\xbf\x07\x29\x99\xc4\x6e\xd8\xc4\x29\x49\x5a\xaa\x69\x63\x26\x64\xbe\x18\x90\xc3\x97\x3d\x90\x39\x97\xb7\xc5\xdd\xe4\x98\x3a\x2b\xb6\xd1\x58\xd4\x75\xe3\xb1\xfa\xcd\xa8\xc6\x24\x82\x44\x32\x27\x4b\xc0\x6a\x95\x7c\xcd\xd7\x57\x79\x68\xa6\xf9\xdf\x9e\xac\x95\x6b\xa4\xbb\x7e\xc1\xd9\xee\xeb\x24\xc3\x15\xc8\x44\x83\x69\x95\x34\x60\x43\xec\xff\x67\x76\xf4\x25\x93\xa0\xb1\xf7\xbe\x70\xd4\x66\x5c\x4a\xd0\x5f\x60\x63\xf7\x0b\xd8\x20\x9e\xdd\x78\xaa\x84\x0e\xdd\x37\x55\xc6\x97\x4b\xd0\x20\x2b\x9b\x60\xb2\xe4\xda\x60\x4a\xa8\x54\xb8\xb2\x24\x57\xaa\x69\xa9\x06\x47\x98\xc3\xb2\x25\x17\x08\x3a\xa1\x56\xf2\x2a\xe8\x65\x46\x35\x90\x94\x56\x14\x0c\x12\x9a\x92\x72\x32\xe9\x37\xd9\x4f\x28\xa1\x28\x4b\x86\xd3\xc9\x13\x14\x5b\x82\x6a\x4d\xdb\x55\x1e\xbf\xc4\xc3\xbd\x51\x72\xcf\x83\x5d\x1c\x1f\xe4\xfe\x3a\x64\x1a\x1a\xb5\x86\xe4\x90\x5c\x72\x38\xbb\x49\x4a\xac\x69\x16\xca\xc7\x87\x6a\x1d\xd1\x8c\x33\x32\x9f\xcf\x49\x99\x71\x36\x19\x9d\xa9\xb7\xa7\x8c\x0d\x9d\x0e\xfd\x1c\x6d\xf0\x9c\xd3\xac\xa1\x6d\xb2\xb1\xf2\xe4\x89\x70\xe6\x67\x66\x4a\x84\x1d\xdb\x53\x82\x2b\x6e\xb2\xc3\x10\x4f\xfb\xeb\x1a\xe4\xfe\xfd\x26\xcc\xe0\x34\xf4\x3d\xbf\x4c\x89\xfb\x4e\xf1\xfe\xc8\xee\xc0\x7c\xff\xb8\x4b\x72\x86\x16\x2f\x1f\xd2\xe2\x24\xc7\x19\x2c\xb5\x6a\x42\x0e\xee\xef\x9b\x37\x84\x66\xa8\x82\x08\xd5\x98\x2b\xef\xf4\x1c\x57\xc1\xf9\xd1\xae\x7f\x76\xa7\xdd\xe4\xe6\x99\xb7\x20\xff\x4a\x39\x28\x8c\xbe\x17\x84\xf1\x9e\x19\x54\xed\x67\xde\x74\xc2\x8d\xe6\xe4\xd8\x91\xaf\x51\x2f\x32\x80\x1f\x24\x82\x5e\x53\x91\x58\x79\x4a\xfe\x51\x14\x45\x00\x0f\xdf\x6b\xb3\xdc\xbf\x28\xcf\x72\xf7\x31\xf9\x47\x00\x00\x00\xff\xff\x6b\x07\x27\xf3\x63\x0e\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 3683, mode: os.FileMode(420), modTime: time.Unix(1568377399, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
