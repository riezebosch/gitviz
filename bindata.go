// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1568978470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x8f\x22\xb7\xb2\xff\x7f\x3e\x45\xa5\xf7\x6e\x68\xa4\xc6\xd8\xfd\xe0\x35\xc0\xcd\xcd\xe4\x29\x6d\x6e\x8e\x4e\xa2\x1c\x29\xab\x95\x62\xba\x0d\x78\xa7\xbb\xdd\xb2\x0d\xc3\xec\x84\xef\x7e\x54\xee\x06\x1a\x86\x59\x8d\x56\x3a\x07\x69\x07\xbb\xea\x57\xe5\xaa\x72\xd9\x55\x66\xa7\x5f\x65\x2a\xb5\x8f\x95\x80\xb5\x2d\xf2\xf9\xcd\xf4\xf0\x25\x78\x36\xbf\x01\x98\x5a\x69\x73\x31\x5f\x49\xbb\x95\x9f\xa6\xfd\x7a\x86\xf4\x5c\x96\xf7\xa0\x45\x3e\xf3\xcc\x5a\x69\x9b\x6e\x2c\xc8\x54\x95\x1e\xa0\xb2\x99\x27\x0b\xbe\x12\xfd\x5d\xaf\xa6\xad\xb5\x58\xce\xbc\x25\xdf\xe2\x94\xc8\x54\x79\x4e\x87\x49\xb5\xac\x6c\x23\x61\xc5\xce\xf6\x3f\xf2\x2d\xaf\xa9\x1e\x18\x9d\xce\xbc\xb5\xb5\x95\x99\xf4\xfb\x9b\xb2\xba\x5f\x91\x54\x15\xfd\xad\x34\xbd\x52\xd8\x07\xa5\xef\xbf\xc9\xb9\x15\xc6\xf6\x33\x69\x6c\x9b\x4e\x0a\x59\x92\x8f\xc6\x9b\x4f\xfb\xb5\xb2\x93\xc5\xb5\x25\x5f\xae\x35\x35\xc6\x6b\xdc\xb6\x8f\xb9\x30\x6b\x21\xac\xd7\xf6\xc0\x01\xfa\xb5\x7b\x88\xb8\xe4\x21\x07\x5c\xb0\x83\x85\xca\x1e\xe1\xc9\xcd\x1d\x4d\xc8\xd5\xda\x4e\x80\x51\xfa\xf6\xf6\x48\x7d\x90\x99\x5d\x5f\x12\x0b\xae\x57\xb2\x9c\x00\x3d\x91\x2a\x9e\x65\xb2\x5c\x1d\x69\xfb\x1b\xf7\xf5\xa6\x78\x6c\xcc\x7f\xed\x4a\xc3\x03\xed\xa0\x21\xe3\x96\xb7\x84\x2b\x65\xa4\x95\xaa\x9c\xc0\x52\xee\x44\x76\x92\xd7\xb5\xd2\x96\x4d\x56\x55\x67\xf3\xcf\x9a\x4d\x12\x51\x9c\xe8\x0b\xb5\xeb\x19\xf9\xc9\xb1\x16\x4a\x67\x42\xf7\x16\x6a\x77\xfb\x3a\x17\xa2\x36\x6d\xc1\xd3\xfb\x95\x56\x9b\x32\xeb\xa5\x2a\x57\x7a\x02\x2b\x2d\x1e\x4f\x7c\xb5\x15\x7a\x99\xab\x87\x09\x98\x54\xab\x3c\x3f\x71\x1a\xf8\xc3\x5a\x5a\x71\xa2\x2e\x55\x69\xd1\x34\x31\x01\x46\xc2\x83\xcd\x87\x60\x2d\x36\xd6\xaa\xd2\xbc\x26\x5e\xb9\x58\xda\x09\x84\x6d\xaf\x5d\xc0\x5a\x3a\x01\xa6\x7d\x97\x45\xf3\x9b\x69\xbf\x3e\x92\x53\xcc\x9a\x3a\x89\xa6\x99\xdc\x82\xcc\x66\xde\x71\x8f\x31\xe3\x33\xb9\x6d\xd8\x95\x16\x8e\x8d\x1b\xe8\xcd\xbf\x7e\x33\x1a\x0c\x46\xb7\x90\xe6\x32\xbd\x07\x55\x02\x87\x52\x65\x02\xac\x02\x23\x04\xd8\xb5\x80\x54\x95\x56\x94\xd6\xc0\x5a\x68\x31\xed\x57\x5a\x34\x9a\xf8\xc5\xb9\x59\x49\xbb\xde\x2c\xdc\xc1\xd1\x52\x7c\x12\x0b\x65\xd2\x75\xbf\xbe\x24\x3c\x48\x73\x6e\xcc\xcc\xab\x41\xbd\x54\xe9\x52\x68\x0f\xb8\x96\xbc\x97\xf3\x05\x9e\x9d\x3f\xa4\x78\x00\xa3\x36\x3a\x15\x68\xc9\x8f\xd2\xfe\xb4\x59\x78\xf3\xa9\xd9\xae\xea\x3d\x9c\x79\x23\xea\x35\x9b\x5c\x8f\xb7\x52\x3c\x7c\xab\x76\x33\x8f\x02\x85\x30\x71\xff\x3c\x70\xc1\x99\x79\x4b\x99\xe7\x93\x37\xcb\xe5\xf2\xb6\xd9\xb4\x37\x2c\x61\x09\x8b\x6e\x5b\xd1\xe7\x0b\xa3\xf2\x8d\x15\xb7\x87\xb4\x6c\xf2\xca\x0d\x8f\xb9\xdb\xd8\xb9\x96\x59\x26\xca\x99\x67\xf5\x46\x78\xf3\x69\xc5\xed\x1a\xb2\x99\xf7\x0b\x0d\x28\xbc\x63\x2c\x09\x18\x4b\xe0\x1d\x8b\x68\x33\x88\xc3\x80\xc5\x21\xbc\x0b\x13\x1a\xa0\x71\x6e\x40\xe1\x4f\xdc\x10\x14\x6e\xa9\x60\xe1\x88\x44\x01\xa3\x63\x42\xe1\x8e\xb1\x88\x8c\x82\xf1\x98\x0c\x81\xb1\x31\xa1\xc1\x68\x4c\x06\xed\xe1\x1d\x0b\x43\x1c\x87\x88\x08\x29\x49\x82\xe1\x08\x11\xa7\xe1\x1d\xa2\xc3\x60\x18\x12\x0a\x2c\x8c\x48\x1c\x0c\x07\x24\x6a\x0f\xef\x58\x38\x24\x51\x30\xa2\x64\x0c\x2c\x4c\x48\x12\x8c\x86\x0e\x71\x1c\xba\x55\xc6\xc1\x78\x88\xaa\x23\x4a\x06\x01\xa3\x0c\xd1\x51\x4c\xe2\x80\xd1\x88\x84\x1e\x60\x90\x67\x5e\xba\xd1\x5a\x94\xf6\x0e\xc3\x7c\x8c\xbf\xd5\xbc\x34\x4b\xa5\x8b\x9e\xd2\xd2\x1d\x71\x16\xd1\x6a\x07\x8c\x0e\xaa\xdd\xed\x31\x23\x54\x6a\x55\x8f\xeb\xe2\x5a\x54\x58\x42\x5c\x30\xeb\xa8\xc4\x64\xec\x26\x0c\x18\x1b\x91\x61\xc0\xd8\x80\x24\x2e\x2e\x23\x47\x8f\x31\xf8\x11\x32\x28\x73\x31\x88\x06\x68\xff\x98\x84\xc0\xa2\x31\x0e\x47\x24\x06\x16\x87\x24\xc4\xa1\x43\x60\xa4\x47\x23\x17\xa5\x21\x06\x2f\x76\x08\xa4\x26\x23\xb7\x6a\x3c\x22\x49\x90\x44\x48\x4e\x62\x42\x83\x84\xa1\xba\x64\x4c\x86\x38\x44\xc4\x80\x92\x28\x88\xc7\x88\x18\x44\x24\x0c\xe2\x08\x03\x36\x64\x24\x0e\x62\x4a\x18\xdc\xb5\xc6\x6c\x38\x20\x2c\x88\x43\xb4\x7b\x38\xc2\x55\x06\x24\x84\x3b\x36\x8a\x08\xc3\x15\x07\xc0\x46\x43\x12\x06\x03\x46\x46\xc0\xc6\x94\x8c\x83\x01\x3a\x76\xc7\xc6\x31\x49\x82\x01\xe6\x07\x1b\x0f\xc9\x30\x18\x46\x24\x84\x90\x52\xc2\x82\x21\xee\xd0\x5d\xe8\xb2\x66\x44\x91\xcc\x06\xb8\xb5\x31\x19\xb7\x87\x77\x21\x0b\xc9\x30\x18\x47\x84\x41\x48\x5d\x68\x06\x84\x42\x48\x13\x12\xe3\x10\x75\xd0\x84\xb0\x80\xd1\x90\xc4\x10\xd2\x08\x83\x4f\x87\xce\x12\x97\x9e\x0c\xed\xbe\x63\x23\x86\x1b\x11\x8e\x30\x17\x06\x8e\x11\x3a\x87\x92\xa1\xdb\x94\xd8\xf9\x9c\x0c\xdd\x6e\x0d\x10\x94\x0c\x90\x11\xba\x54\x4b\x42\x37\x46\x83\xde\xb1\x98\xe1\x12\xd1\xc0\xa9\x8d\xdc\x3e\x46\x43\x4c\xea\x98\x61\xba\xc5\x2e\xdd\x62\x86\x74\xfc\x0b\x7f\x5e\x4f\xb8\x76\x26\xe1\x4d\x78\x4a\xa5\xbe\xd9\xae\xe6\xd3\x3e\x9f\xd7\x75\x77\x4e\xce\xee\x9f\xc9\x1a\xef\x79\x20\x87\x14\x7c\xe2\xa5\x2c\xb8\xbb\x19\x90\x94\x72\xdb\x7b\xe0\x5b\x01\xc9\x80\x16\x06\x04\x37\xa2\x27\xcb\x9e\xda\xd8\xfd\x37\xf7\xe2\x71\xa9\x79\x21\x0c\xb4\x91\x4f\xf4\x6d\x80\xc5\xe7\xe9\x98\xfb\x13\xad\x2c\xb7\xc2\xa7\xdd\x7d\x48\xdf\x06\x83\x6b\xbc\x5e\x98\x64\x62\xd5\xdd\xc7\xf4\x6d\x30\xba\x06\x60\xd4\xf1\xf7\xdf\x14\x22\x93\x1c\xfc\x82\xef\x7a\x75\x55\x4b\x28\xad\x76\xdd\xa7\x57\xbb\x55\xaa\x52\xec\xcf\xd1\x5f\xe2\xfe\xfe\x58\x81\xce\x4a\x4e\x53\xe7\x9a\x76\xc6\xb1\x6a\x92\xe3\x56\xeb\x47\x23\x53\xe3\x81\x2a\x5d\xb9\xc1\x6e\x49\x55\x7e\xd7\x9b\xff\xf6\xfb\xaf\xff\x98\xf6\x6b\xe8\x75\xd9\xe5\xf2\x21\x6b\x09\xe2\x14\x05\x7f\xf8\xe1\x5f\xdf\x9d\x0b\x36\xa5\xae\x1e\x7f\xb6\x95\xac\xf1\x4b\x61\xd3\xb5\xdf\xe1\x95\xec\xcb\x72\xa9\x3a\x5d\x62\xd7\xa2\xf4\xb5\x30\x95\x2a\x8d\x80\xd9\x1c\x0e\x63\xf2\xd1\xa8\xd2\xef\x36\x08\xd7\x00\xcd\xe6\x90\xa9\x74\x53\x88\xd2\x12\xd7\x05\xc3\x0c\x90\x41\x32\xa9\x45\x6a\x95\x7e\xec\x1e\xdd\xb9\xa9\xbb\x87\xd2\x58\x50\x8b\x8f\x22\xb5\x06\x66\xf0\xde\x5b\xe4\x6a\xe1\x05\xe0\x59\x2d\x04\x7e\xa7\xaa\x28\xa4\xf5\x3e\xdc\xb6\xf0\x5a\x2c\x6b\x30\x56\x7b\x04\x69\x51\x28\xeb\xe0\x96\xaf\x10\x7b\x53\x37\x0a\xee\x3c\xc0\x0c\x7c\x74\xb9\x8b\xe6\x3d\xb5\x1a\x17\x54\x55\xf0\xaa\x92\xe5\x0a\x66\x50\x8a\x07\xf8\x85\x57\xfe\xfb\x23\x02\x3f\xef\x3b\x68\x50\x27\x80\xce\x22\xdf\x88\xce\x87\xe0\x82\x8b\x66\x22\x77\xa5\x85\x28\x9f\xb3\x6b\xeb\x11\xa0\x45\xf6\x9c\x8d\xf6\x37\xd2\x8f\x57\x74\xf3\xd5\xcb\xcc\xda\xe5\x97\xf9\x3f\x7d\xff\x7f\xdf\xd5\x66\xf3\xf4\xbe\xf3\xe1\xc8\xfd\xd0\xbd\x6d\x21\x4f\x7d\xa9\xb0\x1b\x5d\x1e\xc2\x41\x56\xc2\x36\x31\xfb\xfb\x6f\xe8\x54\xb2\xbc\xef\xb4\x3b\x38\xab\xde\x61\x8f\x82\x91\xdd\xb9\xb0\x36\x3b\x48\x64\x99\xe6\x9b\x4c\x18\x7f\x47\x6a\xf1\xff\x85\x1d\x91\x19\x31\x9b\x85\xb1\xda\xa7\x01\x8c\xba\x30\x71\xb4\xda\x0c\xf7\x67\xcb\xb5\x6b\xb3\x4c\xb3\x0d\x5b\x69\xc8\x77\xdc\xf2\xdf\x84\xf5\xdf\x1f\x0c\x46\x90\xc8\x56\x2f\x83\xda\x09\x55\xe1\xa9\x45\xe4\xd3\x65\xdb\xeb\xe1\x7d\xe4\x05\xcf\x7a\xe4\x4b\x3a\xdf\x58\xf5\x4f\x51\xb7\xb0\xd8\xe0\x9c\x38\xcd\xb9\x9d\xb4\x74\xe3\x47\x94\x7c\x91\x8b\xec\x12\x0d\xae\xbb\xd6\xa5\x30\x3f\x6d\xec\xa5\x0c\x7e\x56\x9a\x6f\xa5\x75\xd7\x0c\xcf\xef\xd0\x7c\x5e\xda\x09\xf4\x18\xa5\x94\x06\xcf\xe0\xa9\x28\xad\xe6\xf9\x8f\x4e\xea\x71\x02\x57\x20\x19\x2f\x2a\xf7\x26\x60\xcf\x79\x7c\xab\x64\xf6\xeb\x56\xe8\x9c\x57\x57\x01\xa6\xd2\xb2\x5c\xbd\x13\xe5\xca\xbd\xa8\x92\x0b\xfd\xfb\xf3\x69\xc1\x77\x7f\x88\x5c\xa5\xb5\x29\x24\xb9\xe0\xca\xb2\xc5\x3d\xe7\x59\x59\x08\x63\x05\x1a\x71\x73\x45\xb9\xdb\xe9\xcb\x70\x99\x42\x29\xb4\xea\x79\x10\x8f\xc1\x5f\xf2\xdc\x88\xe7\x5e\x61\x32\x4e\xa0\x83\xbd\xbb\x2c\x37\x6a\x63\x3a\x9f\xf3\xaa\x79\xd3\x78\x6f\xa8\xfb\x78\xe7\xdc\x26\x91\x9e\x79\xcb\xb5\x56\x0f\xcf\x6c\x76\xab\xab\x6b\x54\xf8\x7c\xd2\x1c\x9d\x4e\x79\x2e\x7e\xe0\x78\x7b\xba\x45\x9f\x81\xf6\x37\xd7\x67\x2d\xa7\xdc\xe1\xba\xb4\x01\xdf\x68\xd7\xec\x3a\x78\xef\x9e\x74\xde\x4b\xca\xeb\xeb\xe0\xec\xd4\x61\x74\xb9\xc4\x12\x3a\x3b\x95\x81\x95\xb0\xdf\xe7\x02\x87\xdf\x3e\xfe\x9c\xf9\x9d\xe3\x33\xac\xd3\x6d\x89\xd6\xd5\xe3\x65\x29\xe4\x77\xba\xed\x1a\x70\x78\xb0\x9f\x2e\x83\xff\xaf\x29\xfe\xd1\x8c\x00\x9e\x6a\xcf\x83\xe6\xe2\xd8\x07\x87\x9b\xa1\x51\x75\xf8\xd1\x42\x95\x7e\xc7\x95\xd2\x4e\x00\x7e\xc5\x35\x2f\xcc\x45\xb5\x90\xcb\x03\x83\x38\x95\xef\xe9\x87\xee\x79\xe8\xdc\x3b\x71\x56\x2f\xe8\xee\xcf\x4b\xf8\xed\x19\x1c\x15\x3e\xbb\x35\x11\x5b\x5f\x9c\xdd\x2b\x1b\x53\xd7\xe6\xbf\xb0\x36\x37\x92\xfd\xff\x79\x3a\x8a\xec\x0f\x13\x99\xed\xff\xfa\x5c\xd9\xc6\xc2\x7f\x2c\xdb\xcd\x6b\xd6\x55\x6e\x2c\xd4\xb2\x2c\x85\xfe\x5d\xec\x2c\xcc\x0e\x2f\xdd\x0b\xc3\xf7\x20\x72\x23\x9c\xfd\x58\x87\xbf\xc0\x78\x14\x3b\xb3\xdc\xfc\xf7\x4d\x3f\x2e\x0e\xb3\xd9\x0c\x3c\xac\x96\xde\x6b\xcc\x46\xe0\x7f\xd4\xc4\xd3\x09\xbb\x2c\xce\xcd\xef\x1d\x87\x4a\x97\xc9\xe5\x52\x68\x51\xa6\x98\x75\xfe\x52\x6a\x63\x03\xe0\xa5\xb2\x6b\xcc\xfc\x54\x15\x15\xd7\x75\xcf\xe3\x78\x64\x29\x73\x2b\xb4\xef\x9a\xb4\xaf\x1a\x1c\x31\xaa\x10\xfe\x02\x49\x8d\x80\xcf\x03\x58\x74\xbb\x87\x45\x96\x9b\x32\xc5\x03\x03\xb9\xe2\x99\xdf\x0e\x50\xab\x51\x5c\x69\x5e\xad\x5f\xdf\x29\xe2\xe4\xfc\x70\x1d\x8e\x8f\x21\xd8\xd5\x6c\x85\x7f\xf2\xcd\x3f\x9d\xa7\x6e\x00\x28\x4a\x9a\x23\x5d\x5b\x8a\x8a\x38\x91\x99\xdb\xc6\x05\x91\x59\xf7\x22\xa0\xb5\x3c\xcf\xb2\xb6\xd2\xb6\x9e\xb3\x05\x5e\x52\x4a\x0a\x5e\xf9\x3b\xa4\xfb\x4f\x20\xb3\xba\x83\x09\xc0\xfd\x52\x33\x01\xbb\x96\x86\x34\x3d\x91\xbf\xeb\x06\xe0\x7a\xdf\x03\xa8\xb9\x4f\x1b\x90\x6b\x49\x0f\xed\x51\xd0\x14\xa6\x7a\x7a\x26\x07\xfb\xd3\x2e\x1c\x3e\xee\x16\xbb\x12\xa3\x9a\xde\x8e\x91\xa3\x9c\xbb\xb3\xd4\xaa\x68\x1c\x72\xc3\xaf\xbf\x06\x4e\xac\x6a\x48\x56\x5d\x06\xae\x56\x7a\x2d\x70\x8d\xf2\xb3\x55\xbf\x74\xa5\x7d\xf7\xec\xa7\xc1\x63\xbe\xd5\x4f\xa1\x56\x8e\x1c\xae\xea\xa6\xfb\x22\x08\xf8\x4d\x16\x9b\xdc\x75\x4e\xfe\x85\x9a\xe5\x43\x86\xa7\xe2\xe2\x12\x7f\x9d\x8e\xeb\x48\xbe\x90\xb9\xfc\x24\xfc\x84\xd2\xcf\xe3\xb4\x7d\xd1\xac\xfa\x10\xd5\x24\x23\xec\xcf\xa5\x15\x7a\xcb\x73\x1f\xe9\x01\x44\xf4\xa8\xfa\xf4\x93\xfc\xb4\x5f\xff\x94\x39\xed\xbb\xff\x73\xf8\x77\x00\x00\x00\xff\xff\x9d\x92\x85\xdd\x8a\x18\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 6282, mode: os.FileMode(420), modTime: time.Unix(1581589703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
