// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x8f\xa3\x36\x10\x7f\xcf\xa7\x98\xe3\xd4\x0b\x48\x1c\xb0\xaa\x56\xaa\xb2\x21\xad\x7a\xfd\x77\xd2\xb5\x95\x5a\xa9\x2f\xab\x7d\x30\x78\x12\xbc\x6b\x6c\x64\x4f\xd8\xe4\xf6\xf2\xdd\x2b\x63\x48\x08\xc9\xf6\xe1\xea\x17\xe0\x37\xff\x7e\x33\xe3\x31\x5e\xbe\xe1\xba\xa4\x7d\x83\x50\x51\x2d\x57\xb3\xe5\xf0\x40\xc6\x57\x33\x80\x25\x09\x92\xb8\xda\x08\x6a\xc5\xe7\x65\xea\xbf\x1c\x6e\x4b\x23\x1a\x02\x67\x9a\x07\x84\x3b\x4a\x1f\x59\xcb\x3c\x1a\x80\x35\x65\x1e\x54\x44\x8d\x5d\xa4\xe9\x56\x35\x4f\x9b\xa4\xd4\x75\xda\x0a\xfb\x5e\x21\x3d\x6b\xf3\xf4\x83\x64\x84\x96\x52\x2e\x2c\x8d\xf1\xa4\x16\x2a\x79\xb4\xc1\x6a\x99\x7a\x67\x5d\x34\x29\xd4\x13\x54\x06\xd7\xff\xc7\x6b\x69\x6d\x00\x06\x65\x1e\x58\xda\x4b\xb4\x15\x22\x05\xe3\x0c\x3a\x85\xd4\xa7\xe7\x34\xa6\x32\x27\x81\xae\x50\x71\xa1\xf9\x1e\x5e\xba\xef\x0e\x43\xb1\xa9\x68\x01\x37\x59\xf6\xcd\xdd\x11\x7d\x16\x9c\xaa\x31\x78\x98\x75\x8f\xb7\xf5\xbe\xe7\xf5\x35\x2e\x00\x96\x69\x47\x6f\x35\x5b\xa6\xbe\x4f\x4b\x47\xc7\xb3\x5b\x72\xd1\x82\xe0\x79\x70\x8c\xe1\x4a\xc9\x45\xbb\x9a\xcd\xfe\xbb\x69\xde\x7e\xbd\x55\x25\x09\xad\x80\xf4\x07\x2d\xb5\x09\x9d\x72\x34\xe2\x59\x6a\x65\x09\x6a\xd6\x34\x42\x6d\x20\x07\x85\xcf\xf0\x3b\x6b\xc2\xfb\xa3\x86\x5b\xf7\xf3\x42\xea\x62\x1e\xc3\xbc\x90\x5b\x9c\x3f\xc4\x13\x29\x19\x44\x27\xdd\x18\x44\x75\x29\x2e\x75\x5d\x0b\x72\x0a\x06\xf9\xa5\xb8\x30\x4c\x95\x55\x6f\xbf\x9f\x3f\x1c\xc5\x0f\xd1\xdd\x48\xf5\xf8\x6a\x90\xb6\x46\x0d\xa4\x93\x0d\x52\x9f\xd6\x97\x2f\x30\x6f\x84\x7a\x9a\x8f\xdb\x33\x2a\xc1\x27\x56\xa0\x0c\x77\x97\xf9\xeb\xe2\x11\x4b\xb2\x90\xc3\x7d\xe0\x32\x0d\x62\x08\x5c\x4e\xee\xe9\xc9\x07\x0f\x77\xd3\xf8\xbd\x51\x22\x54\x29\xb7\x1c\x6d\xb8\x4b\x3c\x8d\xef\x61\x97\x08\x9e\xd8\x6d\x61\xc9\x84\x59\x0c\xdf\x45\xb0\xe8\xb0\x53\xd3\xfb\x74\x5a\x66\x40\x69\x8e\xb6\x2f\x7d\x2b\x6c\xf2\x13\x23\xf6\x37\x52\x78\x3f\xa4\xef\x94\x90\x6f\x5e\x57\x9a\x8d\x32\x69\x5c\xae\x4e\xf3\x65\xba\xeb\x02\xb7\xed\x82\xf8\x62\x8b\x4e\x71\xb6\x25\xfd\x17\x5a\xf1\x19\x17\x40\x66\x8b\x27\x49\x53\xed\xad\x28\xed\x62\xe4\xdb\x2d\x54\xac\x90\xc8\x17\xe7\xca\x6e\x05\x05\x33\x0a\xed\x6f\x5b\x0a\xa6\x46\x9d\x78\x63\x58\x2b\x88\x39\xca\x4c\x7e\x70\x09\x30\xe5\x54\xdf\xdf\x64\x59\x96\xc5\x97\x06\x25\x2a\x32\x4c\xfe\xda\xd9\xed\x83\x05\x5c\x53\xe2\xac\x76\x1b\x23\x58\xc0\xcd\x15\x29\x6b\xb5\xe0\x7f\xb6\x68\x24\x6b\x5e\x51\xb1\x8d\x11\x6a\xf3\x09\xd5\x86\x2a\xa7\x72\x3b\x89\x72\x98\x64\x59\xb3\xdd\x3f\x28\x75\xd9\x53\x4a\x6e\xa7\x72\xa1\xc6\xf2\x89\x94\x44\x8d\x96\xb0\x23\x33\xbb\x12\xa2\x6b\xfd\xb4\x7c\xb6\xd6\xda\x35\x75\xcd\xa4\x9d\x14\xbd\x74\x83\xbe\x80\xe0\x6d\xd6\xad\xe0\x5c\xda\x6f\x86\x0b\x92\xcc\x18\xfd\x7c\x11\xc6\x2d\xd2\xd7\x50\x18\x35\x1e\x2e\x3b\x7f\xe4\x59\x32\x89\xbf\xb0\x92\x1c\xa5\x2c\xb9\xbd\x50\x3a\xcc\xae\x7f\x8d\x0a\xd0\x0d\xc8\x94\xc3\x5a\x2b\xba\xc6\x6b\xc8\xfe\xb9\x12\x84\xc1\x6b\xce\xfd\x1c\x9e\x4d\x4e\xa9\x15\x31\xa1\xd0\x40\x0e\x5c\x97\xdb\x1a\x15\xb9\xb3\xe5\x67\x89\xee\xf5\xc7\xfd\x47\x1e\xce\x8f\xc7\xf0\x3c\x1a\x99\x0e\xc7\xff\x69\x3c\xff\xf0\x48\x78\x74\x1a\xc3\x8b\xcf\x23\xee\x47\xf9\x10\x0f\xb3\x3a\x0c\x30\x17\xeb\x35\x1a\x54\x25\x42\x0e\xe1\x5a\x18\x4b\x31\x30\xa5\xa9\x72\xe6\xa5\xae\x1b\x66\x30\x82\x7c\x05\x9d\x2c\x59\x0b\x49\x68\x42\xe6\x90\x37\xbd\x5e\x62\x75\x8d\x61\xe1\xa0\xde\x20\x64\x31\x14\x51\x34\x04\x39\x9e\x86\x52\x33\x1e\x8e\x4f\xc2\x35\x52\x59\x85\xf3\xb4\xbd\x49\x37\x86\x35\x55\x3a\x8f\x12\xaa\x50\x85\x06\x6d\xa3\x95\x45\xe7\x74\x78\x4f\x1e\xad\x56\x61\xd4\x6b\xb8\x0f\x27\x3d\xef\x46\x97\x6e\x62\xb0\xd6\x2d\x86\xa7\xe4\x42\x8f\xbb\x53\x3b\x8a\xc1\x99\x26\x7d\x61\x3c\x55\xe7\x88\x25\x82\x43\x9e\xe7\x50\x24\x82\x47\x67\x7f\x81\xc1\x2f\xe3\x7c\xec\x74\xec\xe7\x2c\xc0\x6b\x4e\x93\x9a\x35\xe1\xce\xe1\xe1\x0b\x08\xee\xcf\xe7\x18\xa4\xfb\x45\x2c\x80\x2a\x61\x93\xd3\x0f\x23\x1e\xb6\x55\x8f\xfb\x7f\x69\x7f\xde\xc7\xd0\xdd\xa3\xbc\x07\x38\x9c\x6a\x7d\x1c\x13\xd7\xf0\x2b\x85\xf0\xf8\xb8\x10\x1d\x72\xce\x79\x6d\x74\xdd\xb3\xee\x5e\xdf\xbd\x03\x96\x90\xee\x21\xd2\xd3\xea\x78\xa7\xd7\xaa\xd3\x3b\x3f\x8b\xfa\xb5\x91\x0e\xd1\xd9\x15\xc8\x6f\x26\x0f\x59\xa4\x8f\x8a\xd0\xb4\x4c\x86\x0e\x8f\xe1\xdb\x2c\xcb\xa2\xbb\xd9\xe9\x0a\xb8\x4c\xfd\x0d\x67\x99\x76\xf7\xd3\x7f\x03\x00\x00\xff\xff\x98\xe4\xcc\xe1\xb6\x0a\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 2742, mode: os.FileMode(420), modTime: time.Unix(1568321541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
