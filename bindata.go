// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6f\x6f\xdb\x36\x13\x7f\x9f\x4f\xc1\xaa\xcf\x53\xc9\x80\x22\xa9\x7d\x10\xa0\x70\xec\x3c\xc3\xda\x75\x2b\xd0\xad\xc3\x5a\x6c\x2f\x82\x00\xa5\xc4\x93\xcd\x44\x22\x05\xf2\xfc\x2f\xa9\xbf\xfb\x70\xa4\x64\xcb\xb2\x13\x04\x9b\x5e\xd8\xe2\xef\xee\x7e\xbc\x3b\x1e\x8f\xd4\xe4\x85\xd0\x05\x6e\x1a\x60\x73\xac\xab\xab\xb3\x49\xf7\x07\x5c\x5c\x9d\x31\x36\x41\x89\x15\x5c\xcd\x24\x2e\xe5\xfd\x24\xf5\x23\xc2\x6d\x61\x64\x83\x8c\x4c\xa7\x01\xc2\x1a\xd3\x5b\xbe\xe4\x1e\x0d\x98\x35\xc5\x34\x98\x23\x36\x76\x9c\xa6\x0b\xd5\xdc\xcd\x92\x42\xd7\xe9\x52\xda\x73\x05\xb8\xd2\xe6\xee\x87\x8a\x23\x58\x4c\x85\xb4\xd8\xc7\x93\x5a\xaa\xe4\xd6\x06\x57\x93\xd4\x93\xb9\xd9\x2a\xa9\xee\xd8\xdc\x40\xf9\x6f\x58\x0b\x6b\x03\x66\xa0\x9a\x06\x16\x37\x15\xd8\x39\x00\x06\xfd\x08\x9c\x42\xea\xc3\x23\x8d\xa1\x8c\x24\xcc\x25\x2a\xce\xb5\xd8\xb0\x07\x37\x76\x18\xc8\xd9\x1c\xc7\xec\x75\x96\xfd\xf7\x72\x87\xae\xa4\xc0\xf9\x10\xac\xb9\x99\x49\x35\x66\x99\x87\xb6\x67\xee\xef\x65\xbd\x69\x5d\x7d\x2e\xeb\xdb\x0e\xeb\x18\x04\x47\xde\x33\x6e\xb4\x95\x28\xb5\x1a\xb3\x52\xae\x41\xec\xed\x8d\x27\xcd\xf6\x08\xea\xe6\x60\x3c\x70\xd1\xb1\x71\x21\xa4\x9a\x8d\x59\x96\x5c\x40\xbd\xc7\x73\xbd\x3e\xb7\xf2\xde\x89\x72\x6d\x04\x98\xf3\x5c\xaf\x2f\x9f\x17\xc2\x9b\x3e\x96\xf3\xe2\x6e\x66\xf4\x42\x89\xf3\x42\x57\xda\x8c\xd9\xcc\xc0\x66\x2f\xd7\x4b\x30\x65\xa5\x57\x63\x66\x0b\xa3\xab\x6a\x2f\x69\xd5\x57\x73\x89\x70\x98\x92\x7c\x81\xa8\x95\x7d\x4e\x56\x2a\x28\x71\xcc\xde\xf4\x63\x73\x69\xd9\x21\x5b\x2a\x8b\xd4\xd5\xc5\xd5\xd9\x24\xf5\x1b\x64\x42\x75\xe0\xcb\x62\x22\xe4\x92\x49\x31\x0d\x76\x2b\x49\x35\x2c\xe4\xb2\x15\x37\x06\x9c\x98\x96\x89\x24\x8d\x81\x81\x61\xeb\x6d\x5b\x66\x4e\xe4\x21\x27\x6d\xe6\x1b\x2b\x0b\x1b\x30\xad\x8a\x4a\x16\x77\x54\xc5\xba\x89\x46\xc1\xd5\x97\xaf\x9f\x7f\x9f\xa4\x5e\xf5\xb4\x6d\x59\xae\x44\xcf\x90\x86\x64\xf8\xe1\xc3\x5f\xef\x0f\x0d\x5b\x87\xfd\xfb\x93\x5b\xdc\xeb\x17\x5a\x59\x64\x3a\xbf\x85\x02\x2d\x9b\xb2\xeb\x20\xaf\x74\x1e\xc4\x2c\x40\x03\x40\xff\x85\xae\x6b\x89\xc1\xcd\xa5\x27\x45\xfd\x8e\x56\x8b\x4d\x59\x44\xbc\x23\x36\xbd\xea\xad\x8e\xa7\xab\x79\xd3\x48\x35\x63\x53\xa6\x60\xc5\x7e\xe5\x4d\x74\xbd\xd3\xa0\xe7\x3a\xa4\x49\xc2\x98\x85\x79\xb5\x80\xf0\x26\x1e\x48\x69\x6a\x92\xce\x0c\x80\x3a\x16\x7b\x8f\x48\xc1\x80\x38\x16\xe7\x86\xab\x62\xde\xda\x6f\xc2\x9b\x9d\xf8\x66\x74\xd9\x53\xdd\x6f\x27\xc0\x85\x51\x9d\xd3\xc9\x0c\xb0\x8d\xec\xfb\x77\x16\x36\x52\xdd\x85\xfd\x92\x44\xfd\x89\xe7\x50\x51\xfc\x6b\x17\x7c\x9b\xbb\x44\xaa\xa2\x5a\x08\xb0\xd1\x3a\xf1\xe6\xff\x67\xeb\x44\x8a\xc4\x2e\x72\x8b\x26\xca\x62\xf6\x76\xc4\xc6\x0e\xf3\x6e\xb8\x9f\x25\x37\x4c\x69\x01\xb6\x4d\xd6\x52\xda\xe4\x3d\x47\xfe\x05\x30\xba\xee\x1c\x26\x25\x10\xb3\xc7\x95\xfa\x4b\xd9\xd0\xee\x20\xcd\x87\xe1\x6e\x0d\x68\x0f\x07\xf1\xd1\xd6\x1e\xe2\x7c\x81\xfa\x0f\xb0\xf2\x1e\xc6\x0c\xcd\x02\xf6\x92\xb6\x84\xc7\x3d\x6e\x7a\x40\xf1\xbc\x02\x31\xd4\x66\xae\x29\x18\x05\xf6\x97\x05\x0e\x6d\xe8\x99\x19\xbe\x94\xc8\xc9\x61\x5e\xbd\x23\xf7\xb9\xc2\x31\x3b\x7f\x9d\x65\x59\x16\x1f\xa9\x17\xa0\xd0\xf0\xea\x67\x67\xb5\x19\xb3\x13\x2a\x82\xd7\x8d\x6b\x65\xaf\x8f\x65\x7c\xa9\xa5\xf8\xbc\x04\x53\xf1\xe6\xa4\x82\x6d\x8c\x54\xb3\x4f\xa0\x66\xae\xe9\x5f\x0c\xf8\xb7\x87\xc3\x9a\xaf\xff\x84\x4a\x17\xde\x95\xe4\x62\x20\x95\xaa\x27\x3d\x94\xa1\xac\xc1\x22\x90\x13\x67\x27\xc8\xdd\x4a\x0f\xd3\x65\x6b\xad\xc9\xab\xe3\x24\xee\x92\x5f\xf2\xca\xc2\x71\x54\x54\x8c\x63\x16\x16\x5a\xa1\x54\x0b\xbd\xb0\xe1\x53\x51\xb5\xad\x38\x78\x99\xb9\x27\x38\x94\xb6\x85\x74\x14\x2d\x37\x46\xaf\x8e\x7c\x76\xb3\xeb\x53\x28\x7b\xba\x68\x76\x41\x17\xbc\x82\x0f\xbc\x40\x72\x29\x4b\x2e\x8e\x94\xb6\x67\xa7\x47\xbd\xa0\xdc\xe6\x1a\xfa\x50\x6a\x75\xb2\x20\xbb\xe8\xdd\x49\x14\x3c\x46\xee\xdb\xc1\xc1\xae\xa3\xec\x72\xa9\x80\xfa\xa2\xd0\xc5\xa2\x06\x85\xd4\x49\x7e\xaa\x80\x5e\x7f\xdc\x7c\x14\x51\xb8\x3b\x57\xc2\x51\xcf\xd4\x9d\xfa\x4f\x58\x91\x3c\x6c\x1b\x81\xb7\xe8\xee\x19\xfb\x66\xf0\x9b\x47\xa2\x9d\x1b\x31\x7b\xf0\x91\xc7\x6d\xe3\xd8\xc6\x5d\x67\x68\xa9\xba\x7b\x95\x56\x51\xe8\x4e\x95\x30\x66\x51\xc3\x0d\xaf\xed\xa0\xa7\xcb\xb2\x13\x24\x8e\xf2\x3a\xbb\x19\x1d\xa6\x8e\x60\xf2\x86\xa4\xae\x7f\x0e\xd5\x2f\x0f\xd4\x89\xf0\xa8\x6b\x92\xae\x6f\x9c\xa3\x13\x0b\x53\x02\x16\xf3\xe8\x5b\xca\x1b\x99\xb6\xa6\xe9\x7f\x1e\x76\x36\xdb\x6e\x20\xc5\xf6\xdb\x28\xc1\x39\xa8\xc8\x80\x6d\xb4\xb2\x40\xc1\x74\xef\x09\x1d\x82\xd1\xa8\xd5\xa0\x6c\x81\x42\x52\xa0\x24\x27\x52\x29\x30\x5f\x61\x8d\x6c\xca\x5a\xd9\xc0\xf3\x5e\x11\x0c\xcf\x8f\xf6\x8e\xd1\x35\x63\x21\xcb\x12\x0c\xa8\x82\x12\x13\x95\xd2\x58\x8c\x19\x57\x1a\xe7\xb4\x38\x85\xae\x1b\x6e\xfc\xe1\xe9\x64\x49\x29\x2b\x04\x13\x71\x42\x5e\xb4\x7a\x89\xd5\x35\x44\x39\x41\xad\x41\xc4\x63\x96\x8f\x46\xdd\x24\xe5\x42\x15\xb4\xa6\xac\xd2\x5c\x44\xfd\xbc\xf9\x7c\x85\x2e\x5f\x33\xc3\x9b\x79\xf8\x54\x56\x6e\xad\x56\xbb\xac\xd0\xe0\xb0\x00\x76\xdb\x28\x31\x50\xeb\x25\x44\xfb\xe0\xa2\xfd\x9a\x8f\x62\x46\xa6\x49\x5b\x76\xde\x55\x22\xe2\x89\x14\x6c\x3a\x9d\xb2\x3c\x91\x62\x34\xc8\xa8\xb7\xe7\x42\xf4\x49\xfb\x3c\x07\x13\x3c\x46\x9a\xd4\xbc\x89\xd6\x84\x47\x0f\x4c\x0a\x7f\xca\xc6\xac\xa2\x93\x7a\xcc\x70\x2e\x6d\xd2\x9e\xdb\xd1\x7a\x14\x77\xdb\xbc\xc5\xdd\x7d\xa6\x3b\xb5\xe3\xb6\x5f\xfa\x61\xcc\xdc\xf7\x92\xe7\x63\xdb\x7d\xe6\xbb\xc7\x6d\xae\x13\x69\xf1\x78\x3f\x2d\x0e\x39\x8c\xa0\x34\xba\x6e\x63\x70\xaf\xaf\x5e\x31\x9e\xa0\x6e\x21\xd4\xc3\x5c\x79\xd2\x53\xb9\x6a\xc9\x0f\x66\xfd\xa7\x33\x6d\x47\x07\x57\xf0\x5d\x8d\xf9\xcb\x6a\xaf\x2c\xba\x0e\xd2\x5e\x0a\x12\x52\xf8\x22\xeb\x45\xe5\x0e\xf4\x68\x40\x53\xae\x04\xed\x84\x41\x6f\x79\x1e\xc7\x69\x4d\x9e\xcb\x4a\xde\x43\x74\x91\x65\x4f\xeb\x19\x7c\xd4\x2d\xbf\x71\x3c\x64\x01\x3f\x2a\x04\xb3\xe4\x55\x44\x78\xcc\xfe\x97\xed\xa8\xf7\x1f\xb3\x93\xd4\x7f\x32\x4c\x52\xf7\xa5\xfd\x77\x00\x00\x00\xff\xff\x20\xf3\x00\x0a\x80\x0f\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 3968, mode: os.FileMode(420), modTime: time.Unix(1568633715, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
