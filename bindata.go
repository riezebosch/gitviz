// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1568978470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\xc1\xaa\xff\x7f\x25\x01\x8a\xe4\xb4\x08\x36\x38\xb6\xf7\xd0\x87\xb5\x40\xb7\x0e\x6b\xb1\xbd\x08\x02\x94\x12\x4f\x32\x13\x89\x14\x48\xfa\xa9\xa9\xbf\xfb\x70\xa4\x24\xcb\xb2\x13\x04\x1d\x36\xbd\x88\xad\xbb\xdf\x1d\x7f\x77\x3c\xde\xd1\x99\x3e\x61\x32\x33\xdb\x1a\xc8\xc2\x54\xe5\x7c\x34\x6d\x3f\x80\xb2\xf9\x88\x90\xa9\xe1\xa6\x84\x79\xc1\xcd\x8a\x7f\x99\x26\xee\x0d\xe5\x3a\x53\xbc\x36\x04\x4d\x67\x9e\x81\x8d\x49\x6e\xe8\x8a\x3a\xa9\x47\xb4\xca\x66\xde\xc2\x98\x5a\x4f\x92\x64\x29\xea\xdb\x22\xce\x64\x95\xac\xb8\x3e\x13\x60\xd6\x52\xdd\xfe\x58\x52\x03\xda\x24\x8c\x6b\xd3\x97\xc7\x15\x17\xf1\x8d\xf6\xe6\xd3\xc4\x39\xb3\xab\x95\x5c\xdc\x92\x85\x82\xfc\x9f\x78\xcd\xb4\xf6\x88\x82\x72\xe6\x69\xb3\x2d\x41\x2f\x00\x8c\xd7\x8f\xc0\x02\x12\x17\x1e\x22\x86\x3a\xd4\x10\x9b\xa8\x28\x95\x6c\x4b\xee\xec\xbb\x95\x01\x2f\x16\x66\x42\xce\xc7\xe3\xff\x5f\x76\xd2\x35\x67\x66\x31\x14\x56\x54\x15\x5c\x4c\xc8\x78\x2f\xaa\x29\x63\x5c\x14\x9d\x6c\x37\xb2\x1f\x4f\xab\x6d\x43\xff\xb1\x2b\x7d\xd7\xca\x5a\x0f\x8c\x1a\xda\x33\xae\xa5\xe6\x86\x4b\x31\x21\x39\xdf\x00\xdb\xdb\x2b\xe7\xb4\xc7\xc9\xc8\xfa\xe0\xfd\x41\xda\xf1\x05\x54\x7b\x79\x2a\x37\x67\x9a\x7f\xb1\xaa\x54\x2a\x06\xea\x2c\x95\x9b\xcb\xc7\x85\xf0\xa2\x2f\x4b\x69\x76\x5b\x28\xb9\x14\xec\x2c\x93\xa5\x54\x13\x52\x28\xd8\xee\xf5\x72\x05\x2a\x2f\xe5\x7a\x42\x74\xa6\x64\x59\xee\x35\x0d\x7c\xbd\xe0\x06\xf6\xd2\x5c\x0a\x83\xd4\x60\x42\xce\xe3\xe7\x2d\xe7\x36\x59\xe9\xd2\x18\x29\xf4\x63\xf2\x55\x42\x6e\x26\xe4\x79\x3f\x6a\x9b\xb0\x9e\x4f\x42\xa6\x89\xad\xa2\xf9\x68\x9a\xb8\xe3\x34\xc5\xaa\x71\x45\x34\x65\x7c\x45\x38\x9b\x79\xdd\x1e\x63\xc5\x33\xbe\x6a\xd4\xb5\x02\xab\xc6\x0d\x44\x4d\xad\x60\x60\xd8\xb0\x6d\x8a\xd2\xaa\x9c\xc8\x6a\xeb\xc5\x56\xf3\x4c\x7b\x44\x8a\xac\xe4\xd9\x2d\xd6\xbc\xac\x83\xd0\x9b\x7f\xfc\xf4\xe1\xf7\x69\xe2\xa0\xa7\x6d\xf3\x7c\xcd\x7a\x86\xf8\x8a\x86\x6f\xde\xfc\xf5\xea\xd0\xb0\x21\xec\xbe\x3f\xd8\x10\x1c\x3e\x07\x93\x2d\x02\x3f\xa1\x35\x4f\xb8\xc8\xa5\x1f\xc6\x66\x01\x22\x50\xa0\x6b\x29\x34\x90\xd9\x9c\xb4\xdf\xe3\x1b\x2d\x45\x10\x36\x08\x5b\xc7\xb3\x39\x61\x32\x5b\x56\x20\x4c\x6c\x1b\x11\x99\x11\x54\xc4\x8c\x2b\xc8\x8c\x54\xdb\xb0\x8b\x67\xe4\x8a\x40\x68\x43\x64\x7a\x03\x99\xd1\x64\x46\xae\xbc\xb4\x94\xa9\x17\x11\xcf\x28\x00\xfc\xcc\x64\x55\x71\xe3\x5d\x5f\xf6\xf0\x0a\x72\x07\xc6\x4d\x43\x90\x82\x4a\x1a\x0b\x37\xb4\x40\xec\xc8\xed\xf7\x4b\xac\x31\x32\x23\x01\xc6\x1c\x22\xbd\xbb\x5e\xfd\xa1\xab\x8a\xd6\x35\x17\x05\x99\x11\x01\x6b\xf2\x2b\xad\x83\xab\x0e\x81\xcf\x95\x8f\x84\xfc\x88\xf8\x69\xb9\x04\xff\x3a\x1a\x68\x91\x26\x6a\x0b\x05\x20\x8e\xd5\x8e\x3d\x02\x14\xb0\x63\x35\xf2\x6f\xac\xb7\x27\x7c\xd3\xe2\x7e\xa5\x0b\xf9\x7e\xfd\xdb\xd7\x3f\xbd\x72\xb4\x69\x76\xeb\x5f\x77\xda\xeb\xf0\xb2\x87\xdc\xb7\x17\x30\x4b\x25\xda\x74\xc4\x05\x98\x26\x67\x5f\xbf\x12\xbf\xe6\xe2\xd6\xef\x1f\x44\x23\xdf\xd3\x14\x4a\xcc\xec\xc6\xa6\xb5\xd9\xc1\x98\x8b\xac\x5c\x32\xd0\xc1\x26\x76\xe6\x3f\x90\x4d\xcc\x59\xac\x97\xa9\x36\x2a\x18\x47\xe4\xfb\x90\x4c\xac\xcc\xd1\xb0\x7f\x56\x54\x11\x21\x19\xe8\x66\x1b\x56\x5c\xc7\xaf\xa8\xa1\x1f\xc1\x04\x57\x2d\x61\x04\x01\x2b\xee\x07\xf5\x0b\xaa\xc6\x9e\x80\xc8\xbb\x61\xf7\xf2\xb0\xa7\x79\xd1\x51\xab\x1b\xca\xe9\xd2\xc8\x3f\xc0\x75\x22\xa3\x96\xb0\xd7\x34\x07\x77\xd2\xf3\x8d\x0f\x08\x9a\x96\xc0\x86\x68\x62\x9b\xa4\x12\xa0\xdf\x2e\xcd\xd0\x06\x9f\x42\xd1\x15\x37\x14\x09\xd3\xf2\x25\xd2\xa7\xc2\x4c\xc8\xd9\xf9\x78\x3c\x1e\x47\x47\xf0\x0c\x84\x51\xb4\xfc\xc5\x5a\x6d\x27\xe4\x04\x84\xd1\xaa\xb6\xad\xfd\xfc\x58\x47\x57\x92\xb3\x0f\x2b\x50\x25\xad\x4f\x02\x74\xad\xb8\x28\xde\x83\x28\xec\x60\xbc\x18\xf8\xdf\x1d\xbe\x56\x74\xf3\x27\x94\x32\x73\x54\xe2\x8b\x81\x96\x8b\x9e\xf6\x50\x67\x78\x05\xda\x00\x92\x18\x9d\x70\x6e\x77\x7a\x98\x2e\x5d\x49\x89\xac\x8e\x93\xd8\x25\x3f\xa7\xa5\x86\xe3\xa8\xb0\x18\x27\xc4\xcf\xa4\x30\x5c\x2c\xe5\x52\xfb\x0f\x45\xd5\x8c\x26\xef\xe9\xd8\x3e\xde\xa1\xb6\x29\xa4\xa3\x68\xa9\x52\x72\x7d\xc4\xd9\xae\x2e\x4f\x49\xc9\xc3\x45\xd3\x05\x9d\xd1\x12\xde\x50\xec\x9e\x76\xd1\x23\xd0\x6e\x74\xfa\xad\x17\x94\x3d\x5c\x43\x0e\x38\x6a\x4f\xf1\x6a\xa3\xb7\x93\xd9\xbb\xcf\xb9\x6b\x07\x07\xa7\x0e\xb3\x4b\xb9\x00\xec\xb8\xdd\x18\x28\xc0\xbc\x2e\x01\xbf\xfe\xbc\x7d\xc7\x02\xbf\x9b\xa6\x7e\xd8\x33\x75\xd3\xe3\x7e\x2b\xd4\xfb\x61\x7f\x06\xb4\xf7\xae\x7d\x33\xf8\xcd\x49\x82\x8e\x46\x44\xee\x5c\xe4\x51\xd3\x38\x76\x51\xdb\x19\x1a\x57\xed\xdd\x53\x8a\xc0\xb7\xb3\xd4\x8f\x48\x50\x53\x45\x2b\x3d\x98\x16\x3c\x6f\x15\xb1\x75\x79\x35\xbe\x0e\x0f\x53\x87\x62\x64\x83\x5a\xdb\x3f\x87\xf0\xcb\x03\x38\x3a\x3c\xea\x9a\x88\x75\x8d\x33\x3c\xb1\x31\x6e\x38\x7f\xb6\xc3\xb9\x31\x4d\xfe\x77\xd7\xd9\xec\xda\x17\xce\x76\x9f\x1f\x9a\xdb\x38\xfa\xbb\xb9\x8d\xd9\x02\x61\xec\xe8\xc6\x49\xcd\x85\x00\xf5\x09\x36\x86\xcc\x48\xa3\x1b\x30\xdf\x11\x28\x35\xd8\x00\x70\x10\x7f\x0b\x7b\xb4\x3b\xa0\xae\xff\x7b\xee\xdd\xe2\x64\x36\x9b\x11\x0f\xe7\xa5\xf7\x28\xde\x88\xfc\x57\x39\xee\x0f\xd9\x70\x3e\x37\x37\xd7\x76\xd8\x31\x9e\xe7\xa0\x40\x64\x58\x78\x41\xce\x95\x36\x11\xa1\x42\x9a\x05\x16\x7f\x26\xab\x9a\x2a\x77\xed\xb1\xba\x38\xe7\xa5\x01\x15\xd8\x7b\xda\x93\x06\x17\x6b\x59\x41\x90\xa2\xa8\x31\x08\x68\x44\xd2\x30\x6c\x17\xc9\x97\x22\xc3\x33\x43\x4a\x49\x59\xd0\xcf\x50\xff\xb2\x58\x28\x5a\x2f\x1e\x7f\x5b\xc4\x97\xc3\x03\xd6\x1e\x21\x1d\xe3\xcd\x66\x05\xc1\x3e\xb8\x60\x7f\xa6\xc2\x88\xa0\x69\xdc\x1c\x6b\x47\x15\x1d\xd1\x98\x33\xbb\x91\x69\xcc\x59\x38\xc8\xa8\xb3\xa7\x8c\xf5\x9d\xf6\xfd\x1c\x2c\x70\x9f\xd3\xb8\xa2\x75\xb0\x41\x79\x70\x47\x38\x73\xb7\x98\x88\x94\x78\x13\x9a\x10\xb3\xe0\x3a\x6e\xee\x45\xc1\x26\x8c\x88\xbd\xff\xb6\xa0\xa6\xa7\x36\x20\x7b\x2d\x6d\xaf\x48\x51\x33\x9c\xdc\xeb\x81\x1d\xd9\xed\xb7\xa1\x7d\x6c\x27\x3b\x91\x23\x27\xef\xe7\xc8\x4a\x0e\xc3\xc9\x95\xac\x9a\x80\xec\xd7\x67\xcf\x08\x8d\x8d\x6c\x44\x46\x0e\x13\xe7\x9c\x9e\x4a\x5c\xe3\xfc\x60\xd5\x6f\x5d\x69\x17\x1e\xfc\xca\xeb\x0a\xce\xfd\x1e\xea\xd5\x48\xdb\xae\x9b\x1b\x58\x8c\x80\x8f\xbc\x5a\x96\xf6\xf6\x14\x0c\xdc\xe4\x6b\x86\xc7\x62\xd0\xc8\x1f\xe7\xe3\x34\x92\xa6\xbc\xe4\x5f\x20\xb8\x18\x8f\x1f\xc6\x29\x73\x2f\x2d\x77\x8a\x9c\x48\x83\x79\x27\x0c\xa8\x15\x2d\x03\x94\x47\xe4\xc5\xb8\x73\xbd\xff\xef\xca\x34\x71\xbf\x4a\xa7\x89\xfd\xd7\xcf\xdf\x01\x00\x00\xff\xff\xee\xe4\x28\x7c\x11\x12\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4625, mode: os.FileMode(420), modTime: time.Unix(1576502904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
