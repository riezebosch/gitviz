// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1655824593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x7d\x6f\xe3\x36\xd2\xff\x3f\x9f\x62\xaa\x7d\x5a\xcb\x80\x4c\x8b\xb2\xe4\xb7\xd8\x79\x7a\x4d\x5f\x81\xf4\x7a\xb8\x2d\x7a\x40\x17\x0b\x94\x96\x28\x9b\x1b\x89\x14\x28\xda\x71\x36\xcd\x77\x3f\x0c\x25\x3b\x92\xad\x64\xb3\x57\x1c\x4e\xc0\x6e\x28\xce\x6f\x86\xf3\xc6\xe1\x50\x5e\x7c\x91\xa8\xd8\xdc\x17\x1c\x36\x26\xcf\xae\x2e\x16\xd5\x9f\x8b\xc5\x86\xb3\xe4\xea\x02\x00\x60\x61\x84\xc9\xf8\xd5\x5a\x98\x9d\xf8\xb8\x18\x56\x6f\x15\x25\x13\xf2\x16\x34\xcf\x96\x4e\xb9\x51\xda\xc4\x5b\x03\x22\x56\xd2\x01\x94\xb8\x74\x44\xce\xd6\x7c\xb8\x1f\x54\x73\x1b\xcd\xd3\xa5\x93\xb2\x1d\xbe\x12\x11\x2b\xa7\x96\x52\xc6\x5a\x14\xa6\xe6\x31\x7c\x6f\x86\x1f\xd8\x8e\x55\xb3\x0e\x94\x3a\x5e\x3a\x1b\x63\x8a\x72\x3e\x1c\x6e\x65\x71\xbb\x26\xb1\xca\x87\x3b\x51\x0e\x24\x37\x77\x4a\xdf\x0e\x4b\xc3\x64\xc2\x32\x25\xf9\x70\x9b\x27\x4d\x12\xc9\x85\x24\x1f\x4a\xe7\x6a\x31\xac\xe4\xd5\x4b\x7e\x31\x18\xd4\xda\x57\x5a\xfd\x25\xf9\x71\x59\x3a\xb5\x17\xcc\x7d\xc6\xcb\x0d\xe7\xc6\x69\x9a\x63\x01\xc3\x2b\x18\x0c\x0e\x16\x23\xee\x14\x51\xd1\xf0\xc1\x18\x78\xc7\xb7\x95\x4a\xee\xe1\xe1\xf8\x6a\x01\x5c\xac\x37\x66\x0e\xd4\xf7\xbf\xbc\x6c\x51\xee\x44\x62\x36\x5d\x84\x9c\xe9\xb5\x90\x73\xf0\xdb\xd3\x05\x4b\x12\x21\xd7\xad\xf9\xc7\x8b\xe3\xf0\x4d\x7e\x5f\x5b\xfa\xb9\x1a\x4c\x9a\xf3\x4d\x89\x09\x33\xec\x44\x58\xa1\x4a\x61\x84\x92\x73\x48\xc5\x9e\x27\x6d\x79\xba\x5a\xe8\x44\x6f\xa3\x8a\xb3\xb9\x4f\x9a\x48\x22\x9e\xb7\x69\x2b\xb5\x1f\x94\xe2\xa3\x25\xaf\x94\x4e\xb8\x1e\xac\xd4\xfe\xf2\xf3\x4c\x1d\x9d\xce\xaf\x58\x7c\xbb\xd6\x6a\x2b\x93\x41\xac\x32\xa5\xe7\xb0\xd6\xfc\xbe\x8d\x51\x3b\xae\xd3\x4c\xdd\xcd\xa1\x8c\xb5\xca\xb2\x36\xb5\x66\xbb\xdb\x08\xc3\xdb\x94\x54\x49\x83\x2a\xf3\x39\x50\x12\x34\xed\x69\x3a\x79\xb5\x35\x46\xc9\xf2\x73\xfc\x9c\xf1\xd4\xcc\x21\x38\xf5\x90\x75\xf4\xc9\x3a\xf8\xff\x62\x68\x93\xf8\xea\x62\x31\xac\x4a\xc5\xc5\x02\x13\xb5\x4e\xf0\x44\xec\x40\x24\x4b\xe7\x98\x3e\xb8\x03\x13\xb1\xab\xc9\x85\xe6\x96\x8c\xb9\xe0\x5c\x7d\xf5\x66\x3a\x1e\x4f\x2f\x21\xce\x44\x7c\x0b\x4a\x02\x03\xa9\x12\x0e\x46\x41\xc9\x39\x98\x0d\x87\x58\x49\xc3\xa5\x29\x61\xc3\x35\x5f\x0c\x0b\x7d\xa8\x40\xec\x64\x03\xaf\x85\xd9\x6c\x57\x76\x07\x6b\xc1\x3f\xf2\x95\x2a\xe3\xcd\xb0\xaa\x5d\x0e\xc4\x19\x2b\xcb\xa5\x53\x81\x06\xb1\xd2\x92\x6b\x07\x98\x16\x6c\x90\xb1\x15\xee\xe0\xdf\x04\xbf\x83\x52\x6d\x75\xcc\x51\x93\x1f\x84\xf9\x71\xbb\x72\xae\x16\xe5\x6e\x7d\x1e\xfa\xa5\x33\xf5\x9d\x3a\x3f\xaa\xf1\x4e\xf0\xbb\x6f\xd4\x7e\xe9\xf8\xe0\x43\x10\xd9\x7f\x4e\x8b\xd1\x7a\x6d\xe9\xa4\x22\xcb\xe6\x6f\xd2\x34\xbd\xac\x63\x6d\x33\xa4\x11\x21\xb6\x2a\x55\xb6\x35\xfc\xf2\x90\xea\x75\x7e\xda\xe1\x71\x4f\xd4\xca\x6f\x44\x92\x70\xb9\x74\x8c\xde\xf2\x46\x1d\xa9\x7c\xcd\xcc\x06\x92\xa5\xf3\xb3\xef\xf9\x70\x43\x69\xe4\x51\x1a\xc1\x0d\x1d\xf9\xf5\x20\x0c\x3c\x1a\x06\x70\x13\x44\xbe\x87\x2a\xdb\x81\x0f\xbf\x63\xc8\x90\xb9\x43\x5e\x6b\x06\x1f\x94\x4f\x83\x29\x19\x79\xd4\x9f\x11\x1f\xae\x29\x1d\x91\xa9\x37\x9b\x91\x09\x50\x3a\x23\xbe\x37\x9d\x91\x71\x73\x78\x4d\x83\x00\xc7\x01\x22\x02\x9f\x44\xde\x64\x8a\x88\xa7\xe1\x35\xa2\x03\x6f\x12\x10\x1f\x68\x30\x22\xa1\x37\x19\x93\x51\x73\x78\x4d\x83\x09\x19\x79\x53\x9f\xcc\x80\x06\x11\x89\xbc\xe9\xc4\x22\x8e\x43\xbb\xca\xcc\x9b\x4d\x50\xf4\xc8\x27\x63\x8f\xfa\x14\xd1\xa3\x90\x84\x1e\xf5\x47\x24\x70\xce\x8c\xc1\xd8\x2c\x9d\x78\xab\x35\x97\xe6\x1a\xa3\xe3\x1c\xc2\x66\x34\x93\x65\xaa\x74\x3e\x50\x5a\xd8\x62\x43\x47\x7e\xb1\x07\xea\x8f\x8b\xfd\xe5\x31\xc1\x54\x6c\xd4\x80\xe9\xfc\xb3\x5d\x48\x23\x62\xc3\x52\xb9\x30\x24\x33\xfb\x42\x81\xd2\x29\x99\x78\x94\x8e\x49\x64\x9d\x38\xb5\xf3\x21\x86\x71\x84\x04\x9f\x5a\x87\x8d\xc6\x68\xec\x8c\x04\x40\x47\x33\x1c\x4e\x49\x08\x34\x0c\x48\x80\x43\x8b\xc0\xb0\x4c\xa7\xd6\xa5\x13\xf4\x74\x68\x11\x38\x1b\x4d\xed\xaa\xe1\x94\x44\x5e\x34\xc2\xe9\x28\x24\xbe\x17\x51\x14\x17\xcd\xc8\x04\x87\x88\x18\xfb\x64\xe4\x85\x33\x44\x8c\x47\x24\xf0\xc2\x11\x7a\x77\x42\x49\xe8\x85\x3e\xa1\x70\xdd\x18\xd3\xc9\x98\x50\x2f\x0c\x50\xef\xc9\x14\x57\x19\x93\x00\xae\xe9\x74\x44\x28\xae\x38\x06\x3a\x9d\x90\xc0\x1b\x53\x32\x05\x3a\xf3\xc9\xcc\x1b\xa3\x61\xd7\x74\x16\x92\xc8\x1b\x63\x32\xd1\xd9\x84\x4c\xbc\xc9\x88\x04\x10\xf8\x3e\xa1\xde\x04\xc3\x79\x1d\xd8\x14\x9b\xfa\x38\x4d\xc7\x98\x07\x21\x99\x35\x87\xd7\x01\x0d\xc8\xc4\x9b\x8d\x08\x85\xc0\xb7\xae\x19\x13\x1f\x02\x3f\x22\x21\x0e\x51\x86\x1f\x11\xea\x51\x3f\x20\x21\x04\xfe\x08\x9d\xef\x4f\xac\x26\x36\x97\x29\xea\x7d\x4d\xa7\x14\x03\x11\x4c\x31\x71\xc6\x96\x10\x58\x83\xa2\x89\x0d\x4a\x68\x6d\x8e\x26\x36\x5a\x63\x04\x45\x63\x24\x04\x36\x2f\xa3\xc0\x8e\x51\xa1\x1b\x1a\x52\x5c\x62\x34\xb6\x62\x47\x36\x8e\xa3\x09\xee\x80\x90\x62\x6e\x86\x36\x37\x43\x8a\xf3\xf8\x3f\xfc\xfe\xba\xec\x6c\xa6\x1d\x56\xe1\xf3\xbc\x5b\x0c\xcb\xdd\xfa\x6a\x31\x64\xcd\x0e\xe4\x89\x4c\x5a\x25\x71\xbe\xc1\xd3\x09\xc8\x21\x8d\x4f\x8e\x11\x26\x45\xce\xaa\x2a\x85\x88\x98\x99\xc1\x1d\xdb\x71\x88\xc6\x7e\x5e\x02\x67\x25\x1f\x08\x39\x50\x5b\xd3\x75\x34\x7d\x7d\xcb\xef\x53\xcd\x72\x5e\xb6\x99\x1f\x2e\x5a\x6b\xf8\x5f\x7a\xad\x77\x3c\x7c\x4f\xd4\xc0\xe7\xb8\x1f\xe7\xa0\x95\x61\x86\xbb\x7e\xbf\x05\x7a\x6c\x8b\x0d\x4e\xe5\x8e\x5f\x29\x76\x10\x44\x09\x5f\xbf\x28\x3b\x3c\x95\x3d\x7d\xa5\x6c\xea\x77\x88\xee\x58\xe4\xeb\x9c\x27\x82\x81\x9b\xb3\xfd\xa0\x6a\x3d\x22\xdf\x2f\xf6\xfd\x93\x45\x3e\x2b\x96\xd0\x8e\xa7\x54\x92\xbf\x64\x63\x5b\xf6\x6b\xa5\xbe\x32\x4b\x4e\x0d\x87\x66\x9b\x01\xcd\xb6\xa2\x6e\x6f\x1a\x47\xdd\xa2\x9a\xb2\xd4\x62\x73\x5f\x8a\xb8\x74\x40\x49\xdb\x52\x60\x5f\xae\x0a\xb7\xef\x5c\xbd\xfd\xf5\x97\x7f\x2c\x86\x15\xb4\x9b\x37\x4d\xef\x92\x06\x23\xbe\x22\xe3\xf7\xdf\xff\xeb\xdb\x36\x63\xdd\xce\xbc\xe2\x06\xf3\xb4\x50\xca\x4d\xbc\x71\x7b\xac\x10\x43\x21\x53\xd5\xeb\x13\xb3\xe1\xd2\xd5\xbc\x2c\x94\x2c\x39\x2c\xaf\xe0\x30\x26\x1f\x4a\x25\xdd\x7e\x8d\xb0\x3d\xf3\xf2\x0a\x12\x15\x6f\x73\x2e\x0d\xb1\x97\x30\x58\x02\x12\x48\x22\x34\x8f\x8d\xd2\xf7\xfd\xa7\x60\xc5\x4a\x96\x06\xd4\xea\x03\x8f\x4d\x09\x4b\x78\xe7\xac\x32\xb5\x72\x3c\x70\x8c\xe6\x1c\xff\xc6\x2a\xcf\x85\x71\xde\x5f\x9e\xf0\x68\x9e\x56\x0c\xd8\xd6\x21\x50\xf3\x5c\x19\xcb\x62\xd8\x1a\xf1\x47\x06\xa3\x6c\xfd\x81\x25\xb8\x68\x7a\x1f\x55\x7c\x38\xe9\x63\x51\x64\xce\x8a\x42\xc8\x35\x2c\x41\xf2\x3b\xf8\x99\x15\xee\xbb\xb3\x74\x79\xd7\x43\x05\x7b\x1e\xf4\x56\xd9\x96\xf7\xde\x7b\x1d\x08\x54\x1d\x11\x6b\xcd\xb9\xec\x86\x54\x56\x21\x48\xf3\xa4\x1b\x82\x76\xd5\x52\xee\x9f\x59\x87\xad\x5f\x06\x54\x2e\x79\x19\xf3\xe3\x77\x7f\xfb\xb6\x32\x87\xc5\xb7\xbd\xf7\x2d\xc4\xfb\xfe\x65\x7b\x5f\x69\x6e\xb6\x5a\x1e\x1c\x45\xd6\xdc\xd4\x1e\xfd\xf3\x4f\xe8\x15\x42\xde\xf6\xba\x0a\x82\x51\x37\xd8\xb5\xa2\xff\xf7\xd6\xf9\x75\xbc\x89\x90\x71\xb6\x4d\x78\xe9\xee\x49\x25\xe6\xff\x61\x4f\x44\x42\xca\xed\xaa\x34\xda\xf5\x3d\x98\xf6\x61\x6e\xe7\x1a\x8a\xec\x98\xb6\x8d\x77\x59\x07\x6a\x27\x4a\xf2\x2d\x33\xec\x2d\x37\xee\x3b\x54\xb9\x09\xe4\xc9\xfa\x79\xe0\x69\x1a\x16\x58\x07\x10\xfd\xd0\x75\x7f\x72\xb0\xb8\x3b\x5e\xe7\xa5\xab\x8b\xc6\xb6\x46\xfd\x93\x57\x77\x20\xec\x78\xdb\xd4\x7a\xf7\xcf\x3b\x4a\x12\x97\x6c\x95\xf1\xa4\x8b\x0b\xec\xb5\x4d\x4b\x5e\xfe\xb8\x35\x5d\xbc\xf8\xac\x35\xdb\x09\x63\x8b\x1a\xcb\xae\xd1\x34\x26\xcd\x1c\x06\xd4\xf7\x7d\xff\x5c\x9e\x75\x00\x97\x46\xb3\xec\x07\xcb\x79\x3f\x87\x67\x60\x09\xcb\x0b\x7b\x09\xa5\xdd\x74\xb6\x53\x22\xf9\x65\xc7\x75\xc6\x8a\x67\x41\x65\xa1\x85\x5c\xdf\x70\xb9\xb6\x9f\x00\xa2\x8e\xb5\x1e\xcf\xa7\x72\xb6\xff\x8d\x67\x2a\xae\xd4\x23\x51\x07\x42\xc8\x06\xe2\x9c\x6e\x44\xce\x4b\xc3\x51\xb1\x8b\x17\x16\xb3\x19\xd3\xe5\xda\x32\x57\x0a\x35\xee\x76\xfa\x31\x68\x29\xcb\xca\x8e\xa8\x59\x0d\xee\x0b\x3e\x87\x1e\xde\x12\x85\xdc\xaa\x6d\xd9\x7b\x8d\xe5\xf5\x25\xdb\x79\xe3\xdb\xc7\x39\x47\xd4\x09\xda\xe9\x15\xa6\xb5\xba\xeb\xb4\xc7\x6a\xa4\x9e\xa3\xc0\xa7\x13\xf1\xf0\x94\x31\xcb\xf8\xf7\x0c\x6b\xbb\x55\xa2\x13\xf8\x78\x6e\xea\x4b\x51\xb0\x1b\xbc\x4b\xb7\x54\xc9\x67\x13\xff\xe0\x29\xfb\x3d\xe2\xbc\x25\x7d\x7c\xee\x08\x3f\xab\x04\x18\x21\x26\xb0\x75\x58\x3e\x1d\x66\x6b\x6e\xbe\xcb\x38\x0e\xbf\xb9\xff\x29\x71\x7b\xc7\x8f\x06\xbd\xfe\x09\x7b\x75\x0e\x3e\xcf\x89\xf4\x5e\xff\xf4\x44\x3b\x7c\xc1\x7a\x2a\x56\x7f\xaf\x66\xdc\xa3\x3a\x1e\x3c\x54\x9e\xf1\xea\xc2\xf6\xe8\x1d\xaa\x56\x43\xdc\xe1\xa3\x9f\x92\x6e\xcf\x36\x08\x3d\x0f\xdc\x82\x69\x96\x97\x1d\x67\x9f\x48\x0f\x44\x62\x45\xbf\xf3\xdf\x9f\xb6\x6a\x87\x80\xa0\x6a\x08\xb1\x85\xff\x94\xe7\xf2\x8c\x05\x25\x9f\x95\x7a\xc4\x57\xd5\xbe\x6b\x15\x38\xb6\x1f\x7f\x60\xfb\x51\x73\x0f\xff\xef\xe1\xc8\xf6\x78\x78\x11\xc9\xe3\x1f\x2f\x75\x26\xd8\xdf\x1c\x3b\x93\xfa\xc3\x8c\x6d\x4e\xb0\x17\x11\x52\x72\xfd\x2b\xdf\x1b\x58\x1e\x3e\xda\x74\x18\xf0\x08\x3c\x2b\xb9\xb5\x03\xdb\x8d\xff\xd0\x08\x64\x6d\x59\x50\xfe\x6f\x4c\x38\x2a\x00\xcb\xe5\x12\x1c\x3c\xf8\x9d\xd7\xaa\x8f\xe0\xff\xba\xaa\xcf\x6c\x4f\x38\x36\x1e\x8d\x8f\x7b\xcd\xd3\x3b\x11\x69\xca\x35\x97\x31\x26\xa8\x9b\x0a\x5d\x1a\x0f\x98\x54\x66\x83\x3b\x26\x56\x79\xc1\x74\xd5\xf5\x59\x1a\x49\x45\x66\xb8\x76\x6d\xab\xfa\x45\x8d\x23\xa5\xca\xb9\xbb\xc2\xa9\x9a\xc1\x65\x1e\xac\xfa\xfd\xe6\x42\xe9\x56\xc6\xb8\xd9\x20\x53\x2c\x71\x4f\x7d\xd7\x68\x9b\xd7\x9a\x15\x9b\xd7\xf7\xcd\xf8\x72\xbe\x31\xe1\x50\x06\x09\xf6\x71\x3b\xee\x3e\xd9\xe9\x3e\x6d\xc3\xbe\x07\xc8\x4e\xea\xb2\x50\x69\x8d\xc2\x18\x11\x89\x8d\xf4\x8a\x88\xa4\xdf\xe1\xef\x4a\x06\x4b\x92\xa6\xe0\xa6\xac\xd6\x22\xcf\x09\x26\x39\x2b\xdc\x3d\xce\xbb\x0f\x20\x92\xaa\x5b\xf3\xc0\x7e\xa7\x9c\x83\xd9\x88\x92\xd4\xfd\x9f\xbb\xef\x7b\x60\x6f\x04\x07\x50\x5d\xaf\x6b\x90\x6d\xd2\x0f\xad\xa0\x57\x1f\x96\xd5\x6b\x8b\x0f\x1e\xdb\x51\x39\x3c\xb6\x22\x76\xf8\xaa\x9a\x6f\xfa\xca\xce\xb4\x4d\x4a\xb5\xca\x6b\xa3\xec\xf0\xab\xaf\x80\x11\xa3\xea\x29\xa3\xba\x1c\x58\x09\xee\x72\x60\xbd\x40\x6b\xe5\xbf\xb2\xda\x63\xbf\xf3\xfb\xf9\x31\x1f\xab\x8b\xe3\x49\xfe\x1c\x8e\x81\xba\xd3\x24\x08\x7a\x2b\xf2\x6d\x66\x3b\x43\xf7\x19\x91\xe9\x5d\x82\xbb\xa8\xe3\xa0\x78\xbd\xbc\x6e\x34\x5b\x89\x4c\x7c\xe4\x6e\xe4\xfb\x9f\xc6\x6a\xf3\x49\x55\xab\x4d\xf8\x44\x2a\xb9\xf9\x49\x1a\xae\x77\x2c\x73\x91\xe6\xc1\xc8\x3f\x2e\xf5\xf4\xc3\xda\x62\x58\xfd\x00\x70\xb1\x18\xda\x1f\x11\xff\x1d\x00\x00\xff\xff\x9d\x9d\xce\xef\x5b\x1c\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 7259, mode: os.FileMode(420), modTime: time.Unix(1686042107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
