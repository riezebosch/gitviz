// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\xc1\xaa\x77\x95\x0c\x28\x92\xd3\x22\xb8\x83\x63\xe7\x0e\xdb\x6e\x77\x0b\x74\xb7\x8b\x6d\xb1\xfb\x10\x04\x28\x25\x8e\x6c\x26\x12\x29\x90\x23\x7f\x34\xf5\xff\xbe\x18\x52\xb2\x65\xd9\x09\x82\x5d\x3d\xd8\xe2\x6f\x3e\x38\x33\x9c\x0f\x6a\xfa\x42\xe8\x1c\x37\x35\xb0\x05\x56\xe5\xf5\xd9\xb4\xfb\x03\x2e\xae\xcf\x18\x9b\xa2\xc4\x12\xae\xe7\x12\x97\xf2\xdb\x34\xf5\x2b\xc2\x6d\x6e\x64\x8d\x8c\x44\x67\x01\xc2\x1a\xd3\x3b\xbe\xe4\x1e\x0d\x98\x35\xf9\x2c\x58\x20\xd6\x76\x92\xa6\x8d\xaa\xef\xe7\x49\xae\xab\x74\x29\xed\xb9\x02\x5c\x69\x73\xff\xff\x92\x23\x58\x4c\x85\xb4\xd8\xc7\x93\x4a\xaa\xe4\xce\x06\xd7\xd3\xd4\x2b\x73\xbb\x95\x52\xdd\xb3\x85\x81\xe2\x9f\x68\xcd\xad\x0d\x98\x81\x72\x16\x58\xdc\x94\x60\x17\x00\x18\xf4\x3d\x70\x0c\xa9\x77\x8f\x38\x86\x34\xa2\x30\x17\xa8\x38\xd3\x62\xc3\x1e\xdc\xda\x61\x20\xe7\x0b\x9c\xb0\x8b\xf1\xf8\xdf\x57\x3b\x74\x25\x05\x2e\x86\x60\xc5\xcd\x5c\xaa\x09\x1b\xef\xa1\x9a\x0b\x21\xd5\x7c\x87\x6d\xcf\xdc\xdf\xcb\x6a\xd3\x9a\xff\xdc\x9d\xfe\xd3\x61\x9d\x06\xc1\x91\xf7\x84\x6b\x6d\x25\x4a\xad\x26\xac\x90\x6b\x10\x7b\x79\xe3\x95\xf6\x6c\x42\x5d\x1f\xac\x9f\x34\x3b\xb9\x84\x6a\x8f\x67\x7a\x7d\x6e\xe5\x37\x47\xca\xb4\x11\x60\xce\x33\xbd\xbe\x7a\x9e\x0b\x6f\xfa\x58\xc6\xf3\xfb\xb9\xd1\x8d\x12\xe7\xb9\x2e\xb5\x99\xb0\xb9\x81\xcd\x9e\xae\x97\x60\x8a\x52\xaf\x26\xcc\xe6\x46\x97\xe5\x9e\xd2\xb2\xaf\x16\x12\x61\x8f\x16\x5a\x21\x99\x06\x13\x76\x91\xbc\xee\x6c\xee\x82\x95\x35\x88\x5a\xd9\xe7\xc4\xab\x84\x02\x27\xec\x75\xdf\x6b\x17\xb0\x9e\x4e\xc6\xa6\xa9\xcb\xa2\xeb\xb3\x69\xea\xcb\x69\x4a\x59\xe3\x93\x68\x2a\xe4\x92\x49\x31\x0b\x76\x67\x4c\x19\x2f\xe4\xb2\x25\xd7\x06\x1c\x99\x0e\x90\x28\xb5\x81\x81\x60\x6b\x6d\x9b\x94\x8e\xe4\x21\x47\xad\x17\x1b\x2b\x73\x1b\x30\xad\xf2\x52\xe6\xf7\x94\xf3\xba\x8e\x46\xc1\xf5\xe7\x2f\x9f\x7e\x9b\xa6\x9e\xf5\xb4\x6c\x51\xac\x44\x4f\x90\x96\x24\xf8\xfe\xfd\x9f\xef\x0e\x05\x5b\x83\xfd\xfb\x93\x0d\xc1\xf3\xe7\x5a\x59\x64\x3a\xbb\x83\x1c\x2d\x9b\xb1\x9b\x20\x2b\x75\x16\xc4\x2c\x40\x03\x40\xff\xb9\xae\x2a\x89\xc1\xed\x95\x57\x8a\xfa\x2d\x9d\x23\x9b\xb1\x88\xf4\x8e\xd8\xec\xba\x77\x3a\x5e\x5d\xc5\xeb\x5a\xaa\x39\x9b\x31\x05\x2b\xf6\x0b\xaf\xa3\x9b\x1d\x07\x3d\x37\x21\x6d\x12\xc6\x2c\xcc\xca\x06\xc2\xdb\x78\x40\xa5\xad\x89\x3a\x37\x00\xea\x98\xec\x2d\x22\x06\x03\xe2\x98\x9c\x19\xae\xf2\x45\x2b\xbf\x09\x6f\x77\xe4\xdb\xd1\x55\x8f\x75\x5f\x68\x80\x8d\x51\x9d\xd1\xc9\x1c\xb0\xf5\xec\xfb\x77\x16\xd6\x52\xdd\x87\xfd\x94\x44\xfd\x91\x67\x50\x92\xff\x6b\xe7\x7c\x1b\xbb\x44\xaa\xbc\x6c\x04\xd8\x68\x9d\x78\xf1\xff\xb1\x75\x22\x45\x62\x9b\xcc\xa2\x89\xc6\x31\xfb\xef\x88\x4d\x1c\xe6\xcd\x70\x3f\x4b\x6e\x98\xd2\x02\x6c\x1b\xac\xa5\xb4\xc9\x3b\x8e\xfc\x33\x60\x74\xd3\x19\x4c\x4c\x20\xe6\x8f\x33\xf5\x8f\xb2\xa6\xea\x20\xce\x87\x61\x1d\x07\x54\xdd\x41\x7c\x54\xf4\x43\x9c\x37\xa8\x7f\x07\x5f\x93\x68\x1a\xd8\x53\xda\x14\x9e\xf4\x74\xd3\x03\x8a\x67\x25\x88\x21\x37\x73\xed\xc2\x28\xb0\x3f\x37\x38\x94\xa1\x67\x6e\xf8\x52\x22\x27\x83\x79\xf9\x96\xcc\xe7\x0a\x27\xec\xfc\x62\x3c\x1e\x8f\xe3\x23\xf6\x1c\x14\x1a\x5e\xfe\xe4\xa4\x36\x13\x76\x82\x45\xf0\xaa\x76\x4d\xee\xe2\x98\xc6\x97\x5a\x8a\x4f\x4b\x30\x25\xaf\x4f\x32\xd8\xda\x48\x35\xff\x08\x6a\xee\x46\xc4\xe5\x40\xff\xf6\x70\x59\xf1\xf5\x1f\x50\xea\xdc\x9b\x92\x5c\x0e\xa8\x52\xf5\xa8\x87\x34\x94\x15\x58\x04\x32\xe2\xec\x84\x72\x77\xd2\xc3\x70\xd9\x4a\x6b\xb2\xea\x38\x88\xbb\xe0\x17\xbc\xb4\x70\xec\x15\x25\xe3\x84\x85\xb9\x56\x28\x55\xa3\x1b\x1b\x3e\xe5\x55\xdb\xa4\x83\x97\x63\xf7\x04\x87\xd4\x36\x91\x8e\xbc\xe5\xc6\xe8\xd5\x91\xcd\x6e\x77\x7d\x0a\x65\x4f\x27\xcd\xce\xe9\x9c\x97\xf0\x9e\xe7\x48\x26\x8d\x93\xcb\x23\xa6\xed\xd9\xe9\x55\xcf\x29\x57\x5c\x43\x1b\x68\xe8\x9c\xb2\xab\xf3\xde\xcd\xa8\xe0\x31\xe5\xbe\x1d\x1c\x54\x1d\x45\x97\x4b\x05\xd4\x17\x85\xce\x9b\x0a\x14\x52\x27\xf9\xb1\x04\x7a\xfd\x61\xf3\x41\x44\xe1\x6e\xae\x84\xa3\x9e\xa8\xbb\x0f\x3c\x21\x45\xf4\xb0\x6d\x04\x5e\xa2\xbb\x81\xec\x9b\xc1\xaf\x1e\x89\x76\x66\xc4\xec\xc1\x7b\x1e\xb7\x8d\x63\x1b\x77\x9d\xa1\x55\xd5\xdd\xc2\xb4\x8a\x42\x37\x55\xc2\x98\x45\x35\x37\xbc\xb2\x83\x9e\x2e\x8b\x8e\x90\x38\x95\x37\xe3\xdb\xd1\x61\xe8\x08\x26\x6b\x88\xea\xfa\xe7\x90\xfd\xea\x80\x9d\x14\x1e\x75\x4d\xe2\xf5\x8d\x73\x74\xe2\x60\x0a\xc0\x7c\x11\x7d\x4d\x79\x2d\xd3\x56\x34\xfd\xd7\xc3\x4e\x66\xdb\x2d\xa4\xd8\x7e\x1d\x25\xb8\x00\x15\x19\xb0\xb5\x56\x16\xc8\x99\xee\x3d\xa1\x21\x18\x8d\x5a\x0e\x8a\x16\x28\x24\x06\x0a\x72\x22\x95\x02\xf3\x05\xd6\xc8\x66\xac\xa5\x0d\x2c\xef\x25\xc1\x70\x7e\xb4\x77\x8c\xae\x19\x0b\x59\x14\x60\x40\xe5\x14\x98\xa8\x90\xc6\x62\xcc\xb8\xd2\xb8\xa0\xc3\xc9\x75\x55\x73\xe3\x87\xa7\xa3\x25\x85\x2c\x11\x4c\xc4\x09\x79\xd1\xf2\x25\x56\x57\x10\x65\x04\xb5\x02\x11\x8f\x59\x36\x1a\x75\x9b\x14\x8d\xca\xe9\x4c\x59\xa9\xb9\x88\xfa\x71\xf3\xf1\x0a\x5d\xbc\xe6\x86\xd7\x8b\xf0\xa9\xa8\xdc\x59\xad\x76\x51\xa1\xc5\x61\x02\xec\xca\x28\x31\x50\xe9\x25\x44\x7b\xe7\xa2\xfd\x99\x8f\x62\x46\xa2\x49\x9b\x76\xde\x54\x52\xc4\x13\x29\xd8\x6c\x36\x63\x59\x22\xc5\x68\x10\x51\x2f\xcf\x85\xe8\x2b\xed\xeb\x39\xd8\xe0\x31\xa5\x49\xc5\xeb\x68\x4d\x78\xf4\xc0\xa4\xf0\x53\x36\x66\x25\x4d\xea\x09\xc3\x85\xb4\x49\x3b\xb7\xa3\xf5\x28\xee\xca\xbc\xc5\xdd\x7d\xa6\x9b\xda\x71\xdb\x2f\xfd\x32\x66\xee\xeb\xca\xeb\x63\xdb\x7d\xe4\xbb\xc7\x15\xd7\x89\xb0\x78\xbc\x1f\x16\x87\x1c\x7a\x50\x18\x5d\xb5\x3e\xb8\xd7\x57\xaf\x18\x4f\x50\xb7\x10\xea\x61\xac\xbc\xd2\x53\xb1\x6a\x95\x1f\xec\xfa\x77\x77\xda\x8e\x0e\xae\xe0\xbb\x1c\xf3\x97\xd5\x5e\x5a\x74\x1d\xa4\xbd\x14\x24\xc4\xf0\x59\x56\x4d\xe9\x06\x7a\x34\x50\x53\xac\x04\x55\xc2\xa0\xb7\x3c\x4f\xc7\x69\x4e\x9e\xc9\x52\x7e\x83\xe8\x72\x3c\x7e\x9a\xcf\xe0\xa3\x66\xf9\xc2\xf1\x90\x05\xfc\xa0\x10\xcc\x92\x97\x11\xe1\x31\x7b\x33\xde\xa9\xde\x7f\xfa\x4e\x53\xff\xc9\x30\x4d\xdd\x77\xf9\x5f\x01\x00\x00\xff\xff\xd9\x89\x44\x3e\xae\x0f\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4014, mode: os.FileMode(420), modTime: time.Unix(1568896716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
