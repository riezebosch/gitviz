// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x6f\xdb\xb6\x13\x7f\x9f\x4f\xc1\xaa\xff\x7f\x25\x03\x8a\xe4\x76\x08\x50\x38\xb6\x37\xac\x7b\x2a\xd0\xad\xc3\x5a\xec\x4d\x10\xa0\x94\x78\x96\x99\x50\xa4\x40\x9e\x1c\xbb\xa9\xbf\xfb\xc0\x07\xd9\x92\xec\x06\xc5\xa6\x17\xb6\x78\xbf\xbb\xe3\xdd\x8f\xc7\x23\x35\x7f\xc6\x54\x89\xbb\x06\xc8\x1a\x6b\xb1\xbc\x98\x77\x7f\x40\xd9\xf2\x82\x90\x39\x72\x14\xb0\xac\x38\x6e\xf8\xe7\x79\xee\x47\x56\x6e\x4a\xcd\x1b\x24\xd6\x74\x11\x21\x6c\x31\xbf\xa3\x1b\xea\xa5\x11\x31\xba\x5c\x44\x6b\xc4\xc6\xcc\xf2\xbc\x95\xcd\x7d\x95\x95\xaa\xce\x37\xdc\x5c\x4a\xc0\x07\xa5\xef\x7f\x10\x14\xc1\x60\xce\xb8\xc1\xbe\x3c\xab\xb9\xcc\xee\x4c\xb4\x9c\xe7\xde\x99\x9b\x4d\x70\x79\x4f\xd6\x1a\x56\xff\xc5\x6b\x69\x4c\x44\x34\x88\x45\x64\x70\x27\xc0\xac\x01\x30\xea\x67\xe0\x14\x72\x9f\x9e\xd5\x18\x63\x16\x21\x8e\xa8\xb4\x50\x6c\x47\x1e\xdd\xd8\xc9\x80\x57\x6b\x9c\x91\x97\xd3\xe9\xff\xaf\x0f\xd2\x07\xce\x70\xdd\x17\xee\x2f\xdc\xdf\xf3\x7a\x17\xe2\xfa\x56\x17\xaf\xc7\x1e\x18\x45\xda\x33\x6e\x94\xe1\xc8\x95\x9c\x91\x15\xdf\x02\x3b\xda\x6b\xef\x74\x7a\x94\xa0\x6a\x06\xe3\x9a\xea\x8a\xcb\x81\xa8\xa1\x8c\x71\x59\xcd\xc8\x34\xbb\x82\xfa\x28\x2f\xd4\xf6\xd2\xf0\xcf\x0e\x2a\x94\x66\xa0\x2f\x0b\xb5\xbd\xfe\xb6\x14\x5e\xf5\x65\x05\x2d\xef\x2b\xad\x5a\xc9\x2e\x4b\x25\x94\x9e\x91\x4a\xc3\xee\x88\xab\x0d\xe8\x95\x50\x0f\x33\x62\x4a\xad\x84\x38\x22\x41\xfd\x61\xcd\x11\x86\x94\x34\xeb\x9d\xe1\xa5\xf9\x16\x56\x04\xac\x70\x46\x5e\xf5\x73\x73\xb4\x1c\x24\x7b\x5b\x03\xb9\x2b\x82\xe5\xc5\x3c\xf7\xbb\x61\x6e\x17\xdd\xd7\xc0\x9c\xf1\x0d\xe1\x6c\x11\x1d\x56\xd2\x16\x2c\xe3\x9b\x00\x37\x1a\x1c\x6c\x97\xc9\x22\x8d\x86\x80\x14\x2d\xa2\x92\x0e\x0c\x01\x47\x44\xc9\x52\xf0\xf2\x7e\x11\xa1\xaa\x2a\x01\xc9\x24\x5a\x7e\xf8\xf8\xfe\xcf\x79\xee\x95\x97\x3e\xc1\xa7\xb7\x9c\x77\x5f\x2a\x69\x90\xa8\xe2\x0e\x4a\x34\x64\x41\x6e\xa2\x42\xa8\x22\x4a\x49\x84\x1a\xc0\xfe\x97\xaa\xae\x39\x46\xb7\xd7\xde\x29\xaa\x37\x96\x50\xb2\x20\x89\xf5\x3b\x21\x8b\x65\x8f\x40\xef\xae\xa6\x4d\xc3\x65\x45\x16\x44\xc2\x03\xf9\x9d\x36\xc9\xcd\x41\xc3\x3e\x37\xb1\x9d\x24\x4e\x49\x5c\x88\x16\xe2\xdb\x74\x84\xda\xa9\x2d\x5a\x69\x00\x79\x0a\xfb\x88\xac\x82\x06\x76\x0a\x17\x9a\xca\x72\x1d\xec\x77\xf1\xed\x01\xbe\x9d\x5c\xf7\x54\x8f\x15\x0f\xd8\x6a\xd9\x05\x9d\x55\x80\x21\xb3\x2f\x5f\x48\xdc\x70\x79\x1f\xf7\xab\x06\xd5\x3b\x5a\x80\xb0\xf9\x6f\x5d\xf2\x81\xbb\x8c\xcb\x52\xb4\x0c\x4c\xb2\xcd\xbc\xf9\xf7\x64\x9b\x71\x96\x99\xb6\x30\xa8\x93\x69\x4a\x5e\x4f\xc8\xcc\xc9\x7c\x18\xee\x67\x43\x35\x91\x8a\x81\x09\x64\x6d\xb8\xc9\x7e\xa2\x48\x3f\x00\x26\x37\x5d\xc0\x56\x09\x58\xf5\x75\xa5\xfe\x52\x36\xb6\x80\xad\xe6\xe3\x78\x43\x45\x76\x9b\x45\xe9\xc9\xee\x1b\xcb\x69\x8b\xea\x2f\x30\xfc\x33\xcc\x08\xea\x16\x8e\x48\x28\xc0\x59\xcf\xb7\x7d\x40\xd2\x42\x00\x1b\x6b\x13\xb7\x6f\xb5\x04\xf3\x5b\x8b\x63\x1b\xfb\x54\x9a\x6e\x38\x52\x1b\x30\x15\x6f\x6c\xf8\x54\xe2\x8c\x5c\xbe\x9c\x4e\xa7\xd3\xf4\x44\xbd\x04\x89\x9a\x8a\x5f\x9d\xd5\x6e\x46\xce\xa8\x30\x5a\x37\xae\xdb\xbc\x3c\xc5\xe8\x46\x71\xf6\x7e\x03\x5a\xd0\xe6\xac\x82\x69\x34\x97\xd5\x3b\x90\x95\x6b\xc2\x57\x23\xff\xfb\xe1\xb0\xa6\xdb\xbf\x41\xa8\xd2\x87\x92\x5d\x8d\x50\x2e\x7b\xe8\x10\x43\x5e\x83\x41\xb0\x41\x5c\x9c\x71\xee\x56\x7a\x4c\x97\xa9\x95\xb2\x51\x9d\x92\x78\x20\x7f\x45\x85\x81\xd3\xac\x6c\x31\xce\x48\x5c\x2a\x89\x5c\xb6\xaa\x35\xf1\x53\x59\x85\x6e\x19\x3d\x9f\xba\x27\x1a\xa2\xa1\x90\x4e\xb2\xa5\x5a\xab\x87\x93\x98\xdd\xec\xea\x9c\x94\x3c\x5d\x34\x87\xa4\x4b\x2a\xe0\x17\x5a\xa2\x0d\x69\x9a\x5d\x9d\x28\xed\x2f\xce\x8f\x7a\x49\xb9\xcd\x35\x8e\x61\xa5\xe4\xd9\x82\xec\xb2\x77\x87\x45\xf4\x35\xe7\xbe\x1d\x0c\x76\x9d\x65\x97\x72\x09\xb6\x2f\x32\x55\xb6\x35\x48\xb4\x9d\xe4\x67\x01\xf6\xf5\xc7\xdd\x5b\x96\xc4\x87\xd6\x1f\x4f\x7a\xa6\xee\x60\x7e\xc2\xca\xe2\x71\x68\x04\xde\xa2\xbb\x0a\x1c\x9b\xc1\x1f\x5e\x92\x1c\xc2\x48\xc9\xa3\xcf\x3c\x0d\x8d\x63\x9f\x76\x9d\x21\xb8\xea\xee\x39\x4a\x26\xb1\x3b\x4c\xe2\x94\x24\x0d\xd5\xb4\x36\xa3\x9e\xce\x57\x1d\x90\x39\x97\x37\xd3\xdb\xc9\x90\x3a\x2b\xb6\xd1\x58\xd4\xf5\xcf\xb1\xfa\xf5\x40\xdd\x3a\x3c\xe9\x9a\x56\xd7\x37\xce\xc9\x99\x85\x59\x01\x96\xeb\xe4\x53\x4e\x1b\x9e\x07\xd3\xfc\x7f\x8f\x07\x9b\x7d\x37\xe0\x6c\xff\x69\x92\xe1\x1a\x64\xa2\xc1\x34\x4a\x1a\xb0\xc9\x74\xef\x99\x3d\x04\x93\x49\xd0\xb0\x6c\x81\x44\xab\x60\x49\xce\xb8\x94\xa0\x3f\xc2\x16\xc9\x82\x04\x6c\x14\x79\xaf\x08\xc6\xe7\x47\xb8\x06\x74\xcd\x98\xf1\xd5\x0a\x34\xc8\xd2\x12\x93\xac\xb8\x36\x98\x12\x2a\x15\xae\xed\xe2\x94\xaa\x6e\xa8\xf6\x87\xa7\xc3\xb2\x15\x17\x08\x3a\xa1\x56\xf2\x2c\xe8\x65\x46\xd5\x90\x14\x56\x14\x0c\x12\x9a\x92\x62\x32\xe9\x26\x59\xb5\xb2\xb4\x6b\x4a\x84\xa2\x2c\xe9\xf3\xe6\xf9\x8a\x1d\x5f\x95\xa6\xcd\x3a\x7e\x8a\x95\x3b\xa3\xe4\x81\x15\x3b\x18\x16\xc0\x61\x1b\x65\x1a\x6a\xb5\x81\xe4\x98\x5c\x72\x5c\xf3\x49\x4a\xac\x69\x16\xca\xce\x87\x6a\x1d\xd1\x8c\x33\xb2\x58\x2c\x48\x91\x71\x36\x19\x31\xea\xed\x29\x63\x7d\xa7\x7d\x3f\x83\x09\xbe\xe6\x34\xab\x69\x93\x6c\xad\x3c\x79\x24\x9c\xf9\x53\x36\x25\xc2\x9e\xd4\x33\x82\x6b\x6e\xb2\x70\x6e\x27\xdb\x49\xda\x6d\xf3\x20\x77\xf7\x99\xee\xd4\x4e\x43\xbf\xf4\xc3\x94\xb8\xef\x17\xef\x8f\xec\x8f\xcc\x77\x8f\xdb\x5c\x67\x68\xf1\xf2\x3e\x2d\x4e\x32\xcc\x60\xa5\x55\x1d\x72\x70\xaf\x2f\x5e\x10\x9a\xa1\x0a\x22\x54\x63\xae\xbc\xd3\x73\x5c\x05\xe7\x83\x59\xff\xed\x4c\xfb\xc9\xe0\x96\x7c\xa8\xb1\xee\xaa\xd9\x2b\x8c\xae\x87\x84\x6b\x41\x66\x50\x35\x1f\x78\xdd\x0a\x77\xa4\x27\x43\x47\xbe\x46\xbd\xc8\x00\xbe\x95\x08\x7a\x43\x45\x62\xe5\x29\xf9\x6e\x3a\x9d\x06\xf0\xf8\x1d\x37\xcf\xfd\x05\x7a\x9e\xbb\x8f\xcc\x7f\x02\x00\x00\xff\xff\x47\x61\xba\x0b\x7b\x0e\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 3707, mode: os.FileMode(420), modTime: time.Unix(1568380079, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
