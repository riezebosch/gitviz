// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1568978470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\xc1\xaa\xff\x7f\x25\x01\x8a\xe4\xb4\x08\x36\x38\xb6\xf7\xd0\x87\xb5\x40\xb7\x0e\x6b\xb1\xbd\x08\x02\x94\x12\x4f\x32\x13\x89\x14\x48\xfa\xa9\xa9\xbf\xfb\x70\xa4\x24\xcb\xb2\x13\x04\x1d\x36\xbd\x88\xc5\x7b\xe2\xef\x8e\xc7\xbb\x53\xa6\x4f\x98\xcc\xcc\xb6\x06\xb2\x30\x55\x39\x1f\x4d\xdb\x1f\xa0\x6c\x3e\x22\x64\x6a\xb8\x29\x61\x5e\x70\xb3\xe2\x5f\xa6\x89\x5b\x21\x5d\x67\x8a\xd7\x86\xa0\xea\xcc\x33\xb0\x31\xc9\x0d\x5d\x51\x47\xf5\x88\x56\xd9\xcc\x5b\x18\x53\xeb\x49\x92\x2c\x45\x7d\x5b\xc4\x99\xac\x92\x15\xd7\x67\x02\xcc\x5a\xaa\xdb\x1f\x4b\x6a\x40\x9b\x84\x71\x6d\xfa\xf4\xb8\xe2\x22\xbe\xd1\xde\x7c\x9a\x38\x63\x76\xb7\x92\x8b\x5b\xb2\x50\x90\xff\x13\xab\x99\xd6\x1e\x51\x50\xce\x3c\x6d\xb6\x25\xe8\x05\x80\xf1\xfa\x1e\x58\x81\xc4\xb9\x87\x12\x43\x1e\x72\x88\x0d\x54\x94\x4a\xb6\x25\x77\x76\x6d\x69\xc0\x8b\x85\x99\x90\xf3\xf1\xf8\xff\x97\x1d\x75\xcd\x99\x59\x0c\x89\x15\x55\x05\x17\x13\x32\xde\x93\x6a\xca\x18\x17\x45\x47\xdb\x8d\xec\xcf\xd3\x6a\xdb\xc0\x7f\xec\x4e\xdf\xb5\xb4\xd6\x02\xa3\x86\xf6\x94\x6b\xa9\xb9\xe1\x52\x4c\x48\xce\x37\xc0\xf6\xfa\xca\x19\xed\x61\x32\xb2\x3e\x58\x3f\x08\x3b\xbe\x80\x6a\x4f\x4f\xe5\xe6\x4c\xf3\x2f\x96\x95\x4a\xc5\x40\x9d\xa5\x72\x73\xf9\x38\x17\x5e\xf4\x69\x29\xcd\x6e\x0b\x25\x97\x82\x9d\x65\xb2\x94\x6a\x42\x0a\x05\xdb\x3d\x5f\xae\x40\xe5\xa5\x5c\x4f\x88\xce\x94\x2c\xcb\x3d\xa7\x11\x5f\x2f\xb8\x81\x3d\x35\x97\xc2\x20\x34\x98\x90\xf3\xf8\x79\x8b\xb9\x0d\x56\xba\x34\x46\x0a\xfd\x98\x78\x95\x90\x9b\x09\x79\xde\xf7\xda\x06\xac\x67\x93\x90\x69\x62\xb3\x68\x3e\x9a\x26\xee\x3a\x4d\x31\x6b\x5c\x12\x4d\x19\x5f\x11\xce\x66\x5e\x77\xc6\x98\xf1\x8c\xaf\x1a\x76\xad\xc0\xb2\xf1\x00\x91\x53\x2b\x18\x28\x36\x68\x9b\xa4\xb4\x2c\x47\xb2\xdc\x7a\xb1\xd5\x3c\xd3\x1e\x91\x22\x2b\x79\x76\x8b\x39\x2f\xeb\x20\xf4\xe6\x1f\x3f\x7d\xf8\x7d\x9a\x38\xd1\xd3\xba\x79\xbe\x66\x3d\x45\x5c\xa2\xe2\x9b\x37\x7f\xbd\x3a\x54\x6c\x00\xbb\xf7\x07\x0b\x82\x93\xcf\xc1\x64\x8b\xc0\x4f\x68\xcd\x13\x2e\x72\xe9\x87\xb1\x59\x80\x08\x14\xe8\x5a\x0a\x0d\x64\x36\x27\xed\x7b\x7c\xa3\xa5\x08\xc2\x46\xc2\xe6\xf1\x6c\x4e\x98\xcc\x96\x15\x08\x13\xdb\x42\x44\x66\x04\x19\x31\xe3\x0a\x32\x23\xd5\x36\xec\xfc\x19\xb9\x24\x10\xda\x10\x99\xde\x40\x66\x34\x99\x91\x2b\x2f\x2d\x65\xea\x45\xc4\x33\x0a\x00\x7f\x33\x59\x55\xdc\x78\xd7\x97\x3d\x79\x05\xb9\x13\xc6\x43\x43\x21\x05\x95\x34\x56\xdc\xd0\x02\x65\x47\xee\xbc\x5f\x62\x8e\x91\x19\x09\xd0\xe7\x10\xe1\xdd\xf5\xf2\x0f\x4d\x55\xb4\xae\xb9\x28\xc8\x8c\x08\x58\x93\x5f\x69\x1d\x5c\x75\x12\xf8\x5c\xf9\x08\xc8\x8f\x88\x9f\x96\x4b\xf0\xaf\xa3\x01\x17\x61\x22\xb7\x50\x00\xe2\x98\xed\xd0\xa3\x80\x02\x76\xcc\x46\xfc\x8d\xf6\xf6\x84\x6d\x5a\xdc\xcf\x74\x2e\xdf\xcf\x7f\xfb\xfa\xa7\x57\x0e\x36\xcd\x6e\xfd\xeb\x8e\x7b\x1d\x5e\xf6\x24\xf7\xe5\x05\xcc\x52\x89\x36\x1c\x71\x01\xa6\x89\xd9\xd7\xaf\xc4\xaf\xb9\xb8\xf5\xfb\x17\xd1\xc8\xf7\x34\x85\x12\x23\xbb\xb1\x61\x6d\x4e\x30\xe6\x22\x2b\x97\x0c\x74\xb0\x89\x9d\xfa\x0f\x64\x13\x73\x16\xeb\x65\xaa\x8d\x0a\xc6\x11\xf9\x3e\x24\x13\x4b\x73\x30\xec\x9f\x15\x55\x44\x48\x06\xba\x39\x86\x15\xd7\xf1\x2b\x6a\xe8\x47\x30\xc1\x55\x0b\x18\x85\x80\x15\xf7\x0b\xf5\x13\xaa\xc6\x9a\x80\x92\x77\xc3\xea\xe5\x61\x4d\xf3\xa2\xa3\x52\x37\xa4\xd3\xa5\x91\x7f\x80\xab\x44\x46\x2d\x61\xcf\x69\x2e\xee\xa4\x67\x1b\x1f\x10\x34\x2d\x81\x0d\xa5\x89\x2d\x92\x4a\x80\x7e\xbb\x34\x43\x1d\x7c\x0a\x45\x57\xdc\x50\x04\x4c\xcb\x97\x08\x9f\x0a\x33\x21\x67\xe7\xe3\xf1\x78\x1c\x1d\x89\x67\x20\x8c\xa2\xe5\x2f\x56\x6b\x3b\x21\x27\x44\x18\xad\x6a\x5b\xda\xcf\x8f\x79\x74\x25\x39\xfb\xb0\x02\x55\xd2\xfa\xa4\x80\xae\x15\x17\xc5\x7b\x10\x85\x6d\x8c\x17\x03\xfb\xbb\xc3\x65\x45\x37\x7f\x42\x29\x33\x07\x25\xbe\x18\x70\xb9\xe8\x71\x0f\x79\x86\x57\xa0\x0d\x20\x88\xd1\x09\xe3\xf6\xa4\x87\xe1\xd2\x95\x94\x88\xea\x38\x88\x5d\xf0\x73\x5a\x6a\x38\xf6\x0a\x93\x71\x42\xfc\x4c\x0a\xc3\xc5\x52\x2e\xb5\xff\x90\x57\x4d\x6b\xf2\x9e\x8e\xed\xe3\x1d\x72\x9b\x44\x3a\xf2\x96\x2a\x25\xd7\x47\x98\xed\xee\xf2\x14\x95\x3c\x9c\x34\x9d\xd3\x19\x2d\xe1\x0d\xc5\xea\x69\x37\x3d\x12\xda\x8d\x4e\xaf\x7a\x4e\xd9\xcb\x35\xc4\x80\xad\xf6\x14\xae\xd6\x7b\xdb\x99\xbd\xfb\x8c\xbb\x72\x70\x70\xeb\x30\xba\x94\x0b\xc0\x8a\xdb\xb5\x81\x02\xcc\xeb\x12\xf0\xf5\xe7\xed\x3b\x16\xf8\x5d\x37\xf5\xc3\x9e\xaa\xeb\x1e\xf7\x6b\x21\xdf\x0f\xfb\x3d\xa0\x9d\xbb\xf6\xc5\xe0\x37\x47\x09\x3a\x18\x11\xb9\x73\x9e\x47\x4d\xe1\xd8\x45\x6d\x65\x68\x4c\xb5\xb3\xa7\x14\x81\x6f\x7b\xa9\x1f\x91\xa0\xa6\x8a\x56\x7a\xd0\x2d\x78\xde\x32\x62\x6b\xf2\x6a\x7c\x1d\x1e\x86\x0e\xc9\x88\x06\xb9\xb6\x7e\x0e\xc5\x2f\x0f\xc4\xd1\xe0\x51\xd5\x44\x59\x57\x38\xc3\x13\x07\xe3\x9a\xf3\x67\xdb\x9c\x1b\xd5\xe4\x7f\x77\x9d\xce\xae\x5d\x70\xb6\xfb\xfc\x50\xdf\xc6\xd6\xdf\xf5\x6d\x8c\x16\x08\x63\x5b\x37\x76\x6a\x2e\x04\xa8\x4f\xb0\x31\x64\x46\x1a\xde\x00\xf9\x8e\x40\xa9\xc1\x3a\x80\x8d\xf8\x5b\xd0\xa3\xde\x01\x74\xfd\xdf\x63\xef\x36\x27\xb3\xd9\x8c\x78\xd8\x2f\xbd\x47\xe1\x46\xc9\x7f\x15\xe3\xfe\x92\x0d\xfb\x73\x33\xb9\xb6\xcd\x8e\xf1\x3c\x07\x05\x22\xc3\xc4\x0b\x72\xae\xb4\x89\x08\x15\xd2\x2c\x30\xf9\x33\x59\xd5\x54\xb9\xb1\xc7\xf2\xe2\x9c\x97\x06\x54\x60\xe7\xb4\x27\x8d\x5c\xac\x65\x05\x41\x8a\xa4\x46\x21\xa0\x11\x49\xc3\xb0\xdd\x24\x5f\x8a\x0c\xef\x0c\x29\x25\x65\x41\x3f\x42\xfd\x61\xb1\x50\xb4\x5e\x3c\x7e\x5a\xc4\xc5\xe1\x05\x6b\xaf\x90\x8e\x71\xb2\x59\x41\xb0\x77\x2e\xd8\xdf\xa9\x30\x22\xa8\x1a\x37\xd7\xda\x41\x45\x43\x34\xe6\xcc\x1e\x64\x1a\x73\x16\x0e\x22\xea\xf4\x29\x63\x7d\xa3\x7d\x3b\x07\x1b\xdc\x67\x34\xae\x68\x1d\x6c\x90\x1e\xdc\x11\xce\xdc\x14\x13\x91\x12\x27\xa1\x09\x31\x0b\xae\xe3\x66\x2e\x0a\x36\x61\xd4\x96\xd1\x86\x6e\x27\xd1\x76\x2a\x8a\x9a\x7e\xe4\x96\x11\xb1\xa3\xb2\xb3\x47\x76\xfb\xc8\xb7\x8f\x2d\x5e\x27\xc2\xe2\xe8\xfd\xb0\x58\xca\xa1\x07\xb9\x92\x55\xe3\x83\x7d\x7d\xf6\x8c\xd0\xd8\xc8\x86\x64\xe4\x30\x56\xce\xe8\xa9\x58\x35\xc6\x0f\x76\xfd\xd6\x9d\x76\xe1\xc1\x87\x5d\x97\x63\xee\x13\xa8\x97\x16\x6d\x85\x6e\x86\xae\x18\x05\x3e\xf2\x6a\x59\xda\x81\x29\x18\x98\xc9\xd7\x0c\x6f\xc2\xa0\x76\x3f\xce\xc6\x69\x49\x9a\xf2\x92\x7f\x81\xe0\x62\x3c\x7e\x58\x4e\x99\x7b\x61\xb9\x8b\xe3\x48\x1a\xcc\x3b\x61\x40\xad\x68\x19\x20\x3d\x22\x2f\xc6\x9d\xe9\xfd\x3f\x54\xa6\x89\xfb\x10\x9d\x26\xf6\xbf\x3d\x7f\x07\x00\x00\xff\xff\x96\xa3\x19\x55\x04\x12\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4612, mode: os.FileMode(420), modTime: time.Unix(1573139967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
