// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1686084419, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\x7b\x8f\xdb\xb6\x93\xff\xef\xa7\x98\x2a\xf7\xab\x65\x40\xa6\x25\xf9\xed\xb5\x7d\xd7\x6e\xd3\x4b\x71\x49\x7b\x68\x8a\x16\x68\x10\xa0\xb4\x44\x59\xcc\x4a\xa4\x41\xd2\x5e\x3b\xe9\x7e\xf7\xc3\x50\xb2\x57\xb6\xe4\x7d\xb4\x28\xee\x67\x20\x59\x72\x38\x33\x9c\x19\xce\x8b\xb4\x67\x5f\xc5\x32\x32\xfb\x35\x83\xd4\xe4\xd9\xe2\x6a\x56\xfc\xb9\x9a\xa5\x8c\xc6\x8b\x2b\x00\x80\x99\xe1\x26\x63\x8b\x15\x37\x5b\xfe\x79\xd6\x2d\x66\xc5\x4a\xc6\xc5\x2d\x28\x96\xcd\x1d\x9d\x4a\x65\xa2\x8d\x01\x1e\x49\xe1\x00\x72\x9c\x3b\x3c\xa7\x2b\xd6\xdd\x75\x0a\x58\xaa\x58\x32\x77\x12\xba\xc5\x29\xe1\x91\x74\x4a\x2e\x3a\x52\x7c\x6d\x4a\x1a\xc3\x76\xa6\xfb\x89\x6e\x69\x01\x75\x40\xab\x68\xee\xa4\xc6\xac\xf5\xb4\xdb\xdd\x88\xf5\xed\x8a\x44\x32\xef\x6e\xb9\xee\x08\x66\xee\xa4\xba\xed\x6a\x43\x45\x4c\x33\x29\x58\x77\x93\xc7\xd5\x25\x92\x73\x41\x3e\x69\x67\x31\xeb\x16\xfc\x0e\x5b\x9a\x7d\xc6\xaa\x3b\x46\x5a\x97\xe2\xe0\x07\x8d\xe0\x1d\x67\x4b\x19\xef\xe1\xcb\x71\x6a\x11\x18\x5f\xa5\x66\x0a\x81\xef\xff\xeb\xfa\x64\xe5\x8e\xc7\x26\x6d\x5a\xc8\xa9\x5a\x71\x31\x05\xff\x14\xbc\xa6\x71\xcc\xc5\xaa\x06\x4f\xa4\x30\x9d\x84\xe6\x3c\xdb\x4f\xe1\x1b\xc5\x69\xe6\xc1\x1b\x96\x6d\x99\xe1\x11\xf5\x40\x53\xa1\x3b\x9a\x29\x9e\x3c\x90\xdd\x5f\x1d\x87\xaf\xf2\x7d\x69\x81\xbf\x27\x78\x95\x65\x4c\x0d\x3d\xe3\xb6\x96\x9a\x1b\x2e\xc5\x14\x12\xbe\x63\xf1\x29\x43\x55\xec\x74\xa6\x97\x91\xeb\x1a\xec\x49\xd3\x90\x01\xcb\x4f\xd7\x96\x72\xd7\xd1\xfc\xb3\x5d\x5e\x4a\x15\x33\xd5\x59\xca\xdd\xf5\xcb\x74\xed\x9d\xc3\x97\x34\xba\x5d\x29\xb9\x11\x71\x27\x92\x99\x54\x53\x58\x29\xb6\x3f\xc5\x91\x5b\xa6\x92\x4c\xde\x4d\x41\x47\x4a\x66\xd9\xe9\x6a\x49\x76\x97\x72\xc3\x1a\x0e\x54\xf3\xcf\x6c\x0a\x01\x09\xab\xfa\x54\x8d\xbc\xdc\x18\x23\x85\x7e\x89\x9d\x33\x96\x98\x29\x84\xe7\x16\xb2\x86\xbe\xb8\x4f\xc2\x33\xc3\xd4\xd9\x36\x19\xd7\xa6\x63\x43\xa3\x83\xa1\x31\x05\x21\x05\x7b\xda\x5d\x2b\x7c\xff\x2b\x67\x31\xa7\x68\x19\xc6\x04\x50\x11\x83\x9b\xd3\x5d\xa7\xb4\xf7\xd0\xf7\xd7\xbb\xf6\xd9\xa6\x4d\x7e\x85\x9f\x98\xeb\x75\x46\xf7\x4d\x42\x54\x36\x7c\xc4\x68\x2f\x63\x42\x56\xdc\xa4\x9b\x65\x27\x92\x4a\xd4\x0c\xf3\x24\xab\xd3\xd1\xac\x6b\x8d\xb8\xb8\x9a\x75\x8b\x34\x7a\x35\xc3\x1c\x52\xe6\x9e\x98\x6f\x81\xc7\x73\xe7\x18\xa2\x98\x9d\x62\xbe\x2d\x97\xd7\x8a\xd9\x65\x34\x8b\xb3\xf8\xfa\xd5\x78\x38\x1c\x5f\x43\x94\xf1\xe8\x16\xa4\x00\x0a\x42\xc6\x0c\x8c\x04\xcd\x18\x98\x94\x41\x24\x85\x61\xc2\x68\x48\x99\x62\xb3\xee\x5a\x1d\xb2\x33\x2d\x53\xee\x21\x79\x16\x1a\xda\xec\xa9\x38\xfb\xcc\x96\x52\x47\x69\xb7\xc8\xeb\x0e\x44\x19\xd5\x7a\xee\x9c\x98\xc1\x01\xaa\x38\xed\x64\x74\x89\x39\xfe\x57\xce\xee\x40\xcb\x8d\x8a\x18\x4a\xf2\xdf\xdc\xbc\xd9\x2c\x9d\xc5\x4c\x6f\x57\xf5\xe8\x9a\x3b\x63\xdf\x29\x43\xb0\x18\x6f\x39\xbb\xfb\x56\xee\xe6\x8e\x0f\x3e\x84\x03\xfb\xcf\x39\x21\xb4\x56\x9b\x3b\x09\xcf\xb2\xe9\xab\x24\x49\xae\xcb\x70\xb2\x41\x58\x09\x02\xba\xd4\x32\xdb\x18\x76\x7d\xc8\x26\x65\x0a\xb0\xc3\x63\xda\x29\x85\x4f\x79\x1c\x33\x31\x77\x8c\xda\xb0\x4a\x8a\x2f\x6c\x4d\x4d\x0a\xf1\xdc\x79\xe7\x7b\x3e\xbc\x0d\x82\x81\x17\x04\x03\x78\x1b\xf4\xfc\x72\xd0\x0f\xbd\xa0\x1f\xc2\xdb\x70\xe0\x7b\x28\xb2\x1d\xf8\xf0\x3b\x1e\x19\x12\x37\xf0\xab\x3b\xce\xdc\x79\x17\x84\x63\xd2\xf3\x02\x7f\x42\x7c\xb8\x09\x82\x1e\x19\x7b\x93\x09\x19\x41\x10\x4c\x88\xef\x8d\x27\x64\x58\x1d\xde\x04\x61\x88\xe3\x10\x31\x42\x9f\x0c\xbc\xd1\x18\x31\x1e\x86\x37\x88\x1d\x7a\xa3\x90\xf8\x10\x84\x3d\xd2\xf7\x46\x43\xd2\xab\x0e\x6f\x82\x70\x44\x7a\xde\xd8\x27\x13\x08\xc2\x01\x19\x78\xe3\x91\xc5\x38\x0e\xed\x2e\x13\x6f\x32\x42\xd6\x3d\x9f\x0c\xbd\xc0\x0f\x10\xbb\xd7\x27\x7d\x2f\xf0\x7b\x24\x74\x6a\xca\xe0\xd9\xcc\x9d\x68\xa3\x14\x13\xe6\x06\x4f\xc7\x39\x1c\x9b\x51\x54\xe8\x44\xaa\xbc\x23\x15\xb7\xf9\x3c\xe8\xf9\xeb\x1d\x04\xfe\x70\xbd\xbb\x3e\x3a\x98\x8c\x8c\xec\x50\x95\xbf\xd8\x84\xc1\x80\xd8\x63\x29\x4c\xd8\x27\x13\x3b\x09\x20\x08\xc6\x64\xe4\x05\xc1\x90\x0c\xac\x11\xc7\x16\xde\xc7\x63\xec\xe1\x82\x1f\x58\x83\xf5\x86\xa8\xec\x84\x84\x10\xf4\x26\x38\x1c\x93\x3e\x04\xfd\x90\x84\x38\xb4\x18\x78\x2c\xe3\xb1\x35\xe9\x08\x2d\xdd\xb7\x18\x08\x1d\x8c\xed\xae\xfd\x31\x19\x78\x83\x1e\x82\x07\x7d\xe2\x7b\x83\x00\xd9\x0d\x26\x64\x84\x43\xc4\x18\xfa\xa4\xe7\xf5\x27\x88\x31\xec\x91\xd0\xeb\xf7\xd0\xba\xa3\x80\xf4\xbd\xbe\x4f\x02\xb8\xa9\x8c\x83\xd1\x90\x04\x5e\x3f\x44\xb9\x47\x63\xdc\x65\x48\x42\xb8\x09\xc6\x3d\x12\xe0\x8e\x43\x08\xc6\x23\x12\x7a\xc3\x80\x8c\x21\x98\xf8\x64\xe2\x0d\x51\xb1\x9b\x60\xd2\x27\x03\x6f\x88\xce\x14\x4c\x46\x64\xe4\x8d\x7a\x24\x84\xd0\xf7\x49\xe0\x8d\xf0\x38\x6f\x42\xeb\x62\x63\x1f\xc1\xc1\x10\xfd\xa0\x4f\x26\xd5\xe1\x4d\x18\x84\x64\xe4\x4d\x7a\x24\x80\xd0\xb7\xa6\x19\x12\x1f\x42\x7f\x40\xfa\x38\x44\x1e\xfe\x80\x04\x5e\xe0\x87\xa4\x0f\xa1\xdf\x43\xe3\xfb\x23\x2b\x89\xf5\xe5\x00\xe5\xbe\x09\xc6\x01\x1e\x44\x38\x46\xc7\x19\xda\x85\xd0\x2a\x34\x18\xd9\x43\xe9\x5b\x9d\x07\x23\x7b\x5a\x43\x44\x1a\x0c\x71\x21\xb4\x7e\x39\x08\xed\x18\x05\x7a\x1b\xf4\x03\xdc\xa2\x37\xb4\x6c\x7b\xf6\x1c\x7b\x23\x8c\x80\x7e\x80\xbe\xd9\xb7\xbe\xd9\x0f\x10\x8e\xff\xc3\xef\xcf\xf3\xce\xaa\xdb\x61\x16\xae\xfb\xdd\xac\xab\xb7\xab\xc5\xac\x4b\xab\xcd\xe1\xc3\xf2\x69\x65\x98\xa6\xd8\x00\x00\x39\xb8\xf1\x59\xa5\xa0\x82\xe7\xb4\xc8\x52\x88\x11\x51\xd3\xb9\xa3\x5b\x06\x83\xa1\x9f\x6b\x60\x54\xb3\x0e\x17\x1d\xb9\x31\x8d\xd5\xf3\x96\xed\x13\x45\x73\xa6\x4f\x89\xbf\x9c\x96\x2a\xff\x5f\xde\xc9\x1c\xfb\x9b\x86\x82\x75\x8c\xc7\x29\x28\x69\xa8\x61\xae\xdf\x7e\xac\x02\x86\xe7\x7c\x87\xcf\x64\xdb\x09\x07\x31\x5b\x3d\xca\xbb\x7f\xce\x7b\xfc\x4c\xde\x81\xdf\xc0\xba\x61\x93\xb2\xf1\xa8\x74\x1b\x83\xa6\x66\xe3\x45\x67\x09\xa7\xe7\x89\x75\xff\x05\x1d\xc4\x33\xb9\x3e\xd3\x4b\xce\x15\x87\x6a\x9b\x01\xd5\xb6\xa2\x6c\x86\x2a\xa5\x6e\x76\x6c\x2e\x8e\x90\x02\xc9\xe2\x6b\x23\xd7\x0e\x48\x61\x3b\x8c\x62\xea\xb6\x9d\xc5\xfb\x5f\x7e\xfa\xdf\x59\xb7\xc0\xbb\x4c\x9c\x24\x77\x71\x85\x18\xa7\x48\xfc\xfd\xf7\xbf\x7d\x57\x27\xae\x74\x39\x76\xba\xc9\x0a\x1e\xb6\x15\x3d\x2f\xcd\x19\x5f\xd4\xcc\x36\xb3\x8d\x48\x1d\x6e\xd7\xb8\x58\x6f\x0e\x97\xc8\x28\x65\xd1\xed\x52\xee\x1c\x10\x34\x67\xc7\x2d\x60\x4b\xb3\x0d\x2e\xcb\x3c\xe7\xc6\x01\x8b\xc6\x62\xe8\x5e\x60\xa9\xd7\x54\x1c\xaa\x5b\xd9\xd8\x2b\x16\x3b\x8b\x82\x7e\xd6\xc5\xf5\x06\x29\xbb\x0d\x62\xce\xba\xe7\x0a\xfd\xa3\x1a\x1a\xc5\xd8\x5f\xd2\x6f\x85\x8d\xbb\xb3\x40\xfa\x7f\x67\xfd\x96\x99\x5c\xfe\x25\xfd\x96\x19\x76\x81\x48\xfe\x37\xd4\x9b\x75\x37\xd9\xa3\xe1\x75\x41\xcb\x0b\x1a\x62\x10\xa4\x9c\x29\xaa\xa2\x74\x7f\x54\xb1\x02\x79\x44\x4f\xab\xe3\xe2\x88\xdb\xa4\x54\x4d\xa1\xea\x6d\xa3\x18\x3e\xe3\x1d\xe6\x81\x3c\x61\x26\x4a\xdd\x16\x5d\xf3\x2e\x17\x89\x6c\xb5\x89\x49\x99\x70\x15\xd3\x6b\x29\x34\x83\xf9\x02\x0e\x63\xf2\x49\x4b\xe1\xb6\x4b\x0c\x7b\xd1\x9b\x2f\x20\x96\xd1\x26\x67\xc2\x10\xfb\x94\x04\x73\xc0\x05\x12\x73\xc5\x22\x23\xd5\xbe\xfd\x90\x56\x23\x29\xb4\x01\xb9\xfc\xc4\x22\xa3\x61\x0e\x1f\x8a\x83\xf7\xa0\x70\x70\x0f\x0e\xa1\xfc\xf1\xfa\x8c\x46\xb1\xa4\x20\xc0\x0b\x18\x22\x2a\x96\x4b\x63\x49\x0c\x5d\x21\xfe\xf9\x2e\xe5\x8d\x78\x7e\x96\xae\x8b\x0d\xa6\x80\xd7\x87\xd3\x12\x86\x22\x34\xc1\x51\xc4\x26\x38\x4a\xd2\x04\x7f\xf3\xfa\x9b\xef\x9a\xe0\x85\xc4\x8d\x3b\xd3\x55\x01\x7e\x28\x08\xd7\xe7\xea\x18\xd9\xa0\x8a\x0d\x01\x17\x0f\xb8\x8d\x07\x51\x2f\x4c\x05\x6d\x4e\xd7\x6b\x2e\x56\x30\x07\xc1\xee\xe0\x1d\x5d\xbb\x1f\x1a\x03\xec\x43\x0b\x75\x6d\x79\xd0\xc2\xb0\x6a\x7d\xf4\x2e\x60\xa1\xa5\x10\xcb\x26\x97\xcb\x68\x85\xa9\x11\x51\xb1\xf8\x32\x1a\xda\xb1\xe4\xb6\x7f\x64\x4f\xba\x7a\x1a\xa9\x30\xf1\xd3\x78\x78\x44\x85\x9a\x34\xba\x6d\x7d\xac\x61\x7d\x6c\x5f\x5f\xd5\x80\x8a\x99\x8d\x12\x07\x63\x92\x15\x33\xa5\xe5\xff\xfc\x13\x5a\x6b\x2e\x6e\x5b\xa7\xd5\xdd\x3b\x65\x61\x83\x76\x0a\xee\xce\x1e\x55\x19\x03\x84\x8b\x28\xdb\xc4\x4c\xbb\x3b\x52\x30\xfb\x4f\xd8\x11\x1e\x13\xbd\x59\x6a\xa3\x5c\xdf\x83\x71\x1b\xa6\x16\xd6\xd4\x26\x15\xe7\x2b\x64\xcc\x74\x79\xba\x5b\xae\xc9\x77\xd4\xd0\xf7\xcc\xb8\x1f\x50\x8f\x06\x54\x7b\xf1\x3f\x45\x47\x90\x6b\x17\x3d\xf8\x52\xc6\xce\x14\x2c\xc4\xca\x5b\x40\x3e\xe0\xdc\x0a\xfa\x11\xee\xdb\x67\xac\x59\xbc\xba\x2c\xc5\x79\x0a\x58\x63\xb7\xa4\x6b\x2e\x5d\x3e\x2c\x39\xd8\x02\x3b\xe7\xe1\x56\x3c\x04\x34\xad\xd1\x8d\x91\x3f\xb3\xe2\x31\xae\x1e\x5e\x19\xdd\xcb\x8d\x99\x36\x84\xc7\x21\xcf\xf2\x88\x66\x4d\xeb\xf8\xd1\x52\x99\x77\xcc\xa4\x32\x9e\x42\xab\x48\x6a\x2c\x6e\x35\x7b\x96\x4e\xe9\x2d\xfb\x45\xde\x51\x15\xeb\x29\xb4\x94\x94\x46\x5f\x40\x2d\x38\xd9\x96\xb1\xf5\xf3\xdb\x0b\x48\xcb\x4c\x46\xb7\xef\x53\x9e\x18\xfb\x46\x97\xd0\x4c\xb3\x66\x4c\x34\xfe\x3b\x2e\x78\xce\x3f\x97\x8d\xe8\x23\xc8\x6b\x6a\xef\x53\x4c\x18\x45\xb3\x53\x82\x1a\xfe\xfd\xb9\x53\x9f\x30\x4a\xf7\x9a\x47\x7a\x7a\x7e\xa3\x01\xfb\x08\xbc\xfb\x95\x65\x32\xe2\x66\x6f\x5f\x7c\xeb\xa2\xe4\x5c\x54\x31\xc2\x3a\x86\xe1\x39\xd3\x86\xad\xa7\x10\x3c\x26\x86\xf5\xbc\xa6\xf3\x2b\x33\xa4\xf3\xca\xb7\x1f\xa7\xbe\x43\xe9\x70\x8d\xf2\x51\xa5\xe4\x5d\x23\x5f\x2b\x9b\xbc\xb4\x62\x45\x12\x74\x99\xb1\xc6\xfa\x50\xfd\xe8\x88\x66\xec\x7b\x8a\x75\xd2\x0a\xd1\x88\x78\xff\xb2\x43\xb1\x51\xdc\x24\x5b\x22\x45\x63\x14\x40\xc5\x52\xf6\xa1\xbb\x7e\x11\xbf\xbf\x74\x71\xa9\x45\x76\x24\x85\xa1\x5c\xd8\xca\x7b\x6c\x0c\x56\xcc\xbc\xce\x18\x0e\xbf\xdd\xff\x10\xbb\xad\xe3\x53\x69\xeb\x3c\x89\x14\x3d\xc5\x65\x4a\x5c\x6f\xd5\xf3\xc9\xe1\xcb\x91\x87\xec\xf3\x63\x01\x71\x8f\xf2\x60\x5e\x2b\x4d\x73\x4c\x82\x5e\x99\xb4\xee\xbd\x43\x46\xaa\x24\xcc\xc3\x57\x4e\x52\xb8\x2d\x7b\x1f\x6a\x79\xe0\xae\xa9\xa2\xb9\x6e\xa8\xb6\x3c\x39\x2c\x12\xcb\xfe\x83\xff\xf1\xfc\xb2\x7a\x38\x1c\x94\x12\x51\x6c\x09\x39\xa7\xb9\xae\x91\x20\xe7\x5a\xb9\x38\x26\xe2\x76\xd3\x2e\x70\x6c\xeb\xfe\xc0\xb6\xae\xa4\xee\xfe\xc7\x97\x23\xd9\xfd\x61\xc2\xe3\xfb\x3f\x1e\xeb\xf8\xb0\x6f\x3c\x76\x7c\xe5\xd3\xb4\x6d\xfa\xb0\xc7\xe3\x42\x30\xf5\x0b\xdb\x19\x98\x1f\x9e\xad\x1b\x14\xb8\x07\x96\x69\x66\xf5\xc0\x36\xee\x2f\x2a\x81\xa4\x27\x1a\xe8\xff\x1f\x15\x8e\x02\xc0\x7c\x3e\x07\x07\x5b\x09\xe7\xb9\xe2\x23\xf2\x3f\x2e\xea\x85\x50\x85\x63\x0b\x53\xf9\xa6\xa7\x1a\x49\xc9\x46\xd8\x82\x04\x99\xa4\xb1\x7b\xae\x52\xcc\x93\x84\x29\x26\x22\x74\x5f\x37\xe1\x4a\x1b\x0f\xa8\x90\x26\xc5\xd0\x8a\x64\x8e\x45\xa5\x6c\x15\x94\x36\xa4\x68\x18\x5c\x7b\x41\xf8\xaa\xc4\x23\x5a\xe6\xcc\x5d\x22\xa8\x24\x70\xa9\x07\xcb\x76\xfb\xbc\xdd\xaa\x5c\x49\x56\x8a\xae\xd3\xe7\xdf\x49\x70\xd2\xdc\x0a\x17\x21\x87\x1d\xe2\x96\xb9\x0f\xda\xb8\x0f\xa1\xd8\xf6\x00\xc9\x49\xd9\x06\x15\xb2\x21\x33\x4a\x78\x6c\x4f\x7b\x49\x78\xdc\x6e\xb0\x79\xc1\x83\xc6\x71\x95\x71\x95\xd7\xc9\x26\x97\x18\x93\x9c\xae\xdd\x1d\xc2\xdd\x2f\xc0\xe3\xa2\xeb\xf3\x0e\x8d\xa3\x91\xc4\x8e\xdc\x5d\xdb\x03\x7b\xd3\x3a\x20\x94\xb9\xdb\x48\x62\x47\x87\x56\xd2\x83\xe2\x4b\xbf\x62\x7a\x42\x03\xf7\x75\x9b\xc3\xa1\x90\x36\xd8\xa8\x80\x57\x6d\x64\x21\xa7\xaa\x24\x4a\xe6\xa5\x32\x76\xf8\xf5\xd7\x40\x09\x5e\x5b\x2c\xc8\xc8\x26\xc3\x15\x8c\x9b\x0c\x57\x6e\x70\xb2\xf3\xdf\xd9\xed\xbe\xdd\xf8\x05\xe7\xd1\xe9\x8b\x77\xb2\x33\xbf\x39\x94\x80\xb2\xcf\x21\x88\xf4\x9e\xe7\x9b\xcc\xb6\x4c\xee\x05\x96\xc9\x5d\x8c\x31\xd2\x50\x24\x9e\xcf\xaf\x19\x9b\x2e\x79\xc6\x3f\x33\x77\xe0\xfb\x4f\xe3\x2a\xf3\xa4\xa8\x45\xa4\x3f\x2c\x69\x66\x7e\x10\x86\xa9\x2d\xcd\x5c\x5c\xf3\xa0\xe7\xdb\xad\x8e\x18\x0d\x85\x59\x7f\xbb\xff\x91\xe6\xcc\x3d\xbc\xe9\xb4\x49\x22\xd5\x6b\x1a\xa5\x6e\x71\xd7\x39\x91\x73\x87\x87\xfd\x7a\xcb\x84\x79\xcb\xb5\x61\x82\x29\xd7\x89\x52\x2a\x56\x78\x95\x77\x1f\xbf\xc6\x7e\x29\x9e\x52\xbc\xe3\xfb\xc9\x3d\xcc\x81\x11\x43\xd5\x8a\x99\xba\x6f\x95\x57\x16\x4b\xf3\x11\x53\x66\x41\x75\x21\x7a\xb1\x1d\x20\x8a\x25\x8a\xe9\xf4\xfc\x20\xee\xdb\xed\x47\x2d\x60\x5b\x93\xca\x03\x4f\xfb\xc5\x4a\x1e\x14\x7c\x5a\xb3\xb2\x4f\x21\xc5\xa5\x86\x54\x6f\x30\xa4\x6c\x3a\x2f\xe9\x7a\xf0\x11\xcd\xcc\x4f\x05\x17\xb7\xde\xf5\xdc\xd7\x9b\xab\x2f\xc0\xd1\x29\xa8\x0d\x94\x37\x54\xc4\x19\x53\x56\xc2\x92\xe1\x03\x31\xd6\xc7\x3a\xee\x79\x54\xd5\x31\xc8\x52\xc6\x7b\xc2\xaa\x16\xd3\x44\x8a\x77\x72\xa3\xd9\x6f\x29\x63\x19\xc6\x93\x5d\xbe\xe0\x20\xb8\xf1\x57\x16\x81\x44\x46\x65\xff\xc3\xf6\xed\x43\xb1\x83\x6e\x17\x4a\x18\xc4\xcc\xd8\x97\x27\x0a\x39\x8d\xc0\xc8\x4d\x94\xae\x69\x0c\x6b\x2e\xa2\x14\xb8\x00\x29\xee\xec\x6e\x96\x53\x7d\x93\xba\xdc\x55\x19\x4b\x01\xcf\x5c\xa7\x1a\x77\x50\x3c\xf2\x97\x3f\x5c\x9a\x75\x8b\x1f\x11\x5c\xcd\xba\xf6\x47\x5a\xff\x17\x00\x00\xff\xff\xea\x84\xb5\xa0\xbb\x25\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 9659, mode: os.FileMode(420), modTime: time.Unix(1686089086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
