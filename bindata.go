// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1686058218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\x6b\x6f\xe3\x38\x92\xdf\xf3\x2b\x6a\xd5\xb7\x63\x19\x90\x69\x51\x7e\x3b\x76\x6e\x77\x32\x3d\xdb\x0b\xf4\xee\x1e\x6e\x16\x73\xc0\x34\x1a\x18\x5a\xa2\x6c\x76\x24\x52\x20\x69\xc7\xee\x4c\xfe\xfb\xa1\x28\xd9\x91\x6c\x25\x9d\xdc\xdd\xe0\xd6\xc0\xf4\x50\xf5\x62\xbd\x58\x55\x64\xf7\xe2\x0f\x89\x8a\xed\xa1\xe0\xb0\xb1\x79\x76\x73\xb5\x28\xff\x77\xb5\xd8\x70\x96\xdc\x5c\x01\x00\x2c\xac\xb0\x19\xbf\x59\x0b\xbb\x13\x5f\x17\xfd\xf2\xab\xc4\x64\x42\xde\x81\xe6\xd9\xd2\x33\x1b\xa5\x6d\xbc\xb5\x20\x62\x25\x3d\x40\x89\x4b\x4f\xe4\x6c\xcd\xfb\xfb\x5e\x09\xdb\x68\x9e\x2e\xbd\x94\xed\xf0\x93\x88\x58\x79\x95\x14\x13\x6b\x51\xd8\x8a\xc7\xf2\xbd\xed\x7f\x61\x3b\x56\x42\x3d\x30\x3a\x5e\x7a\x1b\x6b\x0b\x33\xef\xf7\xb7\xb2\xb8\x5b\x93\x58\xe5\xfd\x9d\x30\x3d\xc9\xed\xbd\xd2\x77\x7d\x63\x99\x4c\x58\xa6\x24\xef\x6f\xf3\xa4\x8e\x22\xb9\x90\xe4\x8b\xf1\x6e\x16\xfd\x52\xde\x71\x4b\x7b\xc8\x78\x7d\xc7\xd8\x98\x4a\x1d\xfc\xa1\x13\x82\xd3\xd7\x4a\x25\x07\x78\x38\x7d\x3a\x02\x2e\xd6\x1b\x3b\x07\x1a\x86\x7f\xbc\x6e\x60\xee\x45\x62\x37\x6d\x88\x9c\xe9\xb5\x90\x73\x08\x9b\xe0\x82\x25\x89\x90\xeb\x06\xfc\xf1\xea\xb4\x7c\x97\x1f\x2a\x53\xde\xaa\xc1\xa4\x0e\xaf\x4b\x4c\x98\x65\x67\xc2\x0a\x65\x84\x15\x4a\xce\x21\x15\x7b\x9e\x34\xe5\xe9\x72\xa3\x33\xbd\xad\x2a\x2e\x60\xdf\x34\x91\x8c\x78\xde\xc4\xad\xd4\xbe\x67\xc4\x57\x87\x5e\x29\x9d\x70\xdd\x5b\xa9\xfd\xf5\xdb\x4c\x1d\x9c\xc3\x57\x2c\xbe\x5b\x6b\xb5\x95\x49\x2f\x56\x99\xd2\x73\x58\x6b\x7e\x68\xd2\xa8\x1d\xd7\x69\xa6\xee\xe7\x60\x62\xad\xb2\xac\x89\xad\xd8\xee\x37\xc2\xf2\x26\x26\x55\xd2\xa2\xca\x7c\x0e\x94\x44\x75\x7b\xea\x4e\x5e\x6d\xad\x55\xd2\xbc\xc5\xcf\x19\x4f\xed\x1c\xa2\x73\x0f\x39\x47\x3f\xbb\x4f\x2a\x32\xcb\xf5\xff\xd5\x36\xc3\x73\xa8\x33\x36\x65\xb9\xc8\x0e\x73\xf8\xb3\x16\x2c\x0b\xe0\x03\xcf\x76\xdc\x8a\x98\x05\x60\x98\x34\x3d\xc3\xb5\x48\xeb\xda\xe1\x9f\x8b\xbe\x3b\x62\x37\x57\x8b\x7e\x59\x49\xae\x16\x78\x8c\xaa\xe3\x97\x88\x1d\x88\x64\xe9\x9d\x92\x1b\x0f\x68\x22\x76\x15\xba\xd0\xdc\xa1\x31\x53\xbd\x9b\xef\xde\x4d\xc7\xe3\xe9\x35\xc4\x99\x88\xef\x40\x49\x60\x20\x55\xc2\xc1\x2a\x30\x9c\x83\xdd\x70\x88\x95\xb4\x5c\x5a\x03\x1b\xae\xf9\xa2\x5f\xe8\x63\x81\x62\x55\xd5\x39\xd6\x8f\xb5\xb0\x9b\xed\xca\x15\x10\x2d\xf8\x57\xbe\x52\x26\xde\xf4\xcb\xd2\xe6\x41\x9c\x31\x63\x96\x5e\x49\xd4\x8b\x95\x96\x5c\x7b\xc0\xb4\x60\xbd\x8c\xad\xb0\xcc\xfd\x2c\xf8\x3d\x18\xb5\xd5\x31\x47\x4d\xfe\x22\xec\x87\xed\xca\xbb\x59\x98\xdd\xfa\x32\x31\x97\xde\x34\xf4\xaa\xec\x2d\xd7\x3b\xc1\xef\xbf\x57\xfb\xa5\x17\x42\x08\xd1\xc8\xfd\xe7\x35\x18\x9d\xd7\x96\x5e\x2a\xb2\x6c\xfe\x2e\x4d\xd3\xeb\x2a\x13\x5d\xfe\xd6\x02\xcb\x56\x46\x65\x5b\xcb\xaf\x8f\x07\xb1\x3a\x3d\x6e\x79\x3a\xb1\x95\xf2\x1b\x91\x24\x5c\x2e\x3d\xab\xb7\xbc\x56\xe5\x4a\x5f\x33\xbb\x81\x64\xe9\xfd\x2d\x0c\x42\xf8\x48\xe9\x28\xa0\x74\x04\x1f\xe9\x20\xac\x16\xc3\x28\xa0\xc3\x08\x3e\x46\xa3\x30\x40\x95\xdd\x22\x84\x5f\x30\x64\xc8\xdc\x22\xaf\x01\xc1\x1f\xca\xa7\xd1\x94\x0c\x02\x1a\xce\x48\x08\xb7\x94\x0e\xc8\x34\x98\xcd\xc8\x04\x28\x9d\x91\x30\x98\xce\xc8\xb8\xbe\xbc\xa5\x51\x84\xeb\x08\x29\xa2\x90\x8c\x82\xc9\x14\x29\x9e\x96\xb7\x48\x1d\x05\x93\x88\x84\x40\xa3\x01\x19\x06\x93\x31\x19\xd4\x97\xb7\x34\x9a\x90\x41\x30\x0d\xc9\x0c\x68\x34\x22\xa3\x60\x3a\x71\x14\xa7\xa5\xdb\x65\x16\xcc\x26\x28\x7a\x10\x92\x71\x40\x43\x8a\xd4\x83\x21\x19\x06\x34\x1c\x90\xc8\xbb\x30\x06\x63\xb3\xf4\xe2\xad\xd6\x5c\xda\x5b\x8c\x8e\x77\x0c\x9b\xd5\x4c\x9a\x54\xe9\xbc\xa7\xb4\x70\xa5\x90\x0e\xc2\x62\x0f\x34\x1c\x17\xfb\xeb\x53\x82\xa9\xd8\xaa\x1e\xd3\xf9\x9b\x5d\x48\x47\xc4\x85\xa5\x74\xe1\x90\xcc\xdc\x07\x05\x4a\xa7\x64\x12\x50\x3a\x26\x23\xe7\xc4\xa9\x83\x0f\x31\x8c\x03\x44\x84\xd4\x39\x6c\x30\x46\x63\x67\x24\x02\x3a\x98\xe1\x72\x4a\x86\x40\x87\x11\x89\x70\xe9\x28\x30\x2c\xd3\xa9\x73\xe9\x04\x3d\x3d\x74\x14\x08\x1d\x4d\xdd\xae\xc3\x29\x19\x05\xa3\x01\x82\x47\x43\x12\x06\x23\x8a\xe2\x46\x33\x32\xc1\x25\x52\x8c\x43\x32\x08\x86\x33\xa4\x18\x0f\x48\x14\x0c\x07\xe8\xdd\x09\x25\xc3\x60\x18\x12\x0a\xb7\xb5\x35\x9d\x8c\x09\x0d\x86\x11\xea\x3d\x99\xe2\x2e\x63\x12\xc1\x2d\x9d\x0e\x08\xc5\x1d\xc7\x40\xa7\x13\x12\x05\x63\x4a\xa6\x40\x67\x21\x99\x05\x63\x34\xec\x96\xce\x86\x64\x14\x8c\x31\x99\xe8\x6c\x42\x26\xc1\x64\x40\x22\x88\xc2\x90\xd0\x60\x82\xe1\xbc\x8d\x5c\x8a\x4d\x43\x04\xd3\x31\xe6\xc1\x90\xcc\xea\xcb\xdb\x88\x46\x64\x12\xcc\x06\x84\x42\x14\x3a\xd7\x8c\x49\x08\x51\x38\x22\x43\x5c\xa2\x8c\x70\x44\x68\x40\xc3\x88\x0c\x21\x0a\x07\xe8\xfc\x70\xe2\x34\x71\xb9\x4c\x51\xef\x5b\x3a\xa5\x18\x88\x68\x8a\x89\x33\x76\x88\xc8\x19\x34\x9a\xb8\xa0\x0c\x9d\xcd\xa3\x89\x8b\xd6\x18\x89\x46\x63\x44\x44\x2e\x2f\x47\x91\x5b\xa3\x42\x1f\xe9\x90\xe2\x16\x83\xb1\x13\x3b\x70\x71\x1c\x4c\xf0\x04\x0c\x29\xe6\xe6\xd0\xe5\xe6\x90\x22\x1c\xff\x84\x5f\x5e\x97\x9d\xf5\xb4\xc3\x2a\x7c\x99\x77\x8b\xbe\xd9\xad\x6f\x16\x7d\x56\x9f\x8f\x9e\xd0\xa4\x51\x12\xe7\x1b\xec\x9d\x40\x8e\x69\x7c\xd6\x7d\x98\x14\x39\x2b\xab\x14\x52\xc4\xcc\xf6\xee\xd9\x8e\xc3\x68\x1c\xe6\x06\x38\x33\xbc\x27\x64\x4f\x6d\x6d\x5b\x43\xfb\xd3\x1d\x3f\xa4\x9a\xe5\xdc\x34\x99\x1f\xae\x1a\x7b\x84\x7f\x0c\x1a\xdf\x38\x1a\x9c\xa9\x81\xbf\xd3\x79\x9c\x83\x56\x96\x59\xee\x87\xdd\x06\xd1\x63\x53\x6c\x74\x2e\x77\xfc\x4a\xb1\xbd\x68\x94\xf0\xf5\x8b\xb2\x87\xe7\xb2\xa7\xaf\x94\x4d\xc3\x16\xd1\x2d\x9b\xfc\x29\xe7\x89\x60\xe0\xe7\x6c\xdf\x2b\x07\xa3\x51\x18\x16\xfb\xee\xd9\x26\x6f\x8a\x25\x34\xe3\x29\x95\xe4\x2f\xd9\xd8\x94\xfd\x5a\xa9\xaf\xcc\x92\x73\xc3\xa1\x3e\x66\x40\x7d\xac\xa8\x86\xaf\x5a\xab\x5b\x94\x20\x87\x2d\x36\x07\x23\x62\xe3\x81\x92\x6e\xa4\x58\x7a\xc6\xaa\xc2\xef\x7a\x37\x3f\xfd\xf3\x1f\xff\xb1\xe8\x97\xa4\xed\xbc\x69\x7a\x9f\xd4\x18\xf1\x13\x19\x7f\xfc\xf1\xbf\x7e\x68\x32\xd6\xc7\x99\xa3\x5a\xe5\xac\x56\xd7\xea\x44\x73\x82\xb8\x39\xe3\xe6\xc2\x5b\x0b\x21\x8b\xed\xf1\x8a\x14\x6f\x78\x7c\xb7\x52\x7b\x0f\x24\xcb\xb1\xeb\x1c\x0a\xee\xc1\x8e\x65\x5b\x44\xaa\x3c\x17\xd6\x03\x47\xc4\x13\xe8\xb7\x08\x33\x05\x93\xc7\x96\x55\x0d\xba\x9a\x27\xde\x4d\xc9\xbb\xe8\x23\xfe\x4c\xaf\xfe\x99\x62\x35\xfb\x7e\x2f\x4b\xac\xe6\xfc\xcd\x76\xac\x35\xe7\xd2\xbb\x41\xde\x7f\x15\x3b\x56\x99\x5a\xbd\xd9\x8e\x55\x86\xa3\x1a\xb2\xbe\xd5\x8c\xfa\xf2\xc5\x9b\xf5\x13\x77\xca\x6d\xbc\xf1\x3b\xac\x10\x7d\x21\x53\xd5\xe9\x12\xbb\xe1\xd2\xd7\xdc\x14\x4a\x1a\x0e\xcb\x1b\x38\xae\xc9\x17\xa3\xa4\xdf\xad\x28\xdc\x55\x72\x79\x03\x89\x8a\xb7\x39\x97\x96\xb8\xc7\x01\x58\x02\x22\x48\x22\x34\x8f\xad\xd2\x87\xee\x53\x95\x88\x95\x34\x16\xd4\xea\x0b\x8f\xad\x81\x25\x7c\x2a\xdd\x13\x40\x19\xee\x00\x8e\x09\xfc\xf9\xfa\x8c\x47\xf3\xb4\x64\xc0\xfb\x04\x12\x6a\x9e\x2b\xeb\x58\x2c\x5b\x23\xfd\x89\xc1\x2a\xd7\xf8\x60\x09\x3e\x9a\xde\x45\x15\x1f\xce\xae\x77\x28\x32\x67\x45\x21\xe4\x1a\x96\x20\xf9\x3d\xfc\x8d\x15\xfe\xa7\x8b\xe0\x7c\xea\xa0\x82\x9d\x00\x3a\x18\x92\xce\xe7\xa0\x85\x02\x55\x47\x0a\x97\x7c\xed\x24\xa5\x55\x48\xa4\x79\xd2\x4e\x82\x76\x55\x52\x0e\xcf\xec\xc3\xd6\x2f\x13\x94\x2e\x79\x99\xe6\xc3\xfb\x3f\xff\x50\x9a\xc3\xe2\xbb\xce\xe7\x06\xc5\xe7\xee\x75\xb3\xa0\x6b\x6e\xb7\x5a\x1e\x1d\x45\xd6\xdc\x56\x1e\xfd\xed\x37\xe8\x14\x42\xde\x75\xda\x3a\x91\x55\x1f\x31\x3d\xd1\xff\x7b\xe7\xfc\x2a\xde\x44\xc8\x38\xdb\x26\xdc\xf8\x7b\x52\x8a\xf9\x77\xd8\x13\x91\x10\xb3\x5d\x19\xab\xfd\x30\x80\x69\x17\xe6\x0e\x56\x53\x64\xc7\xb4\xbb\xf1\x99\x2a\x50\x3b\x61\xc8\x0f\xcc\xb2\x9f\xb8\xf5\x3f\xa1\xca\x47\xc2\x32\xaa\x8e\xd4\x5d\xd4\x9a\xe4\x08\xf2\x1d\x32\x80\x07\x28\x8b\xf1\x1c\x1c\xc4\x29\x59\x42\x3e\xe1\xb7\xd3\xee\x33\x3c\x76\x1b\x3a\xf0\x64\xfd\xbc\x0e\xe7\x19\x5e\x60\x6f\x43\xea\x87\xb6\x17\x0b\x0f\x07\x16\x2f\x68\x7d\xe6\x68\xc3\xb1\xad\x55\xff\xc9\xcb\x57\x07\xbc\xc5\x35\xb1\x55\x47\x9b\xb7\xb4\x59\x2e\xd9\x2a\xe3\x49\x1b\x17\xb8\x87\x12\x2d\xb9\xf9\xb0\xb5\x6d\xbc\xf8\x5b\x6b\xb6\x13\xd6\x35\x6a\x96\xdd\xa2\x69\x4c\xda\x39\xf4\x68\x18\x86\xe1\xa5\x3c\xe7\x00\x2e\xad\x66\xd9\x5f\x1c\xe7\x61\x0e\xcf\x90\x25\x2c\x2f\xdc\xb3\x0f\x6d\xc7\xb3\x9d\x12\xc9\x3f\x76\x5c\x67\xac\x78\x96\xc8\x14\x5a\xc8\xf5\x47\x2e\xd7\xee\xd1\x6d\xd4\xb2\xd7\xe3\x25\x28\x67\xfb\x9f\x79\xa6\xe2\x52\x3d\x32\x6a\xa1\x10\xb2\x46\x71\x89\xb7\x22\xe7\xc6\x72\x54\xec\xea\x85\xcd\x5c\xc6\xb4\xb9\xd6\xe4\x4a\xa1\xc6\xed\x4e\x3f\x05\x2d\x65\x99\x69\x89\x9a\xd3\xe0\x50\xf0\x39\x74\x62\x25\xad\x90\x5b\xb5\x35\x9d\xd7\x58\x5e\x75\x17\xef\x5d\xe8\x7e\xde\x25\x45\x95\xa0\xad\x5e\x61\x5a\xab\xfb\x56\x7b\x9c\x46\xea\x39\x0c\x7c\x3b\x11\x8f\x3f\x13\xb3\x8c\xff\xc8\xb0\x6d\x38\x25\x5a\x09\x1f\x2f\x4d\x7d\x29\x0a\xee\xcc\xb7\xe9\x96\x2a\xf9\x6c\xe2\x1f\x3d\xe5\x5e\x00\x2f\xaf\x59\x8f\xcf\x8d\xa5\x17\x95\xa0\x7a\xa1\x3b\x2f\x04\x65\x43\x68\x73\x07\x76\x93\x36\x38\xf6\xa1\x36\x38\xf6\x8d\x36\x38\x16\xfa\x56\xf9\x6c\x5d\x82\x5f\x50\x1a\xd3\x8a\x09\xe9\xf4\x3e\x35\xf7\x35\xb7\xef\x33\x8e\xcb\xef\x0f\x7f\x4d\xfc\xce\xe9\xf5\xae\xd3\x3d\x63\x2f\xe7\x82\xe7\x39\x11\xdf\xb9\x2c\x9a\xc7\x97\xee\xa7\x12\xfb\xf7\x12\xe2\x9f\xf4\xc1\xd2\x5d\xc5\xf3\x54\xe7\x83\xaa\x32\x3f\x06\xc7\xb2\x5b\xeb\x09\xc7\xbf\x08\x50\xd2\xef\xb8\xa9\xbd\x13\x80\x5f\x30\xcd\x72\xd3\x32\x17\x88\xf4\x88\x24\x4e\xfc\xa7\xf0\xf3\xf9\xfd\x09\xaa\x8c\x42\x2d\x91\xc4\x35\xc5\x73\x9e\xeb\x0b\x16\x94\x7c\xd1\x06\x4f\xbd\xa6\xdb\xb6\x0b\x9c\x46\xb3\x5f\x71\x34\xab\xb8\xfb\xff\xf6\x70\x62\x7b\x3c\x7e\x88\xe4\xf1\xd7\x97\xa6\x36\x9c\xfd\x4e\x53\x5b\xf5\x5a\xea\x06\x37\x9c\xd3\x84\x94\x5c\xff\x93\xef\x2d\x2c\x8f\x2f\xa9\x2d\x06\x3c\x02\xcf\x0c\x77\x76\xe0\x28\xf6\x3f\x34\x02\x59\x1b\x16\x98\xff\x1f\x13\x4e\x0a\xc0\x72\xb9\x04\x0f\xcf\x8a\xf7\x5a\xf5\x91\xf8\x77\x57\xf5\x99\xfa\x02\xa7\xa1\xac\xf6\xe2\x5e\x3f\x49\x89\x48\x53\xae\xb9\x8c\x31\x41\xfd\x54\x68\x63\x03\x60\x52\xd9\x0d\x1e\x9e\x58\xe5\x05\xd3\xc7\x79\x47\x1b\x4b\xca\xf2\xe4\xbb\x31\xfe\x0f\x15\x1d\x31\x2a\xe7\xfe\x0a\x41\x15\x83\xcf\x02\x58\x75\xbb\xf5\x8d\xd2\xad\x8c\xf1\xb0\x41\xa6\x58\xe2\x9f\xfb\xae\x76\xa5\x58\x6b\x56\x6c\x5e\x7f\xa7\xc0\x8f\xcb\x83\x09\xc7\x3a\x4e\x70\xc6\xdd\x71\xff\xc9\x4e\xff\xe9\x18\x76\x03\x40\x76\x52\x4d\x79\xa5\xd6\x28\x8c\x11\x91\xb8\x48\xaf\x88\x48\xba\x2d\xfe\x2e\x65\xb0\x24\xa9\x0b\xae\xcb\x6a\x6c\xf2\x9c\x60\x92\xb3\xc2\xdf\x23\xdc\x7f\x00\x91\x94\x93\x6c\x00\xee\xb2\x36\x07\xbb\x11\x86\x54\xb3\xb1\xbf\xef\x06\xe0\x6e\x4b\x47\xa2\xaa\xe1\x54\x44\xee\x02\x73\x1c\x93\x83\xaa\xdb\x97\x9f\x0d\x3e\x78\x6c\x46\xe5\xf8\x73\x15\xb1\xc5\x57\x25\xbc\xee\x2b\x07\x69\x9a\x94\x6a\x95\x57\x46\xb9\xe5\x77\xdf\x01\x23\x56\x55\x20\xab\xda\x1c\x58\x0a\x6e\x73\x60\xb5\x41\x63\xe7\xff\xcd\x6e\x8f\xdd\xd6\xbf\x0a\x3b\xe5\x63\xf9\x9a\x73\x96\x3f\xc7\x36\x50\x8d\xca\x04\x89\x7e\x12\xf9\x36\x73\xa3\xad\xff\x8c\xc8\xf4\x3e\xc1\x53\xd4\xd2\x28\x5e\x2f\xaf\x9d\x9a\xad\x44\x26\xbe\x72\x7f\x14\x86\xdf\xa6\xd5\xf6\x9b\xaa\x96\x87\xf0\x09\x65\xb8\xfd\xab\xb4\x5c\xef\x58\xe6\x23\x2e\x80\x41\xe8\xb6\x7a\x2a\x14\x97\xcd\xd9\x7c\x7f\xf8\x3b\xcb\xb9\x5f\xbe\x5f\x74\x49\xaa\xf4\x7b\x16\x6f\xfc\xd3\x2d\xba\x39\x47\x1c\x0a\x8e\x01\x7f\xbf\xe3\xd2\x7e\x14\xc6\x72\xc9\xb5\xef\xc5\x1b\x26\xd7\x78\x2d\xf7\xdb\x2e\xde\x70\x6a\xf6\x0f\xe5\xfb\x48\x70\x7a\x19\x79\x84\x25\x70\x62\x99\x5e\x73\x7b\x99\x5f\xd5\xed\xcc\xf1\x7c\xc6\xd2\x59\x72\x3d\x73\x92\x71\x2c\x20\x9a\xa7\x9a\x9b\xcd\x79\x30\x1e\xbb\xdd\xea\xa1\xe4\xf8\x4f\x02\x16\xfd\xf2\xef\x26\xaf\x16\x7d\xf7\xcf\x1f\xfe\x3b\x00\x00\xff\xff\x69\x70\xe6\x26\x15\x21\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 8469, mode: os.FileMode(420), modTime: time.Unix(1686068959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
