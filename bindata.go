// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1568978470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x7b\x8f\xe2\x38\x12\xff\xbf\x3f\x85\x37\x73\xb3\x04\x29\x18\x3b\x0f\x5e\x0d\xdc\xde\xb2\x4f\x69\xf6\xf6\x74\xb3\xda\x93\x76\x34\xd2\x9a\xc4\x01\x4f\x27\x76\x64\x1b\x9a\x9e\x5e\xbe\xfb\xa9\x9c\x00\x81\xa6\x5b\xad\x91\xee\x22\x4d\x63\x57\xfd\xaa\x5c\x55\x2e\xbb\x2a\x99\xe9\x57\x99\x4a\xed\x43\xc5\xd1\xda\x96\xc5\xfc\x66\x7a\xf8\xe1\x2c\x9b\xdf\x20\x34\xb5\xc2\x16\x7c\xbe\x12\x76\x2b\x3e\x4f\xfb\xf5\x0c\xe8\x85\x90\x77\x48\xf3\x62\xe6\x99\xb5\xd2\x36\xdd\x58\x24\x52\x25\x3d\x04\xca\x66\x9e\x28\xd9\x8a\xf7\x77\xbd\x9a\xb6\xd6\x3c\x9f\x79\x39\xdb\xc2\x14\x8b\x54\x79\x4e\x87\x49\xb5\xa8\x6c\x23\x61\xf9\xce\xf6\x3f\xb1\x2d\xab\xa9\x1e\x32\x3a\x9d\x79\x6b\x6b\x2b\x33\xe9\xf7\x37\xb2\xba\x5b\xe1\x54\x95\xfd\xad\x30\x3d\xc9\xed\xbd\xd2\x77\xdf\x14\xcc\x72\x63\xfb\x99\x30\xb6\x4d\xc7\xa5\x90\xf8\x93\xf1\xe6\xd3\x7e\xad\xec\x64\x71\x6d\xc9\x97\x6b\x4d\x8d\xf1\x1a\xb7\xed\x43\xc1\xcd\x9a\x73\xeb\xb5\x3d\x70\x80\x7e\xed\x1e\x20\x2e\x79\xc0\x41\x2e\xd8\xc1\x52\x65\x0f\xe8\xd1\xcd\x1d\x8d\x8b\xd5\xda\x4e\x10\x25\xe4\xed\xed\x91\x7a\x2f\x32\xbb\xbe\x24\x96\x4c\xaf\x84\x9c\x20\x72\x22\x55\x2c\xcb\x84\x5c\x1d\x69\xfb\x1b\xf7\xf3\xa6\x7c\x68\xcc\x7f\xed\x4a\xc3\x03\xed\xa0\x21\x63\x96\xb5\x84\x2b\x65\x84\x15\x4a\x4e\x50\x2e\x76\x3c\x3b\xc9\xeb\x5a\x69\xcb\x26\xab\xaa\xb3\xf9\x8b\x66\xe3\x84\x97\x27\xfa\x52\xed\x7a\x46\x7c\x76\xac\xa5\xd2\x19\xd7\xbd\xa5\xda\xdd\xbe\xce\x85\xa8\x4d\x5b\xb2\xf4\x6e\xa5\xd5\x46\x66\xbd\x54\x15\x4a\x4f\xd0\x4a\xf3\x87\x13\x5f\x6d\xb9\xce\x0b\x75\x3f\x41\x26\xd5\xaa\x28\x4e\x9c\x06\x7e\xbf\x16\x96\x9f\xa8\xb9\x92\x16\x4c\xe3\x13\x44\x71\x78\xb0\xf9\x10\xac\xe5\xc6\x5a\x25\xcd\x6b\xe2\x55\xf0\xdc\x4e\x50\xd8\xf6\xda\x05\xac\xa5\x13\xa1\x69\xdf\x65\xd1\xfc\x66\xda\xaf\x8f\xe4\x14\xb2\xa6\x4e\xa2\x69\x26\xb6\x48\x64\x33\xef\xb8\xc7\x90\xf1\x99\xd8\x36\xec\x4a\x73\xc7\x86\x0d\x04\x4e\xa5\x79\xc3\x61\x17\xe7\x60\x25\xec\x7a\xb3\x74\x07\x41\x0b\xfe\x99\x2f\x95\x49\xd7\xfd\xfa\xd0\x7b\x28\x2d\x98\x31\x33\xaf\x06\xf5\x52\xa5\x25\xd7\x1e\x62\x5a\xb0\x5e\xc1\x96\x70\x16\x7e\x17\xfc\x1e\x19\xb5\xd1\x29\x47\x4a\xa2\x1f\x85\xfd\x69\xb3\xf4\xe6\x53\xb3\x5d\xd5\x7b\x32\xf3\x46\xc4\x6b\x36\xad\x1e\x6f\x05\xbf\xff\x56\xed\x66\x1e\x41\x04\x85\x89\xfb\xe7\x21\xe7\xec\xcc\xcb\x45\x51\x4c\xde\xe4\x79\x7e\xdb\x6c\xc2\x1b\x9a\xd0\x84\x46\xb7\xad\x68\xb2\xa5\x51\xc5\xc6\xf2\xdb\x43\x9a\x35\x79\xe2\x86\xc7\x5c\x6c\xec\x5c\x8b\x2c\xe3\x72\xe6\x59\xbd\xe1\xde\x7c\x5a\x31\xbb\x46\xd9\xcc\xfb\x85\x04\x04\xbd\xa3\x34\x09\x28\x4d\xd0\x3b\x1a\x91\x66\x10\x87\x01\x8d\x43\xf4\x2e\x4c\x48\x00\xc6\xb9\x01\x41\x7f\xb8\x30\x32\xbb\x6e\xa9\xa0\xe1\x08\x47\x01\x25\x63\x4c\xd0\x82\xd2\x08\x8f\x82\xf1\x18\x0f\x11\xa5\x63\x4c\x82\xd1\x18\x0f\xda\xc3\x05\x0d\x43\x18\x87\x80\x08\x09\x4e\x82\xe1\x08\x10\xa7\xe1\x02\xd0\x61\x30\x0c\x31\x41\x34\x8c\x70\x1c\x0c\x07\x38\x6a\x0f\x17\x34\x1c\xe2\x28\x18\x11\x3c\x46\x34\x4c\x70\x12\x8c\x86\x0e\x71\x1c\xba\x55\xc6\xc1\x78\x08\xaa\x23\x82\x07\x01\x25\x14\xd0\x51\x8c\xe3\x80\x92\x08\x87\x1e\x82\x20\xcf\xbc\x74\xa3\x35\x97\x76\x01\x61\x3e\xc6\xdf\x6a\x26\x4d\xae\x74\xd9\x53\x5a\xb8\x23\x4b\x23\x52\xed\x10\x25\x83\x6a\x77\x7b\xcc\x08\x95\x5a\xd5\x63\xba\xbc\x16\x15\x9a\x60\x17\xcc\x3a\x2a\x31\x1e\xbb\x09\x45\x94\x8e\xf0\x30\xa0\x74\x80\x13\x17\x97\x91\xa3\xc7\x10\xfc\x08\x18\x84\xba\x18\x44\x03\xb0\x7f\x8c\x43\x44\xa3\x31\x0c\x47\x38\x46\x34\x0e\x71\x08\x43\x87\x80\x48\x8f\x46\x2e\x4a\x43\x08\x5e\xec\x10\x40\x4d\x46\x6e\xd5\x78\x84\x93\x20\x89\x80\x9c\xc4\x98\x04\x09\x05\x75\xc9\x18\x0f\x61\x08\x88\x01\xc1\x51\x10\x8f\x01\x31\x88\x70\x18\xc4\x11\x04\x6c\x48\x71\x1c\xc4\x04\x53\xb4\x68\x8d\xe9\x70\x80\x69\x10\x87\x60\xf7\x70\x04\xab\x0c\x70\x88\x16\x74\x14\x61\x0a\x2b\x0e\x10\x1d\x0d\x71\x18\x0c\x28\x1e\x21\x3a\x26\x78\x1c\x0c\xc0\xb1\x05\x1d\xc7\x38\x09\x06\x90\x1f\x74\x3c\xc4\xc3\x60\x18\xe1\x10\x85\x84\x60\x1a\x0c\x61\x87\x16\xa1\xcb\x9a\x11\x01\x32\x1d\xc0\xd6\xc6\x78\xdc\x1e\x2e\x42\x1a\xe2\x61\x30\x8e\x30\x45\x21\x71\xa1\x19\x60\x82\x42\x92\xe0\x18\x86\xa0\x83\x24\x98\x06\x94\x84\x38\x46\x21\x89\x20\xf8\x64\xe8\x2c\x71\xe9\x49\xc1\xee\x05\x1d\x51\xd8\x88\x70\x04\xb9\x30\x70\x8c\xd0\x39\x94\x0c\xdd\xa6\xc4\xce\xe7\x64\xe8\x76\x6b\x00\xa0\x64\x00\x8c\xd0\xa5\x5a\x12\xba\x31\x18\xf4\x8e\xc6\x14\x96\x88\x06\x4e\x6d\xe4\xf6\x31\x1a\x42\x52\xc7\x14\xd2\x2d\x76\xe9\x16\x53\xa0\xc3\x5f\xf4\xc7\xf5\x84\x6b\x67\x12\xdc\x6c\xa7\x54\xea\x9b\xed\x6a\x3e\xed\xb3\x79\x5d\x47\xe7\xf8\xec\xfe\x99\xac\xe1\xde\x46\xf8\x90\x82\x8f\x4c\x8a\x92\xb9\x9b\x01\x48\x29\xb3\xbd\x7b\xb6\xe5\x28\x19\x90\xd2\x20\xce\x0c\xef\x09\xd9\x53\x1b\xbb\xff\xe6\x8e\x3f\xe4\x9a\x95\xdc\xa0\x36\xf2\x91\xbc\x0d\xa0\x98\x3c\x1e\x73\x7f\xa2\x95\x65\x96\xfb\xa4\xbb\x0f\xc9\xdb\x60\x70\x8d\xd7\x0b\x93\x8c\xaf\xba\xfb\x98\xbc\x0d\x46\xd7\x00\x94\x38\xfe\xfe\x9b\x92\x67\x82\x21\xbf\x64\xbb\x5e\x5d\xa5\x12\x42\xaa\x5d\xf7\xf1\xd5\x6e\x49\x25\xf9\xfe\x1c\xfd\x25\xee\xef\x8f\x15\xe5\xac\x84\x34\x75\xab\x69\x4f\x1c\xab\x26\x39\x6e\xb5\x7e\x30\x22\x35\x1e\x52\x32\x2d\x44\x7a\x07\xdd\x8f\xaa\xfc\xae\x37\x7f\xff\xdb\xaf\xff\x9a\xf6\x6b\xe8\x75\xd9\x3c\xbf\xcf\x5a\x82\x30\x05\xc1\x1f\x7e\xf8\xcf\x77\xe7\x82\x4d\xe9\xaa\xc7\x2f\xb6\x86\x35\x3e\xe7\x36\x5d\xfb\x9d\x3e\xab\x44\x5f\xc8\x5c\x75\xba\xd8\xae\xb9\xf4\x35\x37\x95\x92\x86\xa3\xd9\x1c\x1d\xc6\xf8\x93\x51\xd2\xef\x36\x08\xd7\xd1\xcc\xe6\x28\x53\xe9\xa6\xe4\xd2\x62\xd7\xd6\xa2\x19\x02\x06\xce\x84\xe6\xa9\x55\xfa\xa1\x7b\xf4\xe7\xa6\x6e\x07\xa4\xb1\x48\x2d\x3f\xf1\xd4\x1a\x34\x43\x1f\xbc\x65\xa1\x96\x5e\x80\x3c\xab\x39\x87\xdf\x54\x95\xa5\xb0\xde\xc7\xdb\x16\x5e\xf3\xbc\x06\x43\xf9\x06\x90\xe6\xa5\xb2\x0e\x6e\xd9\x0a\xb0\x37\x75\xe5\x77\x07\x02\xcd\x90\x0f\x3e\x77\xc1\xbc\xc7\x56\x27\x02\xaa\x4a\x56\x55\x42\xae\xd0\x0c\x49\x7e\x8f\x7e\x61\x95\xff\xe1\x88\x80\xe7\x43\x07\x0c\xea\x04\xa8\xb3\x2c\x36\xbc\xf3\x31\xb8\xe0\x82\x99\xc0\x5d\x69\xce\xe5\x53\x76\x6d\x3d\x00\x34\xcf\x9e\xb2\xc1\xfe\x46\xfa\xe1\x8a\x6e\xb6\x7a\x9e\x59\xbb\xfc\x3c\xff\xa7\xef\xff\xf1\x5d\x6d\x36\x4b\xef\x3a\x1f\x8f\xdc\x8f\xdd\xdb\x16\xf2\xd4\x68\x72\xbb\xd1\xf2\x10\x0e\xbc\xe2\xb6\x89\xd9\x5f\x7f\xa1\x4e\x25\xe4\x5d\xa7\xdd\x92\x59\xf5\x0e\x9a\x14\x88\xec\xce\x85\xb5\xd9\x41\x2c\x64\x5a\x6c\x32\x6e\xfc\x1d\xae\xc5\xff\x8e\x76\x58\x64\xd8\x6c\x96\xc6\x6a\x9f\x04\x68\xd4\x45\x13\x47\xab\xcd\x70\x7f\xb6\x4c\x23\xa9\x32\x6e\x9a\x6d\xd8\x0a\x83\xbf\x63\x96\xbd\xe7\xd6\xff\x70\x30\x18\x40\x3c\x5b\x3d\x0f\x6a\x27\x54\x05\xc7\x16\x90\x8f\x97\x7d\xac\x07\x17\x92\x17\x3c\x69\x7a\x2f\xe9\x6c\x63\xd5\xbf\x79\xdd\x93\x42\x87\x73\xe2\x34\x07\x77\xd2\xd2\x0d\x0f\x97\x6c\x59\xf0\xec\x12\x8d\x5c\xbb\xac\x25\x37\x3f\x6d\xec\xa5\x0c\x3c\x2b\xcd\xb6\xc2\xba\x7b\x86\x15\x0b\x30\x9f\x49\x3b\x41\x3d\x4a\x08\x21\xc1\x13\x78\xca\xa5\xd5\xac\xf8\xd1\x49\x3d\x4c\xd0\x15\x48\xc6\xca\xca\x35\xf9\xf4\x29\x8f\x6d\x95\xc8\x7e\xdd\x72\x5d\xb0\xea\x2a\xc0\x54\x5a\xc8\xd5\x3b\x2e\x57\xee\x15\x29\xb9\xd0\xbf\x3f\x9f\x96\x6c\xf7\x3b\x2f\x54\x5a\x9b\x82\x93\x0b\xae\x90\x2d\xee\x39\xcf\x8a\x92\x1b\xcb\xc1\x88\x9b\x2b\xca\xdd\x4e\x5f\x86\xcb\x94\x4a\x81\x55\x4f\x83\x78\x0c\x7e\xce\x0a\xc3\x9f\x7a\x05\xc9\x38\x41\x9d\x54\x49\x2b\xe4\x46\x6d\x4c\xe7\x25\xaf\x9a\x97\x14\xef\x0d\x71\x8f\x77\xce\x6d\x12\xe9\x89\xb7\x4c\x6b\x75\xff\xc4\x66\xb7\xba\xba\x46\x45\x2f\x27\xcd\xd1\xe9\x94\x15\xfc\x07\x06\xb7\xa7\x5b\xf4\x09\x68\x7f\x73\x7d\xd6\x72\xca\x1d\xae\x4b\x1b\xe0\xa5\xeb\x9a\x5d\x07\xef\xdd\x3b\x9a\xf7\x9c\xf2\xfa\x3a\x38\x3b\x75\x10\x5d\x26\xa0\x86\xce\x4e\x65\x60\xc5\xed\xf7\x05\x87\xe1\xb7\x0f\x3f\x67\x7e\xe7\xf8\x5e\xd5\xe9\xb6\x44\xeb\xea\xf1\xbc\x14\xf0\x3b\xdd\x76\x0d\x38\xbc\x81\x9f\x2e\x83\x7f\xd6\x14\xff\x68\x46\x80\x1e\x6b\xcf\x83\xe6\xe2\xd8\x07\x87\x9b\xa1\x51\x75\xf8\x0a\xa1\xa4\xdf\x71\xb5\xb4\x13\x20\xbf\x62\x9a\x95\xe6\xa2\x5a\x88\xfc\xc0\xc0\x4e\xe5\x07\xf2\xb1\x7b\x1e\x3a\x20\x83\x35\xc0\x75\xf7\xe7\x25\xfc\xf6\x0c\x0e\x0a\x9f\xdc\x9a\x80\xad\x2f\xce\xee\x95\x8d\xa9\x8b\xf3\x9f\x50\x9b\x1b\xc9\xfe\xdf\x1e\x8f\x22\xfb\xc3\x44\x64\xfb\x3f\x5f\x2a\xdb\x50\xf9\x8f\x65\x1b\x82\xc5\xa5\x75\x95\x1b\x0a\xb5\x90\x92\xeb\xdf\xf8\xce\xa2\x19\x6a\x78\x17\x86\xef\x11\x2f\x0c\x77\xf6\x43\x1d\xfe\x02\xe3\x41\xec\xcc\x72\xf3\xff\x37\xfd\xb8\x38\x9a\xcd\x66\xc8\x83\x6a\xe9\xbd\xc6\x6c\x00\xfe\x4f\x4d\x3c\x9d\xb0\xcb\xe2\xdc\x7c\xc0\x38\x54\xba\x4c\xe4\x39\xd7\x5c\xa6\x90\x75\x7e\x2e\xb4\xb1\x01\x62\x52\xd9\x35\x64\x7e\xaa\xca\x8a\xe9\xba\xe7\x71\x3c\x9c\x8b\xc2\x72\xed\xbb\x26\xed\xab\x06\x87\x8d\x2a\xb9\xbf\x04\x52\x23\xe0\xb3\x00\x2d\xbb\xdd\xc3\x22\xf9\x46\xa6\x70\x60\x50\xa1\x58\xe6\xb7\x03\xd4\x74\x8a\x10\x98\x95\x66\xd5\xfa\xf5\x9d\x22\x4c\xce\x0f\xd7\xe1\xf8\x18\x0c\x5d\xcd\x96\xfb\x27\xdf\xfc\xd3\x79\xea\x06\x08\x44\x71\x73\xa4\x6b\x4b\x41\x11\xc3\x22\x73\xdb\xb8\xc4\x22\xeb\x5e\x04\xb4\x96\x67\x59\xd6\x56\xda\xd6\x73\xb6\xc0\x73\x4a\x71\xc9\x2a\x7f\x07\x74\xff\x11\x89\xac\xee\x60\x02\xe4\x3e\xd5\x4c\x90\x5d\x0b\x83\x9b\x9e\xc8\xdf\x75\x03\xe4\x7a\xdf\x03\xa8\xb9\x4f\x1b\x90\x6b\x49\x0f\xed\x51\xd0\x14\xa6\x7a\x7a\x26\x87\xf6\xa7\x5d\x38\x3c\xee\x16\xbb\x12\xa3\x9a\xde\x8e\x91\xa3\x9c\xbb\x93\x6b\x55\x36\x0e\xb9\xe1\xd7\x5f\x23\x86\xad\x6a\x48\x56\x5d\x06\xae\x56\x7a\x2d\x70\x8d\xf2\xb3\x55\xbf\x74\xa5\x7d\xf7\xec\x5b\xdf\x31\xdf\xea\x77\xa1\x56\x8e\x1c\xae\xea\xa6\xfb\xc2\x00\x78\x2f\xca\x4d\xe1\x3a\x27\xff\x42\x4d\x7e\x9f\xc1\xa9\xb8\xb8\xc4\x5f\xa7\xe3\x3a\x92\x2d\x45\x21\x3e\x73\x3f\x21\xe4\x65\x9c\xb6\xcf\x9a\x55\x1f\xa2\x9a\x64\xb8\xfd\x59\x5a\xae\xb7\xac\xf0\x81\x1e\xa0\x88\x1c\x55\x9f\xbe\xb1\x4f\xfb\xf5\xb7\xc9\x69\xdf\xfd\x27\xc2\x7f\x03\x00\x00\xff\xff\xd1\xd9\x48\xec\x5b\x18\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 6235, mode: os.FileMode(420), modTime: time.Unix(1581517720, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
