// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xff\x6f\xeb\xb6\x11\xff\x3d\x7f\xc5\x55\xdd\x2a\x09\x50\x24\xbf\x16\xc1\x06\xc7\xf6\x86\xb5\x7b\x5b\x81\x6e\x1d\xf6\x8a\xed\x87\x20\x40\x29\xf1\x24\x33\x91\x48\x81\x3c\x7f\x7b\x79\xfe\xdf\x07\x92\x92\x2c\xcb\x4e\x10\xac\xfa\x21\x12\xef\x73\x77\xbc\x3b\xde\x17\x3a\x8b\xaf\xb8\x2a\xe8\xd0\x22\xac\xa9\xa9\x57\x37\x8b\xfe\x85\x8c\xaf\x6e\x00\x16\x24\xa8\xc6\x55\x25\x68\x2b\x3e\x2f\x32\xbf\xb2\x74\x53\x68\xd1\x12\x58\xd1\x65\x40\xb8\xa7\xec\x89\x6d\x99\xa7\x06\x60\x74\xb1\x0c\xd6\x44\xad\x99\x67\xd9\x46\xb6\xcf\x55\x5a\xa8\x26\xdb\x0a\x73\x2b\x91\x76\x4a\x3f\xff\xb9\x66\x84\x86\x32\x2e\x0c\x8d\xe9\x69\x23\x64\xfa\x64\x82\xd5\x22\xf3\xca\xdc\x6e\xb5\x90\xcf\xb0\xd6\x58\xfe\x16\xad\x85\x31\x01\x68\xac\x97\x81\xa1\x43\x8d\x66\x8d\x48\xc1\xd8\x03\xc7\x90\x79\xf7\x2c\xc7\x14\xb3\x08\xb8\x40\x25\xb9\xe2\x07\x78\x71\x6b\x47\x43\x51\xad\x69\x0e\x1f\x66\xb3\xdf\xdf\x0f\xd4\x9d\xe0\xb4\x9e\x12\x1b\xa6\x2b\x21\xe7\x30\x3b\x91\x5a\xc6\xb9\x90\xd5\x40\x3b\xde\xb8\xd7\xd7\xcd\xa1\x33\xff\xbd\x3b\xfd\xa1\xa7\xf5\x1a\x38\x23\x36\x12\x6e\x95\x11\x24\x94\x9c\x43\x29\xf6\xc8\x4f\xf2\xda\x2b\x1d\xd9\x44\xaa\x3d\x5b\xbf\x69\x76\x7a\x87\xcd\x89\x9e\xab\xfd\xad\x11\x9f\x1d\x94\x2b\xcd\x51\xdf\xe6\x6a\x7f\xff\x3e\x17\xbe\x1b\xd3\x72\x56\x3c\x57\x5a\x6d\x24\xbf\x2d\x54\xad\xf4\x1c\x2a\x8d\x87\x13\xae\xb6\xa8\xcb\x5a\xed\xe6\x60\x0a\xad\xea\xfa\x84\x74\xec\xbb\xb5\x20\x3c\x51\x4b\x25\xc9\x9a\x86\x73\xf8\x90\x7e\xdb\xdb\xdc\x07\x2b\xdf\x10\x29\x69\xde\x13\xaf\x1a\x4b\x9a\xc3\xb7\x63\xaf\x5d\xc0\x46\x3a\x01\x16\x99\xcb\xa2\xd5\xcd\x22\xf3\xe5\xb4\xb0\x59\xe3\x93\x68\xc1\xc5\x16\x04\x5f\x06\xc3\x19\xdb\x8c\xe7\x62\xdb\xc1\xad\x46\x07\xdb\x03\xb4\x48\xab\x71\x22\xd8\x59\xdb\x25\xa5\x83\x3c\xc9\xa1\xed\xfa\x60\x44\x61\x02\x50\xb2\xa8\x45\xf1\x6c\x73\x5e\xb5\x51\x1c\xac\x3e\xfd\xf2\xf3\xbf\x16\x99\x67\xbd\x2e\x5b\x96\x3b\x3e\x12\xb4\x4b\x2b\xf8\xf1\xe3\x7f\x7f\x38\x17\xec\x0c\xf6\xdf\x6f\x36\x04\xcf\x5f\x22\x15\xeb\x28\xcc\x58\x2b\x32\x21\x4b\x15\xc6\x29\xad\x51\x46\x1a\x4d\xab\xa4\x41\x58\xae\xa0\xff\x4e\x9f\x8c\x92\x51\xdc\x71\xb8\x3c\x5e\xae\x80\xab\x62\xd3\xa0\xa4\xd4\x35\x22\x58\x82\x05\x52\x2e\x34\x16\xa4\xf4\x21\x1e\xfc\xb9\xf1\x49\x20\x0d\x81\xca\x9f\xb0\x20\x03\x4b\x78\x08\xf2\x5a\xe5\x41\x02\x01\x69\x44\xfb\x2e\x54\xd3\x08\x0a\x1e\xef\xbd\x13\xa4\xbe\xb7\x79\x03\x4b\x88\xac\x1f\xb1\xdd\xf2\x65\x94\x53\x56\x5d\xc3\xda\x56\xc8\x0a\x96\x20\x71\x07\xff\x60\x6d\xf4\x30\x70\xd8\xe7\x21\xb4\x9b\x84\x09\x84\x79\xbd\xc1\xf0\x31\x99\xa0\x76\x6b\x8b\x56\x1a\x51\x5e\xc2\xde\x22\xcb\xa0\x91\x5f\xc2\xb9\x66\xb2\x58\x77\xf2\x87\xf0\x71\x80\x1f\xe3\xfb\x11\xeb\xa9\xb0\x91\x36\x5a\xf6\x46\xa7\x15\x52\xe7\xd9\x97\x2f\x10\xb6\x42\x3e\x87\xe3\x12\x20\xf5\x13\xcb\xb1\xb6\xfe\xef\x9d\xf3\x5d\xec\x52\x21\x8b\x7a\xc3\xd1\x44\xfb\xd4\x8b\xff\x09\xf6\xa9\xe0\xa9\xd9\xe4\x86\x74\x34\x4b\xe0\x8f\x31\xcc\x1d\xcd\x9b\xe1\xfe\x6c\x99\x06\xa9\x38\x9a\x2e\x58\x5b\x61\xd2\x1f\x18\xb1\x4f\x48\xd1\x43\x6f\xb0\x65\x42\x5e\xbd\xce\x34\x3e\xca\xd6\x56\xa3\xe5\x7c\x99\xf6\x8d\xc0\x76\x93\x20\xb9\x68\x32\x53\x3a\xdb\x90\xfa\x37\xfa\x1e\x40\x7a\x83\x27\xa4\x2b\x99\xf9\x48\xb7\x7d\x50\xb2\xbc\x46\x3e\xe5\x06\xd7\x9e\xb4\x44\xf3\xf7\x0d\x4d\x65\xec\x53\x69\xb6\x15\xc4\xac\xc1\xac\xfe\xde\x9a\xcf\x24\xcd\xe1\xf6\xc3\x6c\x36\x9b\x25\x17\xec\x05\x4a\xd2\xac\xfe\x9b\x93\x3a\xcc\xe1\x0a\x0b\x67\x4d\xeb\x9a\xea\x87\x4b\x8c\x6d\x95\xe0\x3f\x6f\x51\xd7\xac\xbd\xca\x60\x5a\x2d\x64\xf5\x13\xca\xca\x8d\xa4\xbb\x89\xfe\xe3\xf9\xb2\x61\xfb\xff\x60\xad\x0a\x6f\x4a\x7a\x37\x41\x85\x1c\xa1\xe7\x18\x89\x06\x0d\xa1\x35\xe2\xe6\x8a\x72\x77\xd2\xd3\x70\x99\x46\x29\x6b\xd5\x65\x10\x87\xe0\x97\xac\x36\x78\xe9\x95\x4d\xc6\x39\x84\x85\x92\x24\xe4\x46\x6d\x4c\xf8\x96\x57\xdd\x50\x08\xbe\x9e\xb9\x27\x38\x47\xbb\x44\xba\xf0\x96\x69\xad\x76\x17\x36\xbb\xdd\xd5\x35\x2a\xbc\x9d\x34\x83\xd3\x05\xab\xf1\x23\xb3\x7d\xcb\x6d\x7a\xc1\x74\xbc\xb9\xbe\x1a\x39\xe5\x8a\x6b\x6a\x83\x1d\x72\xd7\xec\xea\xbd\x77\x33\x31\x78\x4d\xb9\x6f\x07\x67\x55\x67\xa3\xcb\x84\x44\xdb\x17\x87\x06\x5c\x21\xfd\xb5\x46\xfb\xf9\x97\xc3\x8f\x3c\x0a\x87\x39\x16\xc6\x23\x51\xdf\xb7\x5f\x97\xb2\x78\xd8\x35\x02\x2f\xd1\xdf\x78\x4e\xcd\xe0\x9f\x9e\x12\x0d\x66\x24\xf0\xe2\x3d\x4f\xba\xc6\x71\x4c\xfa\xce\xd0\xa9\xea\x6f\x7d\x4a\x46\xa1\x9b\x62\x61\x02\x51\xcb\x34\x6b\xcc\xa4\xa7\x8b\xb2\x07\x52\xa7\xf2\x61\xf6\x18\x9f\x87\xce\x92\xad\x35\x16\x75\xfd\x73\xca\x7e\x7f\xc6\x6e\x15\x5e\x74\x4d\xcb\xeb\x1b\x67\x7c\xe5\x60\xfc\x58\xfc\xd5\x8d\xc5\x4e\x34\xfb\xdd\xcb\x20\x73\xec\x17\x82\x1f\x7f\x7d\x6b\x62\xda\xa1\x3b\x4c\x4c\x1b\x2d\x94\xe4\x86\xa6\x9d\x91\x42\x4a\xd4\xbf\xe0\x9e\x60\x09\x1d\x36\xb1\x7c\x94\x04\xd3\xf9\xd1\xdd\x69\xfa\x66\xcc\x45\x59\xa2\x46\x59\xd8\xc0\x44\xa5\xd0\x86\x12\x60\x52\xd1\xda\x1e\x4e\xa1\x9a\x96\x69\x3f\x3c\x1d\x96\x96\xa2\x26\xd4\x91\x9b\xe0\x5f\x75\x7c\xa9\x51\x0d\x46\xb9\x25\x75\x02\x11\x4b\x20\x8f\xe3\x7e\x93\x72\x23\x0b\x7b\xa6\x50\x2b\xc6\xa3\x71\xdc\xc6\xd7\x88\x4a\xb3\x76\xfd\xfe\x7b\x84\x5d\x9c\x27\xc0\x50\x46\xa9\xc6\x46\x6d\x31\x3a\x39\x17\x9d\xce\x3c\x4e\xc0\x8a\xa6\x5d\xda\x79\x53\xad\x22\x96\x0a\x0e\xcb\xe5\x12\xf2\x54\xf0\x78\x12\x51\x2f\xcf\x38\x1f\x2b\x1d\xeb\x39\xdb\xe0\x35\xa5\x69\xc3\xda\x68\x6f\xe9\xd1\x0b\x08\xee\xa7\x6c\x02\xb5\x9d\xd4\x73\xa0\xb5\x30\x69\x37\xb7\xa3\x7d\x9c\xf4\x65\xde\xd1\xdd\x7d\xa6\x9f\xda\x49\xd7\x2f\xfd\x32\x01\x77\x89\xf2\xfa\xe0\x78\x8a\x7c\xff\xb8\xe2\xba\x12\x16\x4f\x1f\x87\xc5\x51\xce\x3d\x28\xb5\x6a\x3a\x1f\xdc\xe7\x37\xdf\x00\x4b\x49\x75\x24\x52\xd3\x58\x79\xa5\xd7\x62\xd5\x29\x3f\xdb\xf5\xff\xdd\xe9\x18\x9f\x5d\xf9\x87\x1c\xf3\x97\xe3\x51\x5a\xf4\x1d\xa4\xbb\x14\xa4\x96\xe1\x93\x68\x36\xb5\x1b\xe8\xd1\x44\x4d\xb9\xe3\xb6\x12\x26\xbd\xe5\x7d\x3a\xae\x73\xb2\x5c\xd4\xe2\x33\x46\x77\xb3\xd9\xdb\x7c\x9a\x5e\x35\xcb\x17\x8e\x27\x19\xa4\x1f\x25\xa1\xde\xb2\x3a\xb2\xf4\x04\xbe\x9b\x0d\xaa\x4f\x3f\xb5\x17\x99\xff\x89\xb2\xc8\xdc\xff\x01\xfe\x17\x00\x00\xff\xff\x49\x10\xc6\x39\x1e\x10\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4126, mode: os.FileMode(420), modTime: time.Unix(1568975434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
