// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1686079789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3a\xed\x8e\xdb\xb6\xb2\xff\xf7\x29\xa6\xca\x6d\x2d\x03\x32\x2d\xca\xdf\x5e\xdb\xb7\xed\x36\xbd\x2d\x90\xb4\x17\x4d\xd1\x03\x34\x08\x50\x5a\xa2\x6c\x66\x25\xd2\x20\x69\xaf\x9d\xd4\xef\x7e\x30\x94\xec\x95\x6d\x79\xb3\x69\x51\x9c\x63\xa0\x0d\x39\x9c\x19\xce\x37\x87\xd4\x4e\xbe\x48\x54\x6c\x77\x2b\x0e\x4b\x9b\x67\xb3\x9b\x49\xf1\xcf\xcd\x64\xc9\x59\x32\xbb\x01\x00\x98\x58\x61\x33\x3e\x5b\x08\xbb\x11\x1f\x26\xed\x62\x56\xac\x64\x42\xde\x83\xe6\xd9\xd4\x33\x4b\xa5\x6d\xbc\xb6\x20\x62\x25\x3d\x40\x8e\x53\x4f\xe4\x6c\xc1\xdb\xdb\x56\x01\x5b\x6a\x9e\x4e\xbd\x94\x6d\x70\x4a\x44\xac\xbc\x92\x8b\x89\xb5\x58\xd9\x92\xc6\xf2\xad\x6d\xbf\x67\x1b\x56\x40\x3d\x30\x3a\x9e\x7a\x4b\x6b\x57\x66\xdc\x6e\xaf\xe5\xea\x7e\x41\x62\x95\xb7\x37\xc2\xb4\x24\xb7\x0f\x4a\xdf\xb7\x8d\x65\x32\x61\x99\x92\xbc\xbd\xce\x93\xea\x12\xc9\x85\x24\xef\x8d\x37\x9b\xb4\x0b\x7e\x87\x2d\xed\x2e\xe3\xd5\x1d\x63\x63\x4a\x71\xf0\x87\x46\x08\x8e\xb3\xb9\x4a\x76\xf0\xf1\x38\x75\x08\x5c\x2c\x96\x76\x0c\x34\x0c\xbf\xbc\x3d\x59\x79\x10\x89\x5d\xd6\x2d\xe4\x4c\x2f\x84\x1c\x43\x78\x0a\x5e\xb1\x24\x11\x72\x71\x01\x4f\x95\xb4\xad\x94\xe5\x22\xdb\x8d\xe1\x1b\x2d\x58\x16\xc0\x0f\x3c\xdb\x70\x2b\x62\x16\x80\x61\xd2\xb4\x0c\xd7\x22\x7d\x24\xdb\xdf\x1c\x87\x2f\xf2\x5d\x69\x81\xcf\x15\x7c\x50\x85\x57\x39\x26\xcc\xb2\x33\x66\x2b\x65\x84\x15\x4a\x8e\x21\x15\x5b\x9e\x9c\xf2\xd3\xc5\x46\x67\x6a\x59\xb5\xba\x80\x7d\xd2\x32\xa4\xc7\xf3\xd3\xb5\xb9\xda\xb6\x8c\xf8\xe0\x96\xe7\x4a\x27\x5c\xb7\xe6\x6a\x7b\xfb\x79\xaa\x76\xce\xe1\x73\x16\xdf\x2f\xb4\x5a\xcb\xa4\x15\xab\x4c\xe9\x31\x2c\x34\xdf\x9d\xe2\xa8\x0d\xd7\x69\xa6\x1e\xc6\x60\x62\xad\xb2\xec\x74\xb5\x24\x7b\x58\x0a\xcb\x6b\xfc\x69\xc4\x07\x3e\x06\x4a\xa2\xaa\x3e\x55\x23\xcf\xd7\xd6\x2a\x69\x3e\xc7\xce\x19\x4f\xed\x18\xa2\x73\x0b\x39\x43\x5f\xdd\x27\x15\x99\xe5\xfa\x6c\x9b\x4c\x18\xdb\x72\x99\xd1\xc2\xcc\x18\x83\x54\x92\x7f\x3a\x5a\xf7\x45\x4a\xb5\x1d\xe5\xec\x66\xd2\x2e\x4a\xc7\xcd\x04\xf3\xa6\xcc\xb7\x44\x6c\x40\x24\x53\xef\x18\x96\x98\x91\x89\xd8\x94\xcb\x2b\xcd\xdd\x32\xc6\x98\x37\xfb\xea\xc5\xb0\xdf\x1f\xde\x42\x9c\x89\xf8\x1e\x94\x04\x06\x52\x25\x1c\xac\x02\xc3\x39\xd8\x25\x87\x58\x49\xcb\xa5\x35\xb0\xe4\x9a\x4f\xda\x2b\x7d\xa8\x48\xac\x2c\x33\x87\x82\xb1\x10\x76\xb9\x9e\xbb\x8a\xa1\x05\xff\xc0\xe7\xca\xc4\xcb\x76\x51\xcb\x3c\x88\x33\x66\xcc\xd4\x2b\x90\x5a\xb1\xd2\x92\x6b\x0f\x98\x16\xac\x95\xb1\x39\xd6\xb5\xdf\x04\x7f\x00\xa3\xd6\x3a\xe6\x28\xc9\xff\x09\xfb\xc3\x7a\xee\xcd\x26\x66\xb3\xb8\x0c\xa9\xa9\x37\x0c\xbd\x32\xee\x8a\xf1\x46\xf0\x87\x6f\xd5\x76\xea\x85\x10\x42\xd4\x73\xff\x79\x27\x84\xce\x6a\x53\x2f\x15\x59\x36\x7e\x91\xa6\xe9\x6d\x19\x43\x2e\xf2\x2a\x9e\x67\x73\xa3\xb2\xb5\xe5\xb7\x87\x14\x2a\xe3\xde\x0d\x8f\xb9\x56\x0a\xbf\x14\x49\xc2\xe5\xd4\xb3\x7a\xcd\x2b\x65\xad\xb0\x35\xb3\x4b\x48\xa6\xde\xeb\x30\x08\xe1\x15\xa5\xbd\x80\xd2\x1e\xbc\xa2\x9d\xb0\x1c\x74\xa3\x80\x76\x23\x78\x15\xf5\xc2\x00\x45\x76\x83\x10\x7e\x47\x97\x21\x71\x0d\xbf\x13\x08\xfe\x90\x3f\x8d\x86\xa4\x13\xd0\x70\x44\x42\xb8\xa3\xb4\x43\x86\xc1\x68\x44\x06\x40\xe9\x88\x84\xc1\x70\x44\xfa\xd5\xe1\x1d\x8d\x22\x1c\x47\x88\x11\x85\xa4\x17\x0c\x86\x88\xf1\x38\xbc\x43\xec\x28\x18\x44\x24\x04\x1a\x75\x48\x37\x18\xf4\x49\xa7\x3a\xbc\xa3\xd1\x80\x74\x82\x61\x48\x46\x40\xa3\x1e\xe9\x05\xc3\x81\xc3\x38\x0e\xdd\x2e\xa3\x60\x34\x40\xd6\x9d\x90\xf4\x03\x1a\x52\xc4\xee\x74\x49\x37\xa0\x61\x87\x44\xde\x85\x32\xe8\x9b\xa9\x17\xaf\xb5\xe6\xd2\xde\xa1\x77\xbc\x83\xdb\xac\x66\xd2\xa4\x4a\xe7\x2d\xa5\x85\x2b\x62\xb4\x13\xae\xb6\x40\xc3\xfe\x6a\x7b\x7b\x0c\x30\x15\x5b\xd5\x62\x3a\xff\x6c\x13\xd2\x1e\x71\x6e\x29\x4c\xd8\x25\x23\x37\xa1\x40\xe9\x90\x0c\x02\x4a\xfb\xa4\xe7\x8c\x38\x74\xf0\x2e\xba\xb1\x83\x0b\x21\x75\x06\xeb\xf4\x51\xd9\x11\x89\x80\x76\x46\x38\x1c\x92\x2e\xd0\x6e\x44\x22\x1c\x3a\x0c\x74\xcb\x70\xe8\x4c\x3a\x40\x4b\x77\x1d\x06\x42\x7b\x43\xb7\x6b\x77\x48\x7a\x41\xaf\x83\xe0\x5e\x97\x84\x41\x8f\x22\xbb\xde\x88\x0c\x70\x88\x18\xfd\x90\x74\x82\xee\x08\x31\xfa\x1d\x12\x05\xdd\x0e\x5a\x77\x40\x49\x37\xe8\x86\x84\xc2\x5d\x65\x4c\x07\x7d\x42\x83\x6e\x84\x72\x0f\x86\xb8\x4b\x9f\x44\x70\x47\x87\x1d\x42\x71\xc7\x3e\xd0\xe1\x80\x44\x41\x9f\x92\x21\xd0\x51\x48\x46\x41\x1f\x15\xbb\xa3\xa3\x2e\xe9\x05\x7d\x0c\x26\x3a\x1a\x90\x41\x30\xe8\x90\x08\xa2\x30\x24\x34\x18\xa0\x3b\xef\x22\x17\x62\xc3\x10\xc1\xb4\x8f\x71\xd0\x25\xa3\xea\xf0\x2e\xa2\x11\x19\x04\xa3\x0e\xa1\x10\x85\xce\x34\x7d\x12\x42\x14\xf6\x48\x17\x87\xc8\x23\xec\x11\x1a\xd0\x30\x22\x5d\x88\xc2\x0e\x1a\x3f\x1c\x38\x49\x5c\x2c\x53\x94\xfb\x8e\x0e\x29\x3a\x22\x1a\x62\xe0\xf4\xdd\x42\xe4\x14\xea\x0d\x9c\x53\xba\x4e\xe7\xde\xc0\x79\xab\x8f\x48\xbd\x3e\x2e\x44\x2e\x2e\x7b\x91\x1b\xa3\x40\xaf\x68\x97\xe2\x16\x9d\xbe\x63\xdb\x71\x7e\xec\x0c\x30\x03\xba\x14\x63\xb3\xeb\x62\xb3\x4b\x11\x8e\xff\x87\xdf\x9f\x17\x9d\xd5\xb0\xc3\x2a\x7c\x19\x77\x93\xb6\xd9\x2c\x66\x93\x36\xab\x36\x44\x8f\xcb\xe4\xa4\x24\x8e\x97\x78\xea\x01\x39\x84\xf1\xd9\xb9\xc1\xa4\xc8\x59\x51\xa5\x10\x23\x66\xb6\xf5\xc0\x36\x1c\x7a\xfd\x30\x37\xc0\x99\xe1\x2d\x21\x5b\x6a\x6d\xeb\x8e\xa2\xaf\xef\xf9\x2e\xd5\x2c\xe7\xe6\x94\xf8\xe3\xcd\xc9\x1e\xe1\x97\xc1\xc9\x1c\x0f\xf5\x33\x31\xf0\x77\xcc\xc7\x31\x68\x65\x99\xe5\x7e\xd8\x3c\x41\xda\x9f\xb2\x8d\xce\xf9\xf6\x9f\xc9\xb6\x15\xf5\x12\xbe\x78\x92\x77\xf7\x9c\xf7\xf0\x99\xbc\x69\x58\xc3\xba\x66\x93\xaf\x73\x9e\x08\x06\x7e\xce\xb6\xad\xa2\xa5\xe9\x85\xe1\x6a\xdb\x3c\xdb\xe4\xb3\x7c\x09\xa7\xfe\xc4\x0e\xe0\x29\x1d\x4f\x79\x3f\x97\xeb\x33\xa3\xe4\x5c\x71\xa8\xb6\x19\x50\x6d\x2b\xca\xb6\xa9\x72\xd4\x4d\x8e\xcd\xc5\x11\x52\x20\x39\x7c\x63\xd5\xca\x03\x25\x5d\x87\x51\x4c\xfd\xa6\x37\x7b\xf3\xeb\xcf\xff\x3f\x69\x17\x78\xd7\x89\xd3\xf4\x21\xa9\x10\xe3\x14\x89\xbf\xff\xfe\x5f\xdf\x5d\x12\x57\xba\x1c\x37\x5d\x67\x05\x0f\xd7\x7f\x9d\x1f\xcd\x99\x98\x5d\x98\x6d\xe2\x1a\x91\x4b\xb8\x5b\x13\x72\xb5\x3e\x5c\x9c\xe2\x25\x8f\xef\xe7\x6a\xeb\x81\x64\x39\x3f\x6e\x01\x1b\x96\xad\x71\x59\xe5\xb9\xb0\x1e\x38\x34\x9e\x40\xfb\x0a\x4b\xb3\x62\xf2\x70\xba\x95\xdd\xac\xe6\x89\x37\x2b\xe8\x27\x6d\x5c\xaf\x91\xb2\x5d\x23\xe6\xa4\x7d\xae\xd0\x3f\xaa\xa1\xd5\x9c\xff\x25\xfd\x16\x9a\x73\xe9\xcd\x90\xfe\xbf\x59\xbf\x79\xa6\xe6\x7f\x49\xbf\x79\x86\x5d\x20\x92\xff\x0d\xf5\x26\xed\x75\xf6\x64\x7a\x5d\xd1\xf2\x8a\x86\x98\x04\x4b\xc1\x35\xd3\xf1\x72\x77\x54\xb1\x02\x79\x42\x4f\xa7\xe3\xec\x88\x5b\xa7\xd4\x85\x42\xd5\xdb\x46\x31\x7c\xc6\xdb\xc3\x23\x79\xca\x6d\xbc\xf4\x1b\x6c\x25\xda\x42\xa6\xaa\xd1\x24\x76\xc9\xa5\xaf\xb9\x59\x29\x69\x38\x4c\x67\x70\x18\x93\xf7\x46\x49\xbf\x59\x62\xb8\x5b\xf3\x74\x06\x89\x8a\xd7\x39\x97\x96\xb8\xe7\x13\x98\x02\x2e\x90\x44\x68\x1e\x5b\xa5\x77\xcd\xc7\xb2\x1a\x2b\x69\x2c\xa8\xf9\x7b\x1e\x5b\x03\x53\x78\x5b\x38\x3e\x80\x22\xc0\x03\x38\xa4\xf2\xbb\xdb\x33\x1a\xcd\xd3\x82\x00\x2f\x60\x88\xa8\x79\xae\xac\x23\xb1\x6c\x81\xf8\xe7\xbb\x94\xd7\xc0\xe9\x59\xb9\x2e\x36\x18\x03\x5e\x1f\x4e\x8f\x30\x14\xa1\x0e\x8e\x22\xd6\xc1\x51\x92\x3a\xf8\x0f\x2f\xbf\xf9\xae\x0e\x5e\x48\x5c\xbb\x33\x5b\x14\xe0\xc7\x03\xe1\xf6\x5c\x1d\xab\x6a\x54\x71\x29\xe0\xa3\x83\x9b\xe8\x88\xcb\x83\xa9\xa0\xcd\xd9\x6a\x25\xe4\x02\xa6\x20\xf9\x03\xbc\x66\x2b\xff\x6d\x6d\x82\xbd\x6d\xa0\xae\x8d\x00\x1a\x98\x56\x8d\x77\xc1\x15\x2c\xb4\x14\x62\xb9\xe2\x72\x1d\xad\x30\x35\x22\x6a\x9e\x5c\x47\x43\x3b\x96\xdc\x76\x4f\xec\xc9\x16\x9f\x46\x2a\x4c\xfc\x69\x3c\x74\x51\xa1\x26\x8b\xef\x1b\xef\x2e\xb0\xde\x35\x6f\x6f\x2e\x80\x9a\xdb\xb5\x96\x07\x63\x92\x05\xb7\xa5\xe5\xff\xfc\x13\x1a\x2b\x21\xef\x1b\xa7\xa7\x7b\x70\xca\xc2\x25\xed\x18\xfc\xad\x73\x55\x99\x03\x44\xc8\x38\x5b\x27\xdc\xf8\x5b\x52\x30\xfb\x5f\xd8\x12\x91\x10\xb3\x9e\x1b\xab\xfd\x30\x80\x61\x13\xc6\x0e\x56\xd7\x26\x15\xfe\x95\x2a\xe1\xa6\xf4\xee\x46\x18\xf2\x1d\xb3\xec\x0d\xb7\xfe\x5b\xd4\xa3\x06\xd5\x5d\xfc\x4f\xd1\x11\xe4\xbb\xc5\x00\x3e\x96\xb9\x33\x06\x07\x71\xf2\x16\x90\xb7\x38\x77\x82\xbe\x83\x7d\xf3\x8c\x35\x4f\x16\xd7\xa5\x38\x2f\x01\x2b\xec\x96\xcc\x45\x48\x97\xaf\x57\x1e\xb6\xc0\xde\x79\xba\x15\x0f\x01\x75\x6b\x6c\x6d\xd5\x2f\xbc\x78\x81\xba\x4c\xaf\x8c\xed\xd4\xda\x8e\x6b\xd2\xe3\x50\x67\x45\xcc\xb2\xba\x75\xfc\x19\xa5\xed\x6b\x6e\x97\x2a\x19\x43\xa3\x28\x6a\x3c\x69\xd4\x47\x96\x59\xb2\x7b\xfe\xab\x7a\x60\x3a\x31\x63\x68\x68\xa5\xac\xb9\x82\x5a\x70\x72\x2d\x63\xe3\x97\x57\x57\x90\xe6\x99\x8a\xef\xdf\x2c\x45\x6a\xdd\xc3\x54\xca\x32\xc3\xeb\x31\xd1\xf8\xaf\x85\x14\xb9\xf8\x50\x36\xa2\x4f\x20\xaf\x98\xbb\x4f\x71\x69\x35\xcb\x4e\x09\x2e\xf0\xf7\xe7\x41\x7d\xc2\x68\xb9\x33\x22\x36\xe3\xf3\x1b\x0d\xb8\x97\xcf\xed\x6f\x3c\x53\xb1\xb0\x3b\xf7\xcc\x79\x29\x4a\x2e\x64\x15\x23\xba\xc4\xb0\x22\xe7\xc6\xf2\xd5\x18\xe8\x53\x62\xb8\xc8\xab\xf3\x5f\x59\x21\xbd\x17\xa1\xfb\x79\x97\x3b\x94\x01\x57\x2b\x1f\xd3\x5a\x3d\xd4\xf2\x75\xb2\xa9\x6b\x2b\x4e\x24\xc9\xe6\x19\xaf\x3d\x1f\xaa\x3f\x13\xb3\x8c\x7f\xcf\xf0\x9c\x74\x42\xd4\x22\xee\x3f\xcf\x29\x2e\x8b\xeb\x64\x4b\x95\xac\xcd\x02\xa8\x58\xca\xbd\xee\x5e\x5e\xc4\xf7\xd7\x2e\x2e\x17\x99\x1d\x2b\x69\x99\x90\xee\xe4\x3d\x36\x06\x0b\x6e\x5f\x66\x1c\x87\xdf\xee\x7e\x4c\xfc\xc6\xf1\xa9\xb4\x71\x5e\x44\x8a\x9e\xe2\x3a\x25\xae\x37\x2e\xeb\xc9\xe1\x83\xc0\x63\xf5\xf9\xa9\x80\xf8\x47\x79\xb0\xae\x95\xa6\x39\x16\xc1\xa0\x2c\x5a\xfb\xe0\x50\x91\x2a\x05\xf3\xf0\x99\x45\x49\xbf\xe1\xee\x43\x8d\x00\xfc\x15\xd3\x2c\x37\x35\xa7\xad\x48\x0f\x8b\xc4\xb1\x7f\x1b\xbe\x3b\xbf\xac\x1e\x9c\x83\x52\x22\x8a\x3b\x42\xce\x69\x6e\x2f\x48\x90\xf3\xc5\x71\x71\x2c\xc4\xcd\xba\x5d\xe0\xd8\xd6\xfd\x81\x6d\x5d\x49\xdd\xfe\x9f\x8f\x47\xb2\xfd\x61\x22\x92\xfd\x1f\x4f\x75\x7c\xd8\x37\x1e\x3b\xbe\xf2\x69\xda\x35\x7d\xd8\xe3\x09\x29\xb9\xfe\x95\x6f\x2d\x4c\x0f\xcf\xd6\x35\x0a\xec\x81\x67\x86\x3b\x3d\xb0\x8d\xfb\x8b\x4a\x20\xe9\x89\x06\xe6\x3f\xa3\xc2\x51\x00\x98\x4e\xa7\xe0\x61\x2b\xe1\x3d\x57\x7c\x44\xfe\xc7\x45\xbd\x92\xaa\x70\x6c\x61\x2a\x9f\x37\xaa\x99\x94\xae\xa5\x3b\x90\x20\x53\x2c\xf1\xcf\x55\x4a\x44\x9a\x72\xcd\x65\x8c\xe1\xeb\xa7\x42\x1b\x1b\x00\x93\xca\x2e\x31\xb5\x62\x95\xe3\xa1\x52\xb6\x0a\xda\x58\x52\x34\x0c\xbe\xbb\x20\x7c\x51\xe2\x11\xa3\x72\xee\xcf\x11\x54\x12\xf8\x2c\x80\x79\xb3\x79\xde\x6e\x55\xae\x24\x0b\xcd\x56\xcb\xe7\xdf\x49\x70\x52\xdf\x0a\x17\x29\x87\x1d\xe2\x86\xfb\x8f\xda\xf8\x8f\xa9\xd8\x0c\x00\xc9\x49\xd9\x06\x15\xb2\x21\x33\x46\x44\xe2\xbc\x3d\x27\x22\x69\xd6\xd8\xbc\xe0\xc1\x92\xa4\xca\xb8\xca\xeb\x64\x93\x6b\x8c\x49\xce\x56\xfe\x16\xe1\xfe\x47\x10\x49\xd1\xf5\x05\x87\xc6\xd1\x2a\xe2\x46\xfe\xb6\x19\x80\xbb\x69\x1d\x10\xca\xda\x6d\x15\x71\xa3\x43\x2b\x19\x40\xf1\xa5\xab\x98\x9e\xd0\xc0\xfe\xd2\xe6\x70\x38\x48\x6b\x6c\x54\xc0\xab\x36\x72\x90\x53\x55\x52\xad\xf2\x52\x19\x37\xfc\xea\x2b\x60\x04\xaf\x2d\x0e\x64\x55\x9d\xe1\x0a\xc6\x75\x86\x2b\x37\x38\xd9\xf9\xef\xec\xb6\x6f\xd6\x7e\x2d\x3c\x06\x7d\xf1\x4e\x76\x16\x37\x87\x23\xa0\xec\x73\x08\x22\xbd\x11\xf9\x3a\x73\x2d\x93\x7f\x85\x65\xfa\x90\x60\x8e\xd4\x1c\x12\xcf\xe7\x57\x8f\xcd\xe6\x22\x13\x1f\xb8\xdf\x0b\xc3\x4f\xe3\x6a\xfb\x49\x51\x8b\x4c\x7f\x5c\x32\xdc\xfe\x28\x2d\xd7\x1b\x96\xf9\xb8\x16\x40\x27\x74\x5b\x1d\x31\x6a\x0e\x66\xf3\xed\xee\x27\x96\x73\xff\xf0\xa6\xd3\x24\xa9\xd2\x2f\x59\xbc\xf4\x8b\xbb\xce\x89\x9c\x5b\x74\xf6\xcb\x0d\x97\xf6\x95\x30\x96\x4b\xae\x7d\x2f\x5e\x32\xb9\xc0\xab\xbc\xff\xf4\x35\xf6\x63\xf1\x94\x12\x1c\xdf\x4f\xf6\x30\x05\x4e\x2c\xd3\x0b\x6e\x2f\x63\xab\xbc\xb2\x38\x9a\x77\x58\x32\x0b\xaa\x2b\xd9\x8b\xed\x00\xd1\x3c\xd5\xdc\x2c\xcf\x1d\xb1\x6f\x36\x9f\xb4\x80\x6b\x4d\x2a\x0f\x3c\xcd\xcf\x56\xf2\xa0\xe0\xa7\x35\x2b\xfb\x14\x52\x5c\x6a\x48\xf5\x06\x43\xca\xa6\xf3\x9a\xae\x87\x18\x31\xdc\xfe\x5c\x70\xf1\x2f\xbb\x9e\xe3\x91\xf0\xf8\x57\x25\x93\x76\xf1\xb5\xfb\x66\xd2\x76\x7f\x41\xf3\xef\x00\x00\x00\xff\xff\x41\x15\x00\xcb\x58\x23\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 9048, mode: os.FileMode(420), modTime: time.Unix(1686081289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
