// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// html/favicon.ico
// html/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x5b\x68\x1c\x55\x18\xc7\x4f\xb5\x6b\x53\xb1\x4d\xa2\xed\x83\x22\xc9\x26\x73\x3b\x93\x07\x41\x03\x25\xa2\xd0\x1a\x93\xec\xdc\x27\x6d\xc4\xa2\x60\x71\x9f\x7d\xf1\x5d\x5a\x4a\xa9\x22\xbe\x14\xd2\x54\x08\x6a\x10\xda\x87\x0a\xa2\x0f\x45\xf1\x2d\xb6\x5e\xaa\x90\x97\x54\x1f\xa4\x1a\x63\x6b\xbb\x89\xbb\xdd\xec\x65\x76\x76\x67\x26\x97\x23\x67\x76\xa7\x33\x3b\x3b\x3b\xd9\xdd\x6e\x1b\xd0\x7c\xf0\x11\x32\x33\xff\xf3\xfb\x7f\xdf\x39\xe7\x4b\x00\xd8\x01\x1e\x02\x5d\x5d\xf8\x67\x14\xc0\x08\x00\x34\x00\x20\x1a\xad\xfc\xbe\x0f\x00\x25\x02\x00\x04\x00\x74\xe1\xe7\xa0\xfc\xdc\x8e\x08\x68\x22\xa6\x23\x64\x2c\x3d\xd9\xc7\x67\xcf\x00\x30\xbb\xb3\x19\xa5\xad\xe5\x72\x53\xac\x62\x21\x46\x5d\x45\x24\x97\x3f\xdb\xf8\x1a\xd3\x11\x22\x96\x3b\xc7\xaa\x6b\x88\x55\x57\x6d\x3d\x3b\xbe\x81\x48\xae\x70\x16\xbf\x0b\xd7\xce\x45\x08\x3e\x77\x6e\x40\x5d\x43\x8c\xac\xa3\x28\x7f\xe7\x4a\x1f\x97\xf9\x9e\x96\x4b\x88\x1d\x47\x28\x2a\xe4\xa7\xea\xfb\x98\x76\xb5\x8a\x89\x48\x3e\xfb\x1b\x20\xbf\xde\xf5\xe4\xe0\xdc\xa3\xa4\xa0\xfd\x69\xfb\x38\x8c\x10\x29\x14\x02\xd6\x98\xdd\x49\x72\xf9\xa9\x32\xb7\x80\x68\xa5\x84\x28\x51\x5b\xe9\x19\x4b\x0c\xf6\x1e\xfc\x7b\x88\x10\xf5\x1c\xa3\x5a\x88\x55\xd7\xd1\x00\x5e\x43\x32\x3d\xfd\x98\x8b\xe0\xfe\xb0\x8e\xb6\x92\x98\xd5\x17\x4b\x9d\xec\x8b\xa5\x4f\xb2\x13\x98\xab\x15\x49\x51\xbb\x71\xd7\x87\x68\x4e\xda\xf5\xc6\x92\x17\x58\xc5\xac\xd2\xd2\xb2\x5e\xae\x77\xf4\xd6\xf1\xe8\xd8\xf2\x89\x81\xc3\x1b\x88\x18\x49\xbf\xda\x3d\xb8\xd0\x49\xf2\xda\x65\xec\xc1\x5e\x5f\xd0\x3e\xed\x8b\x25\xbf\x64\x55\xcb\xd6\xb8\x59\xb4\xdf\x47\x63\xb7\x8e\x47\x47\x53\xa7\x49\x21\x9f\xe8\x1e\x59\xe9\xec\x7c\xf1\x46\x37\x21\xe4\xbe\x1d\x38\x52\xd6\x13\x5c\xe1\x73\x30\x74\x73\x37\x21\xe4\x67\x98\xf1\x0d\x5b\xe7\x24\x7b\x04\xa1\xfe\xb1\xf4\x7b\x04\x5f\x38\xd6\x33\x9a\x7e\xa1\x9f\xb3\x4e\x90\x92\xb5\xc0\xa8\xeb\xf6\x3b\x42\xb4\x3e\xc6\x5a\xbb\x05\x43\x3f\xee\x26\x04\x7d\x86\x19\x47\x08\xef\x15\xa3\x9a\x88\x14\x8b\x85\xde\xd8\xd2\x21\xfc\x9a\x10\x4a\xa7\xd8\x8a\x67\x5b\x2b\x19\x9f\x80\xde\xc5\x8e\xaa\x2d\x38\xb8\xd8\x41\x08\xc6\x0c\xfe\x06\xfb\x23\x79\xfd\x07\xfc\xd8\xae\x59\xd4\x97\x71\x3f\xf0\x73\x4a\xb0\x6a\xb5\x4e\x3c\x8d\x7d\x94\x2e\x50\x62\x71\xb1\x67\x38\xf9\x1c\xc9\x65\xde\xa6\x44\xf3\x3b\x46\x5d\x2b\x6b\xa5\x10\x6d\x25\x1e\x3f\x70\x7d\xef\xfe\x97\xb2\x04\x29\x94\xde\x75\xfc\xba\xdc\xd9\x50\xad\x27\x76\x10\xbc\x71\x9e\xad\xf4\xd9\xd6\x92\xd7\x77\x35\xa8\x2d\x47\xef\x62\x47\xbf\xa8\x7f\xd6\x2f\xe8\x17\x9b\xd6\xfe\x8f\x02\x56\x66\xe4\x21\xef\x9c\xdc\xd7\xbe\xf5\x69\x29\xff\x2c\x23\xac\x5c\x62\x84\xcc\x17\x50\xd2\x9e\x69\xdf\xca\x0d\xb1\x63\x50\xd2\x90\x37\x19\xb9\x30\xf2\x80\xd8\x63\x01\x6c\x27\x87\xef\x33\x3b\xa8\x6e\x5f\xea\x2f\xdf\x27\x76\x58\xdd\xf6\xdf\x25\x4f\xb6\xb5\x0f\x9b\xb3\xfd\xfc\x22\xce\xb6\xf4\x21\xac\xe7\x64\xec\x36\x22\xb9\x44\x10\xbb\x9c\xca\xbd\x79\xd8\xa4\xee\xd3\x8c\x5c\xd8\xc3\xc8\x7a\x27\x23\xeb\x67\x6a\xd8\x36\xbf\x84\xb3\xa5\xbd\x08\xab\x9b\x12\xee\x5c\xf1\x7f\x4f\xf1\xa9\x5f\x02\xd8\x76\x42\xc5\x68\xaa\x0f\x0d\xec\xf7\x07\x7e\x0d\x23\x17\x3f\xf2\xb3\x61\x99\xed\x64\x43\x7d\x68\xe4\xac\x91\x5c\x62\x85\x91\xf5\x47\x3c\xec\x4e\x92\x4b\x18\x01\x75\x7b\xd2\xc4\x19\xda\x87\x66\xee\x18\xc5\x27\xaf\xb9\xbd\x4f\xfe\xc1\xc8\xa5\x7a\x75\x3b\xec\x50\x0f\xad\xdc\x31\x4f\xfd\x9b\xd5\xed\x49\x0b\x41\xd5\x1a\xf6\xb1\x1b\x99\x6b\x55\x6c\x7c\xf7\x1c\xbd\x7d\x07\x3d\x6c\x8a\xfb\x07\x31\x92\x76\x89\x16\xd2\xd7\x02\xd8\x95\x5c\x1d\xa9\xb0\x9f\x6f\x61\xb6\xd4\xf0\x9d\x9e\x53\x7c\x32\x01\x15\x63\xbf\xf3\x0e\x2a\xe6\x64\x00\xdb\xc9\x03\x34\xb7\xf4\x7b\xb3\xec\x60\xfe\xdd\x9e\x1f\xf3\xef\x2d\xee\x47\x00\x1b\xd1\x62\xe6\x57\x2a\x76\x7b\xb9\x81\x79\x5e\x33\x5b\x30\xd3\x5d\x7f\x69\xdd\xb3\xdf\xaf\xd7\xe7\xaf\x56\x25\x25\xac\xdc\x84\x92\x26\x37\x53\xb7\x73\xd6\xbc\x7c\xa7\x7e\x5a\xcc\xfe\x04\x15\xb3\xea\xbf\x1c\xa8\x5a\xef\x07\xb1\xa1\xba\x86\x53\x28\x9f\xdf\x42\xbc\xb1\xba\xdd\x33\x4e\x71\x89\x0d\x77\x8f\x0d\x3c\x13\xff\xf2\xec\xf9\x2b\x8c\x6c\x9e\xa7\xa5\xdc\xd5\x10\xf6\x1b\x5e\x9f\xae\x87\xf0\xba\x7d\x77\x6c\x07\x54\x8c\x27\x18\x49\xfb\x0a\x2a\x66\x87\xc3\xae\x73\xd6\xea\xb2\x5d\x0f\x7a\xbc\x51\x36\x2d\xa4\x16\xa0\x62\x3c\xec\x70\x2b\xec\x89\x6a\xb6\x9f\x5f\x9f\xed\xf1\xf0\x66\x3d\xb6\x7b\xc7\x96\x35\xa8\x18\x7b\xab\xf6\x59\x31\x8f\xb6\x5a\x77\xad\x87\x62\x3c\xa4\xe7\xb8\x3f\x17\xfd\x1a\x5a\xcc\x5f\x6e\x07\xbb\xca\x43\xdd\x79\x6e\x7c\x58\xcb\xcf\xcc\xb7\xda\xf3\xba\x1e\x94\x52\xdc\x3f\xcf\x69\x31\xf3\x33\x54\xcc\xc7\x9c\x6f\xa0\x6a\xed\x81\xaa\x75\xaa\x5d\x75\xfb\x03\x2a\x46\xdc\x65\x67\xaf\xba\xcf\xcd\xa3\x14\x9f\x4a\xd5\x9b\x2d\xed\x60\x7b\x3c\xbc\xc3\x48\xda\x37\x1e\x76\xcb\x77\xec\xde\xbd\x98\xaf\x6d\x21\xfb\xa9\xad\x62\x57\xf8\x11\xa8\x5a\x6f\x6d\x05\xbb\xca\x87\xba\x1a\xdf\x2a\xb6\xc7\xc3\x04\x2d\x66\xe7\x69\x31\x37\x0f\xd5\xb5\xf1\x07\xc9\xde\x8e\xed\xd8\x8e\xff\x46\xfc\x1b\x00\x00\xff\xff\x3e\xc2\x78\xb2\x76\x19\x00\x00")

func htmlFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_htmlFaviconIco,
		"html/favicon.ico",
	)
}

func htmlFaviconIco() (*asset, error) {
	bytes, err := htmlFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/favicon.ico", size: 6518, mode: os.FileMode(420), modTime: time.Unix(1568978470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x6f\xe3\xb8\x11\x7f\xcf\xa7\xe0\xe9\xda\xb3\x04\x28\x92\xf7\x0e\x8b\x16\x8e\x9d\xfe\xb9\xbd\xed\x1d\x70\xed\x15\xdd\x43\xfb\x10\x04\x38\x4a\x1c\xc9\xdc\x48\xa4\x40\x8e\x1d\x7b\xb3\xfe\xee\xc5\x90\x94\x2c\xcb\x4e\x10\x2c\xd0\xea\x21\x36\x67\x7e\x33\xfa\xcd\x70\x38\x43\x67\xf9\x95\xd0\x25\xee\x3b\x60\x6b\x6c\x9b\xdb\xab\x65\xff\x01\x5c\xdc\x5e\x31\xb6\x44\x89\x0d\xdc\xd6\x12\xb7\xf2\xd3\x32\xf7\x2b\x92\x37\x52\x3d\x30\x03\xcd\x2a\xb2\x6b\x6d\xb0\xdc\x20\x93\xa5\x56\x11\x23\x67\xab\x48\xb6\xbc\x86\x7c\x77\xed\x65\x6b\x03\xd5\x2a\xaa\xf8\x96\x96\x99\x2c\x75\xe4\x7c\xd8\xd2\xc8\x0e\x83\x05\xc2\x0e\xf3\x8f\x7c\xcb\xbd\x34\x62\xd6\x94\xab\x68\x8d\xd8\xd9\x45\x9e\x6f\x54\xf7\x50\x67\xa5\x6e\xf3\xad\xb4\xd7\x0a\xf0\x51\x9b\x87\x3f\x37\x1c\xc1\x62\x2e\xa4\xc5\xb1\x3c\x6b\xa5\xca\x3e\xda\xe8\x76\x99\x7b\x67\x47\xc6\x9e\xc9\x97\x7b\x2d\xad\x8d\x42\xd8\xb8\x6f\xc0\xae\x01\x30\x1a\x47\xe0\x00\xb9\x0f\x8f\x10\x53\x1d\x69\x98\x4b\x76\x5a\x68\xb1\x67\x4f\x6e\xed\x64\x20\xeb\x35\x2e\xd8\x9b\xf9\xfc\xf7\x37\x83\xf4\x51\x0a\x5c\x4f\x85\x2d\x37\xb5\x54\x0b\x36\x3f\x8a\x3a\x2e\x84\x54\xf5\x20\x3b\x5c\xb9\x8f\xaf\xdb\x7d\xa0\xff\xda\x37\xfd\xa1\x97\xf5\x1e\x04\x47\x3e\x32\xee\xb4\x95\x28\xb5\x5a\xb0\x4a\xee\x40\x1c\xed\x8d\x77\x3a\xe2\x84\xba\x3b\x59\xbf\x48\x3b\x7b\x0b\xed\x51\x5e\xe8\xdd\xb5\x95\x9f\x9c\xaa\xd0\x46\x80\xb9\x2e\xf4\xee\xe6\x75\x21\x7c\x37\x96\x15\xbc\x7c\xa8\x8d\xde\x28\x71\x5d\xea\x46\x9b\x05\xab\x0d\xec\x8f\x7a\xbd\x05\x53\x35\xfa\x71\xc1\x6c\x69\x74\xd3\x1c\x35\x01\xfe\xb8\x96\x08\x47\x69\xa5\x15\x12\x35\x58\xb0\x37\xd9\xb7\x3d\xe7\x3e\x59\xc5\x06\x51\x2b\xfb\x9a\x7c\x35\x50\xe1\x82\x7d\x3b\x8e\xda\x25\x6c\xe4\x93\xb1\x65\xee\xaa\xe8\xf6\x6a\x99\xfb\x23\xb9\xa4\xaa\xf1\x45\xb4\x14\x72\xcb\xa4\x58\x45\xc3\x1e\x53\xc5\x0b\xb9\x0d\xea\xce\x80\x53\xd3\x06\x92\xa6\x33\x30\x31\x0c\x6c\x43\x51\x3a\x95\x17\x39\x6d\xb7\xde\x5b\x59\xda\x88\x69\x55\x36\xb2\x7c\xa0\x9a\xd7\x5d\x9c\x44\xb7\x1f\x7e\xfd\xe5\x9f\xcb\xdc\x43\x2f\xdb\x56\xd5\xa3\x18\x19\xd2\x92\x0c\xdf\xbf\xff\xcf\xbb\x53\xc3\x40\xd8\x7f\x7f\xb1\x21\x78\x7c\x05\x58\xae\xe3\x59\xce\x3b\x99\x4b\x55\xe9\x59\x92\xe1\x1a\x54\x6c\xc0\x76\x5a\x59\x60\xab\x5b\xd6\x7f\xcf\x3e\x5a\xad\xe2\x24\x20\x5c\x1d\xaf\x6e\x99\xd0\xe5\xa6\x05\x85\x99\x6b\x66\x6c\xc5\x48\x91\x09\x69\xa0\x44\x6d\xf6\xc9\x10\xcf\x95\x2f\x02\x65\x91\xe9\xe2\x23\x94\x68\xd9\x8a\xdd\x45\x45\xa3\x8b\x28\x65\x11\x1a\x00\xfa\x2c\x75\xdb\x4a\x8c\xee\x6f\x46\x78\x03\x95\x07\xd3\xa6\x11\xc8\x40\xab\xd1\xc1\x91\xd7\x84\xbd\xf2\xfb\xfd\x3d\xd5\x18\x5b\xb1\x98\x62\x4e\x88\xde\xd3\xa8\xfe\xc8\x55\xcb\xbb\x4e\xaa\x9a\xad\x98\x82\x47\xf6\x77\xde\xc5\x77\x03\x82\x9e\xbb\x19\x11\x9a\xa5\x6c\x56\x34\x1b\x98\xdd\xa7\x13\x2d\xd1\x24\x6d\x6d\x00\xd4\xb9\xda\xb3\x27\x80\x01\x71\xae\x26\xfe\xc1\x7a\x7f\xc1\x37\xaf\x9f\x57\xfa\x90\x9f\xd7\xff\xf8\xc3\x5f\xde\x79\xda\xbc\x7c\x98\xdd\x0f\xda\xfb\xe4\x66\x84\x3c\xb6\x17\xc0\x8d\x51\x7d\x3a\xb2\x1a\x30\xe4\xec\xf3\x67\x36\xeb\xa4\x7a\x98\x8d\x0f\x22\xea\x9f\x79\x01\x0d\x65\x76\xe7\xd2\x1a\x76\x30\x93\xaa\x6c\x36\x02\x6c\xbc\xcb\xbc\xf9\x9f\xd8\x2e\x93\x22\xb3\x9b\xc2\xa2\x89\xe7\x29\xfb\x63\xc2\x16\x4e\xe6\x69\xb8\x3f\x5b\x6e\x98\xd2\x02\x6c\xd8\x86\xad\xb4\xd9\x3b\x8e\xfc\x03\x60\x7c\xd7\x13\x26\x10\x88\xfa\x79\xd0\xb8\xa0\x3a\xea\x09\x84\x7c\x9a\x76\xaf\x88\x7a\x5a\x94\x9e\xb5\xba\xa9\x9c\x6f\x50\xff\x0b\x7c\x27\x42\xb3\x81\xa3\x26\x1c\xdc\xc5\xc8\x37\x3d\xa0\x78\xd1\x80\x98\xa2\x99\x6b\x92\x46\x81\xfd\x71\x83\x53\x1b\x7a\x6a\xc3\xb7\x12\x39\x11\xe6\xcd\xf7\x44\x9f\x2b\x5c\xb0\xeb\x37\xf3\xf9\x7c\x9e\x9e\xc1\x4b\x50\x68\x78\xf3\x37\x67\xb5\x5f\xb0\x0b\x10\xc1\xdb\xce\xb5\xf6\x37\xe7\x3a\xbe\xd5\x52\xfc\xb2\x05\xd3\xf0\xee\x22\xc0\x76\x46\xaa\xfa\x67\x50\xb5\x1b\x8c\x6f\x27\xfe\x0f\xa7\xcb\x96\xef\xfe\x0d\x8d\x2e\x3d\x95\xec\xed\x44\x2b\xd5\x48\x7b\xaa\x43\xd9\x82\x45\x20\x12\x57\x17\x9c\xbb\x9d\x9e\xa6\xcb\xb6\x5a\x13\xab\xf3\x24\x0e\xc9\xaf\x78\x63\xe1\x3c\x2a\x2a\xc6\x05\x9b\x95\x5a\xa1\x54\x1b\xbd\xb1\xb3\x97\xa2\x0a\xa3\x29\xfa\x7a\xee\x9e\xe8\x54\x1b\x0a\xe9\x2c\x5a\x6e\x8c\x7e\x3c\xe3\xec\xde\xae\x2f\x49\xd9\xcb\x45\x33\x04\x5d\xf2\x06\xde\x73\xea\x9e\xee\xa5\x67\xa0\xc3\xd5\xe5\xd5\x28\x28\x77\xb8\xa6\x1c\x68\xd4\x5e\xe2\xd5\x47\xef\x26\x73\xf4\x9c\x73\xdf\x0e\x4e\x4e\x1d\x65\x97\x4b\x05\xd4\x71\x87\x31\x50\x03\xfe\xd0\x00\x7d\xfd\xeb\xfe\x27\x11\xcf\x86\x69\x3a\x4b\x46\xa6\x7e\x7a\x3c\x6f\x45\xfa\x59\x32\x9e\x01\xfd\xbd\xeb\xd8\x0c\xfe\xe1\x25\xf1\x40\x23\x65\x4f\x3e\xf2\x34\x34\x8e\x43\xda\x77\x86\xe0\xaa\xbf\x7b\x6a\x15\xcf\xdc\x2c\x9d\xa5\x2c\xee\xb8\xe1\xad\x9d\x4c\x0b\x59\xf5\x8a\xcc\xb9\xbc\x9b\xdf\x27\xa7\xa9\x23\x31\xb1\x21\xad\xeb\x9f\x53\xf8\xcd\x09\x9c\x1c\x9e\x75\x4d\xc2\xfa\xc6\x99\x5c\xd8\x18\x3f\x9c\x7f\xa3\xd9\x1c\x2c\xf3\xdf\x3d\x0d\x26\x87\x7e\x21\xc5\xe1\xb7\x97\xc6\x36\x4d\xfe\x61\x6c\x53\xb2\x40\xa1\x9b\xdc\x34\xa8\xa5\x52\x60\x7e\x85\x1d\xb2\x15\x0b\xba\x09\xf1\x03\x83\xc6\x82\xe3\x4f\x73\xf8\x0b\xc8\x93\xd9\x09\x73\xfb\xff\xa7\x3e\xbc\x9c\xad\x56\x2b\x16\xd1\xb4\x8c\x5e\x43\x9b\x80\xff\x53\x8a\xc7\x13\x36\x1d\xce\xe1\xda\xda\x4f\x3a\x21\xab\x0a\x0c\xa8\x92\xaa\x2e\xae\xa4\xb1\x98\x32\xae\x34\xae\xa9\xf2\x4b\xdd\x76\xdc\xf8\x3b\x8f\xd3\x65\x95\x6c\x10\x4c\xec\x2e\x69\x5f\x05\x5c\x66\x75\x0b\x71\x41\xa2\x60\x10\xf3\x94\x15\x49\xd2\xbf\xa4\xda\xa8\x92\x0e\x0c\x6b\x34\x17\xf1\x38\x41\xe1\xa6\x48\x89\xa9\x0d\xef\xd6\xaf\xbf\x29\xd2\xe2\xf4\x70\xf5\xc7\xc7\x66\x74\xab\xd9\x42\x7c\x8c\x2d\x3e\x9e\xa7\x24\x65\x64\x9a\x85\x23\xed\x99\x92\x23\x9e\x49\xe1\xb6\xb1\xc8\xa4\x48\x26\x09\xf5\xf6\x5c\x88\xb1\xd3\xb1\x9f\x93\x17\x3c\xe7\x34\x6b\x79\x17\xef\x48\x1e\x3f\x31\x29\xfc\x0d\x26\x65\x0d\xdd\x82\x16\x0c\xd7\xd2\x66\xe1\x4e\x14\xef\x92\x94\xb9\xbb\x6f\x0f\x0a\xfd\x34\x80\xdc\x95\xb4\xbf\x1e\xa5\x61\x30\xf9\xe5\x89\x1d\x3b\x1c\x77\xa1\x7f\x5c\x17\xbb\x90\x23\x2f\x1f\xe7\xc8\x49\x4e\xc3\xa9\x8c\x6e\x43\x40\xee\xeb\x37\xdf\x30\x9e\xa1\x0e\x22\xd4\xd3\xc4\x79\xa7\x97\x12\x17\x9c\x9f\xbc\xf5\x4b\xdf\x74\x48\x4e\x7e\xe1\x0d\xf5\xe6\x7f\x0b\x8d\x6a\xa4\x6f\xd5\xe1\xf6\x95\x11\xe0\x83\x6c\x37\x8d\xbb\x39\xc5\x13\x37\xd5\xa3\xa0\x53\x31\x69\xe2\xaf\xf3\x71\x19\xc9\x0b\xd9\xc8\x4f\x10\xbf\x9d\xcf\x5f\xc6\x19\x7c\x96\x96\x3f\x44\x5e\x64\x01\x7f\x52\x08\x66\xcb\x9b\x98\xe4\x29\xfb\x6e\x3e\xb8\x3e\xfe\x67\x65\x99\xfb\x5f\xa4\xcb\xdc\xfd\xeb\xe8\xbf\x01\x00\x00\xff\xff\xba\xac\x20\x75\x51\x12\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 4689, mode: os.FileMode(420), modTime: time.Unix(1581513962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/favicon.ico": htmlFaviconIco,
	"html/index.html":  htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{htmlFaviconIco, map[string]*bintree{}},
		"index.html":  &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
